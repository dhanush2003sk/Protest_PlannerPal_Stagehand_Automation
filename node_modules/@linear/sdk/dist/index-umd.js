(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Linear = {}));
})(this, (function (exports) { 'use strict';

    (function() {
        const env = {"npm_package_name":"linear","npm_package_version":"60.0.0"};
        try {
            if (process) {
                process.env = Object.assign({}, process.env);
                Object.assign(process.env, env);
                return;
            }
        } catch (e) {} // avoid ReferenceError: process is not defined
        globalThis.process = { env:env };
    })();

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    /**
     * The error types returned by the Linear API
     */
    exports.LinearErrorType = void 0;
    (function (LinearErrorType) {
        LinearErrorType["FeatureNotAccessible"] = "FeatureNotAccessible";
        LinearErrorType["InvalidInput"] = "InvalidInput";
        LinearErrorType["Ratelimited"] = "Ratelimited";
        LinearErrorType["NetworkError"] = "NetworkError";
        LinearErrorType["AuthenticationError"] = "AuthenticationError";
        LinearErrorType["Forbidden"] = "Forbidden";
        LinearErrorType["BootstrapError"] = "BootstrapError";
        LinearErrorType["Unknown"] = "Unknown";
        LinearErrorType["InternalError"] = "InternalError";
        LinearErrorType["Other"] = "Other";
        LinearErrorType["UserError"] = "UserError";
        LinearErrorType["GraphqlError"] = "GraphqlError";
        LinearErrorType["LockTimeout"] = "LockTimeout";
        LinearErrorType["UsageLimitExceeded"] = "UsageLimitExceeded";
    })(exports.LinearErrorType || (exports.LinearErrorType = {}));

    /**
     * Serialize an object into an encoded user agent string
     *
     * @param seed user agent properties to serialize
     * @returns the serialized user agent string
     */
    function serializeUserAgent(seed) {
        return Object.entries(seed).reduce((acc, [key, value]) => {
            const encoded = `${key}@${encodeURIComponent(value)}`;
            return acc ? `${acc} ${encoded}` : encoded;
        }, "");
    }
    /**
     * Capitalize the first character of a string
     *
     * @param str the string to capitalize
     */
    function capitalize(str) {
        return str ? `${str.charAt(0).toUpperCase()}${str.slice(1)}` : undefined;
    }
    /**
     * Type safe check for non defined values
     */
    function nonNullable(value) {
        return value !== null && value !== undefined;
    }
    /**
     * Return the key matching the value in an object
     */
    function getKeyByValue(obj, value) {
        const keys = Object.keys(obj);
        return keys.find(key => obj[key] === value);
    }

    /**
     * A map between the Linear API string type and the LinearErrorType enum
     */
    const errorMap = {
        [exports.LinearErrorType.FeatureNotAccessible]: "feature not accessible",
        [exports.LinearErrorType.InvalidInput]: "invalid input",
        [exports.LinearErrorType.Ratelimited]: "ratelimited",
        [exports.LinearErrorType.NetworkError]: "network error",
        [exports.LinearErrorType.AuthenticationError]: "authentication error",
        [exports.LinearErrorType.Forbidden]: "forbidden",
        [exports.LinearErrorType.BootstrapError]: "bootstrap error",
        [exports.LinearErrorType.Unknown]: "unknown",
        [exports.LinearErrorType.InternalError]: "internal error",
        [exports.LinearErrorType.Other]: "other",
        [exports.LinearErrorType.UserError]: "user error",
        [exports.LinearErrorType.GraphqlError]: "graphql error",
        [exports.LinearErrorType.LockTimeout]: "lock timeout",
        [exports.LinearErrorType.UsageLimitExceeded]: "usage limit exceeded",
    };
    /**
     * Match the error type or return unknown
     */
    function getErrorType(type) {
        var _a;
        return (_a = getKeyByValue(errorMap, type)) !== null && _a !== void 0 ? _a : exports.LinearErrorType.Unknown;
    }
    /**
     * The error shown if no other message is available
     */
    const defaultError = "Unknown error from LinearClient";
    /**
     * One of potentially many graphql errors returned by the Linear API
     *
     * @error the raw graphql error returned on the error response
     */
    class LinearGraphQLError {
        constructor(error) {
            var _a, _b, _c, _d, _e, _f, _g;
            this.type = getErrorType((_a = error === null || error === void 0 ? void 0 : error.extensions) === null || _a === void 0 ? void 0 : _a.type);
            this.userError = (_b = error === null || error === void 0 ? void 0 : error.extensions) === null || _b === void 0 ? void 0 : _b.userError;
            this.path = error === null || error === void 0 ? void 0 : error.path;
            /** Select most readable message */
            this.message =
                (_g = (_e = (_d = (_c = error === null || error === void 0 ? void 0 : error.extensions) === null || _c === void 0 ? void 0 : _c.userPresentableMessage) !== null && _d !== void 0 ? _d : error === null || error === void 0 ? void 0 : error.message) !== null && _e !== void 0 ? _e : (_f = error === null || error === void 0 ? void 0 : error.extensions) === null || _f === void 0 ? void 0 : _f.type) !== null && _g !== void 0 ? _g : defaultError;
        }
    }
    /**
     * An error from the Linear API
     *
     * @param error a raw error returned from the LinearGraphQLClient
     */
    class LinearError extends Error {
        constructor(error, errors, type) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            /** Find messages, duplicate and join, or default */
            super((_e = Array.from(new Set([capitalize((_b = (_a = error === null || error === void 0 ? void 0 : error.message) === null || _a === void 0 ? void 0 : _a.split(": {")) === null || _b === void 0 ? void 0 : _b[0]), (_c = error === null || error === void 0 ? void 0 : error.response) === null || _c === void 0 ? void 0 : _c.error, (_d = errors === null || errors === void 0 ? void 0 : errors[0]) === null || _d === void 0 ? void 0 : _d.message].filter(nonNullable)))
                .filter(nonNullable)
                .join(" - ")) !== null && _e !== void 0 ? _e : defaultError);
            this.type = type;
            /** Set error properties */
            this.errors = errors;
            this.query = (_f = error === null || error === void 0 ? void 0 : error.request) === null || _f === void 0 ? void 0 : _f.query;
            this.variables = (_g = error === null || error === void 0 ? void 0 : error.request) === null || _g === void 0 ? void 0 : _g.variables;
            this.status = (_h = error === null || error === void 0 ? void 0 : error.response) === null || _h === void 0 ? void 0 : _h.status;
            this.data = (_j = error === null || error === void 0 ? void 0 : error.response) === null || _j === void 0 ? void 0 : _j.data;
            this.raw = error;
        }
    }
    class FeatureNotAccessibleLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.FeatureNotAccessible);
        }
    }
    class InvalidInputLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.InvalidInput);
        }
    }
    class RatelimitedLinearError extends LinearError {
        constructor(error, errors) {
            var _a;
            super(error, errors, exports.LinearErrorType.Ratelimited);
            const headers = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.headers;
            this.retryAfter = this.parseNumber(headers === null || headers === void 0 ? void 0 : headers.get("retry-after"));
            this.requestsLimit = this.parseNumber(headers === null || headers === void 0 ? void 0 : headers.get("x-ratelimit-requests-limit"));
            this.requestsRemaining = this.parseNumber(headers === null || headers === void 0 ? void 0 : headers.get("x-ratelimit-requests-remaining"));
            this.requestsResetAt = this.parseNumber(headers === null || headers === void 0 ? void 0 : headers.get("x-ratelimit-requests-reset"));
            this.complexityLimit = this.parseNumber(headers === null || headers === void 0 ? void 0 : headers.get("x-ratelimit-complexity-limit"));
            this.complexityRemaining = this.parseNumber(headers === null || headers === void 0 ? void 0 : headers.get("x-ratelimit-complexity-remaining"));
            this.complexityResetAt = this.parseNumber(headers === null || headers === void 0 ? void 0 : headers.get("x-ratelimit-complexity-reset"));
        }
        parseNumber(value) {
            var _a;
            if (value === undefined || value === null || value === "") {
                return undefined;
            }
            return (_a = Number(value)) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    class NetworkLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.NetworkError);
        }
    }
    class AuthenticationLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.AuthenticationError);
        }
    }
    class ForbiddenLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.Forbidden);
        }
    }
    class BootstrapLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.BootstrapError);
        }
    }
    class UnknownLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.Unknown);
        }
    }
    class InternalLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.InternalError);
        }
    }
    class OtherLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.Other);
        }
    }
    class UserLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.UserError);
        }
    }
    class GraphqlLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.GraphqlError);
        }
    }
    class LockTimeoutLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.LockTimeout);
        }
    }
    class UsageLimitExceededLinearError extends LinearError {
        constructor(error, errors) {
            super(error, errors, exports.LinearErrorType.UsageLimitExceeded);
        }
    }
    /**
     * A map between the Linear error type and the LinearError class
     */
    const errorConstructorMap = {
        [exports.LinearErrorType.FeatureNotAccessible]: FeatureNotAccessibleLinearError,
        [exports.LinearErrorType.InvalidInput]: InvalidInputLinearError,
        [exports.LinearErrorType.Ratelimited]: RatelimitedLinearError,
        [exports.LinearErrorType.NetworkError]: NetworkLinearError,
        [exports.LinearErrorType.AuthenticationError]: AuthenticationLinearError,
        [exports.LinearErrorType.Forbidden]: ForbiddenLinearError,
        [exports.LinearErrorType.BootstrapError]: BootstrapLinearError,
        [exports.LinearErrorType.Unknown]: UnknownLinearError,
        [exports.LinearErrorType.InternalError]: InternalLinearError,
        [exports.LinearErrorType.Other]: OtherLinearError,
        [exports.LinearErrorType.UserError]: UserLinearError,
        [exports.LinearErrorType.GraphqlError]: GraphqlLinearError,
        [exports.LinearErrorType.LockTimeout]: LockTimeoutLinearError,
        [exports.LinearErrorType.UsageLimitExceeded]: UsageLimitExceededLinearError,
    };
    function parseLinearError(error) {
        var _a, _b, _c, _d, _e, _f;
        if (error instanceof LinearError) {
            return error;
        }
        /** Parse graphQL errors */
        const errors = ((_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.errors) !== null && _b !== void 0 ? _b : []).map(graphqlError => {
            return new LinearGraphQLError(graphqlError);
        });
        /** Set type based first graphql error or http status */
        const status = (_c = error === null || error === void 0 ? void 0 : error.response) === null || _c === void 0 ? void 0 : _c.status;
        const type = (_e = (_d = errors[0]) === null || _d === void 0 ? void 0 : _d.type) !== null && _e !== void 0 ? _e : (status === 403
            ? exports.LinearErrorType.Forbidden
            : status === 429
                ? exports.LinearErrorType.Ratelimited
                : `${status}`.startsWith("4")
                    ? exports.LinearErrorType.AuthenticationError
                    : status === 500
                        ? exports.LinearErrorType.InternalError
                        : `${status}`.startsWith("5")
                            ? exports.LinearErrorType.NetworkError
                            : exports.LinearErrorType.Unknown);
        const LinearErrorConstructor = (_f = errorConstructorMap[type]) !== null && _f !== void 0 ? _f : LinearError;
        return new LinearErrorConstructor(error, errors);
    }

    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')
    var nodejsCustomInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;
    var nodejsCustomInspectSymbol$1 = nodejsCustomInspectSymbol;

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }
    var MAX_ARRAY_LENGTH = 10;
    var MAX_RECURSIVE_DEPTH = 2;
    /**
     * Used to print values in error messages.
     */

    function inspect(value) {
      return formatValue(value, []);
    }

    function formatValue(value, seenValues) {
      switch (_typeof(value)) {
        case 'string':
          return JSON.stringify(value);

        case 'function':
          return value.name ? "[function ".concat(value.name, "]") : '[function]';

        case 'object':
          if (value === null) {
            return 'null';
          }

          return formatObjectValue(value, seenValues);

        default:
          return String(value);
      }
    }

    function formatObjectValue(value, previouslySeenValues) {
      if (previouslySeenValues.indexOf(value) !== -1) {
        return '[Circular]';
      }

      var seenValues = [].concat(previouslySeenValues, [value]);
      var customInspectFn = getCustomFn(value);

      if (customInspectFn !== undefined) {
        var customValue = customInspectFn.call(value); // check for infinite recursion

        if (customValue !== value) {
          return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);
        }
      } else if (Array.isArray(value)) {
        return formatArray(value, seenValues);
      }

      return formatObject(value, seenValues);
    }

    function formatObject(object, seenValues) {
      var keys = Object.keys(object);

      if (keys.length === 0) {
        return '{}';
      }

      if (seenValues.length > MAX_RECURSIVE_DEPTH) {
        return '[' + getObjectTag(object) + ']';
      }

      var properties = keys.map(function (key) {
        var value = formatValue(object[key], seenValues);
        return key + ': ' + value;
      });
      return '{ ' + properties.join(', ') + ' }';
    }

    function formatArray(array, seenValues) {
      if (array.length === 0) {
        return '[]';
      }

      if (seenValues.length > MAX_RECURSIVE_DEPTH) {
        return '[Array]';
      }

      var len = Math.min(MAX_ARRAY_LENGTH, array.length);
      var remaining = array.length - len;
      var items = [];

      for (var i = 0; i < len; ++i) {
        items.push(formatValue(array[i], seenValues));
      }

      if (remaining === 1) {
        items.push('... 1 more item');
      } else if (remaining > 1) {
        items.push("... ".concat(remaining, " more items"));
      }

      return '[' + items.join(', ') + ']';
    }

    function getCustomFn(object) {
      var customInspectFn = object[String(nodejsCustomInspectSymbol$1)];

      if (typeof customInspectFn === 'function') {
        return customInspectFn;
      }

      if (typeof object.inspect === 'function') {
        return object.inspect;
      }
    }

    function getObjectTag(object) {
      var tag = Object.prototype.toString.call(object).replace(/^\[object /, '').replace(/]$/, '');

      if (tag === 'Object' && typeof object.constructor === 'function') {
        var name = object.constructor.name;

        if (typeof name === 'string' && name !== '') {
          return name;
        }
      }

      return tag;
    }

    function invariant(condition, message) {
      var booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')

      if (!booleanCondition) {
        throw new Error(message != null ? message : 'Unexpected invariant triggered.');
      }
    }

    /**
     * The `defineInspect()` function defines `inspect()` prototype method as alias of `toJSON`
     */

    function defineInspect(classObject) {
      var fn = classObject.prototype.toJSON;
      typeof fn === 'function' || invariant(0);
      classObject.prototype.inspect = fn; // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2317')

      if (nodejsCustomInspectSymbol$1) {
        classObject.prototype[nodejsCustomInspectSymbol$1] = fn;
      }
    }

    /**
     * Contains a range of UTF-8 character offsets and token references that
     * identify the region of the source from which the AST derived.
     */
    var Location = /*#__PURE__*/function () {
      /**
       * The character offset at which this Node begins.
       */

      /**
       * The character offset at which this Node ends.
       */

      /**
       * The Token at which this Node begins.
       */

      /**
       * The Token at which this Node ends.
       */

      /**
       * The Source document the AST represents.
       */
      function Location(startToken, endToken, source) {
        this.start = startToken.start;
        this.end = endToken.end;
        this.startToken = startToken;
        this.endToken = endToken;
        this.source = source;
      }

      var _proto = Location.prototype;

      _proto.toJSON = function toJSON() {
        return {
          start: this.start,
          end: this.end
        };
      };

      return Location;
    }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

    defineInspect(Location);
    /**
     * Represents a range of characters represented by a lexical token
     * within a Source.
     */

    var Token = /*#__PURE__*/function () {
      /**
       * The kind of Token.
       */

      /**
       * The character offset at which this Node begins.
       */

      /**
       * The character offset at which this Node ends.
       */

      /**
       * The 1-indexed line number on which this Token appears.
       */

      /**
       * The 1-indexed column number at which this Token begins.
       */

      /**
       * For non-punctuation tokens, represents the interpreted value of the token.
       */

      /**
       * Tokens exist as nodes in a double-linked-list amongst all tokens
       * including ignored tokens. <SOF> is always the first node and <EOF>
       * the last.
       */
      function Token(kind, start, end, line, column, prev, value) {
        this.kind = kind;
        this.start = start;
        this.end = end;
        this.line = line;
        this.column = column;
        this.value = value;
        this.prev = prev;
        this.next = null;
      }

      var _proto2 = Token.prototype;

      _proto2.toJSON = function toJSON() {
        return {
          kind: this.kind,
          value: this.value,
          line: this.line,
          column: this.column
        };
      };

      return Token;
    }(); // Print a simplified form when appearing in `inspect` and `util.inspect`.

    defineInspect(Token);
    /**
     * @internal
     */

    function isNode(maybeNode) {
      return maybeNode != null && typeof maybeNode.kind === 'string';
    }
    /**
     * The list of all possible AST node types.
     */

    /**
     * A visitor is provided to visit, it contains the collection of
     * relevant functions to be called during the visitor's traversal.
     */

    var QueryDocumentKeys = {
      Name: [],
      Document: ['definitions'],
      OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],
      VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],
      Variable: ['name'],
      SelectionSet: ['selections'],
      Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],
      Argument: ['name', 'value'],
      FragmentSpread: ['name', 'directives'],
      InlineFragment: ['typeCondition', 'directives', 'selectionSet'],
      FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed
      // or removed in the future.
      'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],
      IntValue: [],
      FloatValue: [],
      StringValue: [],
      BooleanValue: [],
      NullValue: [],
      EnumValue: [],
      ListValue: ['values'],
      ObjectValue: ['fields'],
      ObjectField: ['name', 'value'],
      Directive: ['name', 'arguments'],
      NamedType: ['name'],
      ListType: ['type'],
      NonNullType: ['type'],
      SchemaDefinition: ['description', 'directives', 'operationTypes'],
      OperationTypeDefinition: ['type'],
      ScalarTypeDefinition: ['description', 'name', 'directives'],
      ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
      FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],
      InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],
      InterfaceTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],
      UnionTypeDefinition: ['description', 'name', 'directives', 'types'],
      EnumTypeDefinition: ['description', 'name', 'directives', 'values'],
      EnumValueDefinition: ['description', 'name', 'directives'],
      InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],
      DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],
      SchemaExtension: ['directives', 'operationTypes'],
      ScalarTypeExtension: ['name', 'directives'],
      ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
      InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
      UnionTypeExtension: ['name', 'directives', 'types'],
      EnumTypeExtension: ['name', 'directives', 'values'],
      InputObjectTypeExtension: ['name', 'directives', 'fields']
    };
    var BREAK = Object.freeze({});
    /**
     * visit() will walk through an AST using a depth-first traversal, calling
     * the visitor's enter function at each node in the traversal, and calling the
     * leave function after visiting that node and all of its child nodes.
     *
     * By returning different values from the enter and leave functions, the
     * behavior of the visitor can be altered, including skipping over a sub-tree of
     * the AST (by returning false), editing the AST by returning a value or null
     * to remove the value, or to stop the whole traversal by returning BREAK.
     *
     * When using visit() to edit an AST, the original AST will not be modified, and
     * a new version of the AST with the changes applied will be returned from the
     * visit function.
     *
     *     const editedAST = visit(ast, {
     *       enter(node, key, parent, path, ancestors) {
     *         // @return
     *         //   undefined: no action
     *         //   false: skip visiting this node
     *         //   visitor.BREAK: stop visiting altogether
     *         //   null: delete this node
     *         //   any value: replace this node with the returned value
     *       },
     *       leave(node, key, parent, path, ancestors) {
     *         // @return
     *         //   undefined: no action
     *         //   false: no action
     *         //   visitor.BREAK: stop visiting altogether
     *         //   null: delete this node
     *         //   any value: replace this node with the returned value
     *       }
     *     });
     *
     * Alternatively to providing enter() and leave() functions, a visitor can
     * instead provide functions named the same as the kinds of AST nodes, or
     * enter/leave visitors at a named key, leading to four permutations of the
     * visitor API:
     *
     * 1) Named visitors triggered when entering a node of a specific kind.
     *
     *     visit(ast, {
     *       Kind(node) {
     *         // enter the "Kind" node
     *       }
     *     })
     *
     * 2) Named visitors that trigger upon entering and leaving a node of
     *    a specific kind.
     *
     *     visit(ast, {
     *       Kind: {
     *         enter(node) {
     *           // enter the "Kind" node
     *         }
     *         leave(node) {
     *           // leave the "Kind" node
     *         }
     *       }
     *     })
     *
     * 3) Generic visitors that trigger upon entering and leaving any node.
     *
     *     visit(ast, {
     *       enter(node) {
     *         // enter any node
     *       },
     *       leave(node) {
     *         // leave any node
     *       }
     *     })
     *
     * 4) Parallel visitors for entering and leaving nodes of a specific kind.
     *
     *     visit(ast, {
     *       enter: {
     *         Kind(node) {
     *           // enter the "Kind" node
     *         }
     *       },
     *       leave: {
     *         Kind(node) {
     *           // leave the "Kind" node
     *         }
     *       }
     *     })
     */

    function visit(root, visitor) {
      var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;

      /* eslint-disable no-undef-init */
      var stack = undefined;
      var inArray = Array.isArray(root);
      var keys = [root];
      var index = -1;
      var edits = [];
      var node = undefined;
      var key = undefined;
      var parent = undefined;
      var path = [];
      var ancestors = [];
      var newRoot = root;
      /* eslint-enable no-undef-init */

      do {
        index++;
        var isLeaving = index === keys.length;
        var isEdited = isLeaving && edits.length !== 0;

        if (isLeaving) {
          key = ancestors.length === 0 ? undefined : path[path.length - 1];
          node = parent;
          parent = ancestors.pop();

          if (isEdited) {
            if (inArray) {
              node = node.slice();
            } else {
              var clone = {};

              for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {
                var k = _Object$keys2[_i2];
                clone[k] = node[k];
              }

              node = clone;
            }

            var editOffset = 0;

            for (var ii = 0; ii < edits.length; ii++) {
              var editKey = edits[ii][0];
              var editValue = edits[ii][1];

              if (inArray) {
                editKey -= editOffset;
              }

              if (inArray && editValue === null) {
                node.splice(editKey, 1);
                editOffset++;
              } else {
                node[editKey] = editValue;
              }
            }
          }

          index = stack.index;
          keys = stack.keys;
          edits = stack.edits;
          inArray = stack.inArray;
          stack = stack.prev;
        } else {
          key = parent ? inArray ? index : keys[index] : undefined;
          node = parent ? parent[key] : newRoot;

          if (node === null || node === undefined) {
            continue;
          }

          if (parent) {
            path.push(key);
          }
        }

        var result = void 0;

        if (!Array.isArray(node)) {
          if (!isNode(node)) {
            throw new Error("Invalid AST Node: ".concat(inspect(node), "."));
          }

          var visitFn = getVisitFn(visitor, node.kind, isLeaving);

          if (visitFn) {
            result = visitFn.call(visitor, node, key, parent, path, ancestors);

            if (result === BREAK) {
              break;
            }

            if (result === false) {
              if (!isLeaving) {
                path.pop();
                continue;
              }
            } else if (result !== undefined) {
              edits.push([key, result]);

              if (!isLeaving) {
                if (isNode(result)) {
                  node = result;
                } else {
                  path.pop();
                  continue;
                }
              }
            }
          }
        }

        if (result === undefined && isEdited) {
          edits.push([key, node]);
        }

        if (isLeaving) {
          path.pop();
        } else {
          var _visitorKeys$node$kin;

          stack = {
            inArray: inArray,
            index: index,
            keys: keys,
            edits: edits,
            prev: stack
          };
          inArray = Array.isArray(node);
          keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];
          index = -1;
          edits = [];

          if (parent) {
            ancestors.push(parent);
          }

          parent = node;
        }
      } while (stack !== undefined);

      if (edits.length !== 0) {
        newRoot = edits[edits.length - 1][1];
      }

      return newRoot;
    }
    /**
     * Given a visitor instance, if it is leaving or not, and a node kind, return
     * the function the visitor runtime should call.
     */

    function getVisitFn(visitor, kind, isLeaving) {
      var kindVisitor = visitor[kind];

      if (kindVisitor) {
        if (!isLeaving && typeof kindVisitor === 'function') {
          // { Kind() {} }
          return kindVisitor;
        }

        var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;

        if (typeof kindSpecificVisitor === 'function') {
          // { Kind: { enter() {}, leave() {} } }
          return kindSpecificVisitor;
        }
      } else {
        var specificVisitor = isLeaving ? visitor.leave : visitor.enter;

        if (specificVisitor) {
          if (typeof specificVisitor === 'function') {
            // { enter() {}, leave() {} }
            return specificVisitor;
          }

          var specificKindVisitor = specificVisitor[kind];

          if (typeof specificKindVisitor === 'function') {
            // { enter: { Kind() {} }, leave: { Kind() {} } }
            return specificKindVisitor;
          }
        }
      }
    }

    /**
     * Print a block string in the indented block form by adding a leading and
     * trailing blank line. However, if a block string starts with whitespace and is
     * a single-line, adding a leading blank line would strip that whitespace.
     *
     * @internal
     */

    function printBlockString(value) {
      var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var isSingleLine = value.indexOf('\n') === -1;
      var hasLeadingSpace = value[0] === ' ' || value[0] === '\t';
      var hasTrailingQuote = value[value.length - 1] === '"';
      var hasTrailingSlash = value[value.length - 1] === '\\';
      var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;
      var result = ''; // Format a multi-line block quote to account for leading space.

      if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {
        result += '\n' + indentation;
      }

      result += indentation ? value.replace(/\n/g, '\n' + indentation) : value;

      if (printAsMultipleLines) {
        result += '\n';
      }

      return '"""' + result.replace(/"""/g, '\\"""') + '"""';
    }

    /**
     * Converts an AST into a string, using one set of reasonable
     * formatting rules.
     */

    function print(ast) {
      return visit(ast, {
        leave: printDocASTReducer
      });
    }
    var MAX_LINE_LENGTH = 80; // TODO: provide better type coverage in future

    var printDocASTReducer = {
      Name: function Name(node) {
        return node.value;
      },
      Variable: function Variable(node) {
        return '$' + node.name;
      },
      // Document
      Document: function Document(node) {
        return join(node.definitions, '\n\n') + '\n';
      },
      OperationDefinition: function OperationDefinition(node) {
        var op = node.operation;
        var name = node.name;
        var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');
        var directives = join(node.directives, ' ');
        var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use
        // the query short form.

        return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');
      },
      VariableDefinition: function VariableDefinition(_ref) {
        var variable = _ref.variable,
            type = _ref.type,
            defaultValue = _ref.defaultValue,
            directives = _ref.directives;
        return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));
      },
      SelectionSet: function SelectionSet(_ref2) {
        var selections = _ref2.selections;
        return block(selections);
      },
      Field: function Field(_ref3) {
        var alias = _ref3.alias,
            name = _ref3.name,
            args = _ref3.arguments,
            directives = _ref3.directives,
            selectionSet = _ref3.selectionSet;
        var prefix = wrap('', alias, ': ') + name;
        var argsLine = prefix + wrap('(', join(args, ', '), ')');

        if (argsLine.length > MAX_LINE_LENGTH) {
          argsLine = prefix + wrap('(\n', indent(join(args, '\n')), '\n)');
        }

        return join([argsLine, join(directives, ' '), selectionSet], ' ');
      },
      Argument: function Argument(_ref4) {
        var name = _ref4.name,
            value = _ref4.value;
        return name + ': ' + value;
      },
      // Fragments
      FragmentSpread: function FragmentSpread(_ref5) {
        var name = _ref5.name,
            directives = _ref5.directives;
        return '...' + name + wrap(' ', join(directives, ' '));
      },
      InlineFragment: function InlineFragment(_ref6) {
        var typeCondition = _ref6.typeCondition,
            directives = _ref6.directives,
            selectionSet = _ref6.selectionSet;
        return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');
      },
      FragmentDefinition: function FragmentDefinition(_ref7) {
        var name = _ref7.name,
            typeCondition = _ref7.typeCondition,
            variableDefinitions = _ref7.variableDefinitions,
            directives = _ref7.directives,
            selectionSet = _ref7.selectionSet;
        return (// Note: fragment variable definitions are experimental and may be changed
          // or removed in the future.
          "fragment ".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), " ") + "on ".concat(typeCondition, " ").concat(wrap('', join(directives, ' '), ' ')) + selectionSet
        );
      },
      // Value
      IntValue: function IntValue(_ref8) {
        var value = _ref8.value;
        return value;
      },
      FloatValue: function FloatValue(_ref9) {
        var value = _ref9.value;
        return value;
      },
      StringValue: function StringValue(_ref10, key) {
        var value = _ref10.value,
            isBlockString = _ref10.block;
        return isBlockString ? printBlockString(value, key === 'description' ? '' : '  ') : JSON.stringify(value);
      },
      BooleanValue: function BooleanValue(_ref11) {
        var value = _ref11.value;
        return value ? 'true' : 'false';
      },
      NullValue: function NullValue() {
        return 'null';
      },
      EnumValue: function EnumValue(_ref12) {
        var value = _ref12.value;
        return value;
      },
      ListValue: function ListValue(_ref13) {
        var values = _ref13.values;
        return '[' + join(values, ', ') + ']';
      },
      ObjectValue: function ObjectValue(_ref14) {
        var fields = _ref14.fields;
        return '{' + join(fields, ', ') + '}';
      },
      ObjectField: function ObjectField(_ref15) {
        var name = _ref15.name,
            value = _ref15.value;
        return name + ': ' + value;
      },
      // Directive
      Directive: function Directive(_ref16) {
        var name = _ref16.name,
            args = _ref16.arguments;
        return '@' + name + wrap('(', join(args, ', '), ')');
      },
      // Type
      NamedType: function NamedType(_ref17) {
        var name = _ref17.name;
        return name;
      },
      ListType: function ListType(_ref18) {
        var type = _ref18.type;
        return '[' + type + ']';
      },
      NonNullType: function NonNullType(_ref19) {
        var type = _ref19.type;
        return type + '!';
      },
      // Type System Definitions
      SchemaDefinition: addDescription(function (_ref20) {
        var directives = _ref20.directives,
            operationTypes = _ref20.operationTypes;
        return join(['schema', join(directives, ' '), block(operationTypes)], ' ');
      }),
      OperationTypeDefinition: function OperationTypeDefinition(_ref21) {
        var operation = _ref21.operation,
            type = _ref21.type;
        return operation + ': ' + type;
      },
      ScalarTypeDefinition: addDescription(function (_ref22) {
        var name = _ref22.name,
            directives = _ref22.directives;
        return join(['scalar', name, join(directives, ' ')], ' ');
      }),
      ObjectTypeDefinition: addDescription(function (_ref23) {
        var name = _ref23.name,
            interfaces = _ref23.interfaces,
            directives = _ref23.directives,
            fields = _ref23.fields;
        return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      }),
      FieldDefinition: addDescription(function (_ref24) {
        var name = _ref24.name,
            args = _ref24.arguments,
            type = _ref24.type,
            directives = _ref24.directives;
        return name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '));
      }),
      InputValueDefinition: addDescription(function (_ref25) {
        var name = _ref25.name,
            type = _ref25.type,
            defaultValue = _ref25.defaultValue,
            directives = _ref25.directives;
        return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');
      }),
      InterfaceTypeDefinition: addDescription(function (_ref26) {
        var name = _ref26.name,
            interfaces = _ref26.interfaces,
            directives = _ref26.directives,
            fields = _ref26.fields;
        return join(['interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      }),
      UnionTypeDefinition: addDescription(function (_ref27) {
        var name = _ref27.name,
            directives = _ref27.directives,
            types = _ref27.types;
        return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
      }),
      EnumTypeDefinition: addDescription(function (_ref28) {
        var name = _ref28.name,
            directives = _ref28.directives,
            values = _ref28.values;
        return join(['enum', name, join(directives, ' '), block(values)], ' ');
      }),
      EnumValueDefinition: addDescription(function (_ref29) {
        var name = _ref29.name,
            directives = _ref29.directives;
        return join([name, join(directives, ' ')], ' ');
      }),
      InputObjectTypeDefinition: addDescription(function (_ref30) {
        var name = _ref30.name,
            directives = _ref30.directives,
            fields = _ref30.fields;
        return join(['input', name, join(directives, ' '), block(fields)], ' ');
      }),
      DirectiveDefinition: addDescription(function (_ref31) {
        var name = _ref31.name,
            args = _ref31.arguments,
            repeatable = _ref31.repeatable,
            locations = _ref31.locations;
        return 'directive @' + name + (hasMultilineItems(args) ? wrap('(\n', indent(join(args, '\n')), '\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ');
      }),
      SchemaExtension: function SchemaExtension(_ref32) {
        var directives = _ref32.directives,
            operationTypes = _ref32.operationTypes;
        return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');
      },
      ScalarTypeExtension: function ScalarTypeExtension(_ref33) {
        var name = _ref33.name,
            directives = _ref33.directives;
        return join(['extend scalar', name, join(directives, ' ')], ' ');
      },
      ObjectTypeExtension: function ObjectTypeExtension(_ref34) {
        var name = _ref34.name,
            interfaces = _ref34.interfaces,
            directives = _ref34.directives,
            fields = _ref34.fields;
        return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      },
      InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {
        var name = _ref35.name,
            interfaces = _ref35.interfaces,
            directives = _ref35.directives,
            fields = _ref35.fields;
        return join(['extend interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');
      },
      UnionTypeExtension: function UnionTypeExtension(_ref36) {
        var name = _ref36.name,
            directives = _ref36.directives,
            types = _ref36.types;
        return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');
      },
      EnumTypeExtension: function EnumTypeExtension(_ref37) {
        var name = _ref37.name,
            directives = _ref37.directives,
            values = _ref37.values;
        return join(['extend enum', name, join(directives, ' '), block(values)], ' ');
      },
      InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {
        var name = _ref38.name,
            directives = _ref38.directives,
            fields = _ref38.fields;
        return join(['extend input', name, join(directives, ' '), block(fields)], ' ');
      }
    };

    function addDescription(cb) {
      return function (node) {
        return join([node.description, cb(node)], '\n');
      };
    }
    /**
     * Given maybeArray, print an empty string if it is null or empty, otherwise
     * print all items together separated by separator if provided
     */


    function join(maybeArray) {
      var _maybeArray$filter$jo;

      var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function (x) {
        return x;
      }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : '';
    }
    /**
     * Given array, print each item on its own line, wrapped in an
     * indented "{ }" block.
     */


    function block(array) {
      return wrap('{\n', indent(join(array, '\n')), '\n}');
    }
    /**
     * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.
     */


    function wrap(start, maybeString) {
      var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      return maybeString != null && maybeString !== '' ? start + maybeString + end : '';
    }

    function indent(str) {
      return wrap('  ', str.replace(/\n/g, '\n  '));
    }

    function isMultiline(str) {
      return str.indexOf('\n') !== -1;
    }

    function hasMultilineItems(maybeArray) {
      return maybeArray != null && maybeArray.some(isMultiline);
    }

    function unfetch_module(e,n){return n=n||{},new Promise(function(t,r){var s=new XMLHttpRequest,o=[],u=[],i={},a=function(){return {ok:2==(s.status/100|0),statusText:s.statusText,status:s.status,url:s.responseURL,text:function(){return Promise.resolve(s.responseText)},json:function(){return Promise.resolve(s.responseText).then(JSON.parse)},blob:function(){return Promise.resolve(new Blob([s.response]))},clone:a,headers:{keys:function(){return o},entries:function(){return u},get:function(e){return i[e.toLowerCase()]},has:function(e){return e.toLowerCase()in i}}}};for(var l in s.open(n.method||"get",e,!0),s.onload=function(){s.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm,function(e,n,t){o.push(n=n.toLowerCase()),u.push([n,t]),i[n]=i[n]?i[n]+","+t:t;}),t(a());},s.onerror=r,s.withCredentials="include"==n.credentials,n.headers)s.setRequestHeader(l,n.headers[l]);s.send(n.body||null);})}

    var unfetch_module$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': unfetch_module
    });

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    var require$$0 = /*@__PURE__*/getAugmentedNamespace(unfetch_module$1);

    var browser = self.fetch || (self.fetch = require$$0.default || require$$0);

    /**
     * Identical class to graphql-request ClientError
     * Ensures parseLinearError is compatible with custom graphql-request clients
     *
     * @param response the raw response from the Linear API
     * @param request information about the request resulting in the error
     */
    class GraphQLClientError extends Error {
        constructor(response, request) {
            const message = `${GraphQLClientError.extractMessage(response)}: ${JSON.stringify({
            response,
            request,
        })}`;
            super(message);
            Object.setPrototypeOf(this, GraphQLClientError.prototype);
            this.response = response;
            this.request = request;
            // this is needed as Safari doesn't support .captureStackTrace
            if (typeof Error.captureStackTrace === "function") {
                Error.captureStackTrace(this, GraphQLClientError);
            }
        }
        static extractMessage(response) {
            var _a, _b, _c;
            try {
                return (_c = (_b = (_a = response.errors) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.message) !== null && _c !== void 0 ? _c : `GraphQL Error (Code: ${response.status})`;
            }
            catch (e) {
                return `GraphQL Error (Code: ${response.status})`;
            }
        }
    }
    /**
     * Create an isomorphic GraphQL client
     * Originally forked from graphql-request to remove the external dependency
     *
     * @param url base url to send the request to
     * @param options the request options
     */
    class LinearGraphQLClient {
        constructor(url, options) {
            this.url = url;
            this.options = options || {};
        }
        rawRequest(query, variables, requestHeaders) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const _b = this.options, { headers } = _b, others = __rest(_b, ["headers"]);
                const body = JSON.stringify({ query, variables });
                const fetch = (_a = globalThis.fetch) !== null && _a !== void 0 ? _a : browser;
                const response = yield fetch(this.url, Object.assign({ method: "POST", headers: Object.assign(Object.assign(Object.assign({}, (typeof body === "string" ? { "Content-Type": "application/json" } : {})), resolveHeaders(headers)), resolveHeaders(requestHeaders)), body }, others));
                const result = yield getResult(response);
                if (typeof result !== "string" && response.ok && !result.errors && result.data) {
                    return Object.assign(Object.assign({}, result), { headers: response.headers, status: response.status });
                }
                else {
                    throw parseLinearError(new GraphQLClientError(Object.assign(Object.assign({}, (typeof result === "string" ? { error: result } : result)), { status: response.status, headers: response.headers }), { query, variables }));
                }
            });
        }
        /**
         * Send a GraphQL document to the server.
         */
        request(document, variables, requestHeaders) {
            return __awaiter(this, void 0, void 0, function* () {
                const _a = this.options, { headers } = _a, others = __rest(_a, ["headers"]);
                const query = typeof document === "string" ? document : print(document);
                const body = JSON.stringify({ query, variables });
                const response = yield browser(this.url, Object.assign({ method: "POST", headers: Object.assign(Object.assign(Object.assign({}, (typeof body === "string" ? { "Content-Type": "application/json" } : {})), resolveHeaders(headers)), resolveHeaders(requestHeaders)), body }, others));
                const result = yield getResult(response);
                if (typeof result !== "string" && response.ok && !result.errors && result.data) {
                    return result.data;
                }
                else {
                    throw new GraphQLClientError(Object.assign(Object.assign({}, (typeof result === "string" ? { error: result } : result)), { status: response.status, headers: response.headers }), { query, variables });
                }
            });
        }
        setHeaders(headers) {
            this.options.headers = headers;
            return this;
        }
        /**
         * Attach a header to the client. All subsequent requests will have this header.
         */
        setHeader(key, value) {
            const { headers } = this.options;
            if (headers) {
                // todo what if headers is in nested array form... ?
                headers[key] = value;
            }
            else {
                this.options.headers = { [key]: value };
            }
            return this;
        }
    }
    /**
     * Parse the raw response
     *
     * @param response raw response from the Linear API
     */
    function getResult(response) {
        const contentType = response.headers.get("Content-Type");
        if (contentType && contentType.startsWith("application/json")) {
            return response.json();
        }
        else {
            return response.text();
        }
    }
    /**
     * Convert the given headers configuration into a plain object.
     */
    function resolveHeaders(headers) {
        let oHeaders = {};
        if (headers) {
            if (typeof Headers !== "undefined" && headers instanceof Headers) {
                oHeaders = headersToObject(headers);
            }
            else if (Array.isArray(headers)) {
                headers.forEach(([name, value]) => {
                    oHeaders[name] = value;
                });
            }
            else {
                oHeaders = headers;
            }
        }
        return oHeaders;
    }
    /**
     * Convert Headers instance into regular object
     */
    function headersToObject(headers) {
        const o = {};
        headers.forEach((v, k) => {
            o[k] = v;
        });
        return o;
    }

    /** A modifier that provides additional instructions on how the activity should be interpreted. */
    exports.AgentActivitySignal = void 0;
    (function (AgentActivitySignal) {
        AgentActivitySignal["Auth"] = "auth";
        AgentActivitySignal["Continue"] = "continue";
        AgentActivitySignal["Select"] = "select";
        AgentActivitySignal["Stop"] = "stop";
    })(exports.AgentActivitySignal || (exports.AgentActivitySignal = {}));
    /** The type of an agent activity. */
    exports.AgentActivityType = void 0;
    (function (AgentActivityType) {
        AgentActivityType["Action"] = "action";
        AgentActivityType["Elicitation"] = "elicitation";
        AgentActivityType["Error"] = "error";
        AgentActivityType["Prompt"] = "prompt";
        AgentActivityType["Response"] = "response";
        AgentActivityType["Thought"] = "thought";
    })(exports.AgentActivityType || (exports.AgentActivityType = {}));
    /** The status of an agent session. */
    exports.AgentSessionStatus = void 0;
    (function (AgentSessionStatus) {
        AgentSessionStatus["Active"] = "active";
        AgentSessionStatus["AwaitingInput"] = "awaitingInput";
        AgentSessionStatus["Complete"] = "complete";
        AgentSessionStatus["Error"] = "error";
        AgentSessionStatus["Pending"] = "pending";
        AgentSessionStatus["Stale"] = "stale";
    })(exports.AgentSessionStatus || (exports.AgentSessionStatus = {}));
    /** The type of an agent session. */
    exports.AgentSessionType = void 0;
    (function (AgentSessionType) {
        AgentSessionType["CommentThread"] = "commentThread";
    })(exports.AgentSessionType || (exports.AgentSessionType = {}));
    exports.AuthenticationSessionType = void 0;
    (function (AuthenticationSessionType) {
        AuthenticationSessionType["Android"] = "android";
        AuthenticationSessionType["Desktop"] = "desktop";
        AuthenticationSessionType["Ios"] = "ios";
        AuthenticationSessionType["Web"] = "web";
    })(exports.AuthenticationSessionType || (exports.AuthenticationSessionType = {}));
    exports.ContextViewType = void 0;
    (function (ContextViewType) {
        ContextViewType["ActiveCycle"] = "activeCycle";
        ContextViewType["ActiveIssues"] = "activeIssues";
        ContextViewType["Backlog"] = "backlog";
        ContextViewType["Triage"] = "triage";
        ContextViewType["UpcomingCycle"] = "upcomingCycle";
    })(exports.ContextViewType || (exports.ContextViewType = {}));
    /** [DEPRECATED] A type of customer status. */
    exports.CustomerStatusType = void 0;
    (function (CustomerStatusType) {
        CustomerStatusType["Active"] = "active";
        CustomerStatusType["Inactive"] = "inactive";
    })(exports.CustomerStatusType || (exports.CustomerStatusType = {}));
    exports.CyclePeriod = void 0;
    (function (CyclePeriod) {
        CyclePeriod["After"] = "after";
        CyclePeriod["Before"] = "before";
        CyclePeriod["During"] = "during";
    })(exports.CyclePeriod || (exports.CyclePeriod = {}));
    /** By which resolution is a date defined. */
    exports.DateResolutionType = void 0;
    (function (DateResolutionType) {
        DateResolutionType["HalfYear"] = "halfYear";
        DateResolutionType["Month"] = "month";
        DateResolutionType["Quarter"] = "quarter";
        DateResolutionType["Year"] = "year";
    })(exports.DateResolutionType || (exports.DateResolutionType = {}));
    /** The day of the week. */
    exports.Day = void 0;
    (function (Day) {
        Day["Friday"] = "Friday";
        Day["Monday"] = "Monday";
        Day["Saturday"] = "Saturday";
        Day["Sunday"] = "Sunday";
        Day["Thursday"] = "Thursday";
        Day["Tuesday"] = "Tuesday";
        Day["Wednesday"] = "Wednesday";
    })(exports.Day || (exports.Day = {}));
    /** The type of the email address. */
    exports.EmailIntakeAddressType = void 0;
    (function (EmailIntakeAddressType) {
        EmailIntakeAddressType["Asks"] = "asks";
        EmailIntakeAddressType["Team"] = "team";
        EmailIntakeAddressType["Template"] = "template";
    })(exports.EmailIntakeAddressType || (exports.EmailIntakeAddressType = {}));
    /** The service that syncs an external entity to Linear. */
    exports.ExternalSyncService = void 0;
    (function (ExternalSyncService) {
        ExternalSyncService["Github"] = "github";
        ExternalSyncService["Jira"] = "jira";
        ExternalSyncService["Slack"] = "slack";
    })(exports.ExternalSyncService || (exports.ExternalSyncService = {}));
    exports.FacetPageSource = void 0;
    (function (FacetPageSource) {
        FacetPageSource["Feed"] = "feed";
        FacetPageSource["Projects"] = "projects";
        FacetPageSource["TeamIssues"] = "teamIssues";
    })(exports.FacetPageSource || (exports.FacetPageSource = {}));
    /** Cadence to generate feed summary */
    exports.FeedSummarySchedule = void 0;
    (function (FeedSummarySchedule) {
        FeedSummarySchedule["Daily"] = "daily";
        FeedSummarySchedule["Never"] = "never";
        FeedSummarySchedule["Weekly"] = "weekly";
    })(exports.FeedSummarySchedule || (exports.FeedSummarySchedule = {}));
    /** By which resolution is frequency defined. */
    exports.FrequencyResolutionType = void 0;
    (function (FrequencyResolutionType) {
        FrequencyResolutionType["Daily"] = "daily";
        FrequencyResolutionType["Weekly"] = "weekly";
    })(exports.FrequencyResolutionType || (exports.FrequencyResolutionType = {}));
    /** The various states of a pull/merge request. */
    exports.GitAutomationStates = void 0;
    (function (GitAutomationStates) {
        GitAutomationStates["Draft"] = "draft";
        GitAutomationStates["Merge"] = "merge";
        GitAutomationStates["Mergeable"] = "mergeable";
        GitAutomationStates["Review"] = "review";
        GitAutomationStates["Start"] = "start";
    })(exports.GitAutomationStates || (exports.GitAutomationStates = {}));
    /** [Internal] The kind of link between an issue and a pull request. */
    exports.GitLinkKind = void 0;
    (function (GitLinkKind) {
        GitLinkKind["Closes"] = "closes";
        GitLinkKind["Contributes"] = "contributes";
        GitLinkKind["Links"] = "links";
    })(exports.GitLinkKind || (exports.GitLinkKind = {}));
    exports.GithubOrgType = void 0;
    (function (GithubOrgType) {
        GithubOrgType["Organization"] = "organization";
        GithubOrgType["User"] = "user";
    })(exports.GithubOrgType || (exports.GithubOrgType = {}));
    exports.InitiativeStatus = void 0;
    (function (InitiativeStatus) {
        InitiativeStatus["Active"] = "Active";
        InitiativeStatus["Completed"] = "Completed";
        InitiativeStatus["Planned"] = "Planned";
    })(exports.InitiativeStatus || (exports.InitiativeStatus = {}));
    /** Different tabs available inside an initiative. */
    exports.InitiativeTab = void 0;
    (function (InitiativeTab) {
        InitiativeTab["Overview"] = "overview";
        InitiativeTab["Projects"] = "projects";
        InitiativeTab["Updates"] = "updates";
    })(exports.InitiativeTab || (exports.InitiativeTab = {}));
    /** The health type when the update is created. */
    exports.InitiativeUpdateHealthType = void 0;
    (function (InitiativeUpdateHealthType) {
        InitiativeUpdateHealthType["AtRisk"] = "atRisk";
        InitiativeUpdateHealthType["OffTrack"] = "offTrack";
        InitiativeUpdateHealthType["OnTrack"] = "onTrack";
    })(exports.InitiativeUpdateHealthType || (exports.InitiativeUpdateHealthType = {}));
    /** Linear supported integration services. */
    exports.IntegrationService = void 0;
    (function (IntegrationService) {
        IntegrationService["Airbyte"] = "airbyte";
        IntegrationService["Discord"] = "discord";
        IntegrationService["Email"] = "email";
        IntegrationService["Figma"] = "figma";
        IntegrationService["FigmaPlugin"] = "figmaPlugin";
        IntegrationService["Front"] = "front";
        IntegrationService["Github"] = "github";
        IntegrationService["GithubCodeAccessPersonal"] = "githubCodeAccessPersonal";
        IntegrationService["GithubCommit"] = "githubCommit";
        IntegrationService["GithubEnterpriseServer"] = "githubEnterpriseServer";
        IntegrationService["GithubImport"] = "githubImport";
        IntegrationService["GithubPersonal"] = "githubPersonal";
        IntegrationService["Gitlab"] = "gitlab";
        IntegrationService["Gong"] = "gong";
        IntegrationService["GoogleCalendarPersonal"] = "googleCalendarPersonal";
        IntegrationService["GoogleSheets"] = "googleSheets";
        IntegrationService["Intercom"] = "intercom";
        IntegrationService["Jira"] = "jira";
        IntegrationService["JiraPersonal"] = "jiraPersonal";
        IntegrationService["LaunchDarkly"] = "launchDarkly";
        IntegrationService["LaunchDarklyPersonal"] = "launchDarklyPersonal";
        IntegrationService["Loom"] = "loom";
        IntegrationService["Notion"] = "notion";
        IntegrationService["Opsgenie"] = "opsgenie";
        IntegrationService["PagerDuty"] = "pagerDuty";
        IntegrationService["Salesforce"] = "salesforce";
        IntegrationService["Sentry"] = "sentry";
        IntegrationService["Slack"] = "slack";
        IntegrationService["SlackAsks"] = "slackAsks";
        IntegrationService["SlackCustomViewNotifications"] = "slackCustomViewNotifications";
        IntegrationService["SlackInitiativePost"] = "slackInitiativePost";
        IntegrationService["SlackOrgInitiativeUpdatesPost"] = "slackOrgInitiativeUpdatesPost";
        IntegrationService["SlackOrgProjectUpdatesPost"] = "slackOrgProjectUpdatesPost";
        IntegrationService["SlackPersonal"] = "slackPersonal";
        IntegrationService["SlackPost"] = "slackPost";
        IntegrationService["SlackProjectPost"] = "slackProjectPost";
        IntegrationService["SlackProjectUpdatesPost"] = "slackProjectUpdatesPost";
        IntegrationService["Zendesk"] = "zendesk";
    })(exports.IntegrationService || (exports.IntegrationService = {}));
    /** The type of the issue relation. */
    exports.IssueRelationType = void 0;
    (function (IssueRelationType) {
        IssueRelationType["Blocks"] = "blocks";
        IssueRelationType["Duplicate"] = "duplicate";
        IssueRelationType["Related"] = "related";
        IssueRelationType["Similar"] = "similar";
    })(exports.IssueRelationType || (exports.IssueRelationType = {}));
    exports.IssueSuggestionState = void 0;
    (function (IssueSuggestionState) {
        IssueSuggestionState["Accepted"] = "accepted";
        IssueSuggestionState["Active"] = "active";
        IssueSuggestionState["Dismissed"] = "dismissed";
        IssueSuggestionState["Stale"] = "stale";
    })(exports.IssueSuggestionState || (exports.IssueSuggestionState = {}));
    exports.IssueSuggestionType = void 0;
    (function (IssueSuggestionType) {
        IssueSuggestionType["Assignee"] = "assignee";
        IssueSuggestionType["Label"] = "label";
        IssueSuggestionType["Project"] = "project";
        IssueSuggestionType["RelatedIssue"] = "relatedIssue";
        IssueSuggestionType["SimilarIssue"] = "similarIssue";
        IssueSuggestionType["Team"] = "team";
    })(exports.IssueSuggestionType || (exports.IssueSuggestionType = {}));
    /** The categories of notifications a user can subscribe to. */
    exports.NotificationCategory = void 0;
    (function (NotificationCategory) {
        NotificationCategory["AppsAndIntegrations"] = "appsAndIntegrations";
        NotificationCategory["Assignments"] = "assignments";
        NotificationCategory["CommentsAndReplies"] = "commentsAndReplies";
        NotificationCategory["Customers"] = "customers";
        NotificationCategory["DocumentChanges"] = "documentChanges";
        NotificationCategory["Feed"] = "feed";
        NotificationCategory["Mentions"] = "mentions";
        NotificationCategory["PostsAndUpdates"] = "postsAndUpdates";
        NotificationCategory["Reactions"] = "reactions";
        NotificationCategory["Reminders"] = "reminders";
        NotificationCategory["Reviews"] = "reviews";
        NotificationCategory["StatusChanges"] = "statusChanges";
        NotificationCategory["Subscriptions"] = "subscriptions";
        NotificationCategory["System"] = "system";
        NotificationCategory["Triage"] = "triage";
    })(exports.NotificationCategory || (exports.NotificationCategory = {}));
    /** The delivery channels a user can receive notifications in. */
    exports.NotificationChannel = void 0;
    (function (NotificationChannel) {
        NotificationChannel["Desktop"] = "desktop";
        NotificationChannel["Email"] = "email";
        NotificationChannel["Mobile"] = "mobile";
        NotificationChannel["Slack"] = "slack";
    })(exports.NotificationChannel || (exports.NotificationChannel = {}));
    /** The different requests statuses possible for an OAuth client approval request. */
    exports.OAuthClientApprovalStatus = void 0;
    (function (OAuthClientApprovalStatus) {
        OAuthClientApprovalStatus["Approved"] = "approved";
        OAuthClientApprovalStatus["Denied"] = "denied";
        OAuthClientApprovalStatus["Requested"] = "requested";
    })(exports.OAuthClientApprovalStatus || (exports.OAuthClientApprovalStatus = {}));
    /** What type of auth is the domain used for. */
    exports.OrganizationDomainAuthType = void 0;
    (function (OrganizationDomainAuthType) {
        OrganizationDomainAuthType["General"] = "general";
        OrganizationDomainAuthType["Saml"] = "saml";
    })(exports.OrganizationDomainAuthType || (exports.OrganizationDomainAuthType = {}));
    /** The different statuses possible for an organization invite. */
    exports.OrganizationInviteStatus = void 0;
    (function (OrganizationInviteStatus) {
        OrganizationInviteStatus["Accepted"] = "accepted";
        OrganizationInviteStatus["Expired"] = "expired";
        OrganizationInviteStatus["Pending"] = "pending";
    })(exports.OrganizationInviteStatus || (exports.OrganizationInviteStatus = {}));
    /** A generic type of notification. */
    exports.OtherNotificationType = void 0;
    (function (OtherNotificationType) {
        OtherNotificationType["CustomerAddedAsOwner"] = "customerAddedAsOwner";
        OtherNotificationType["CustomerNeedCreated"] = "customerNeedCreated";
        OtherNotificationType["CustomerNeedMarkedAsImportant"] = "customerNeedMarkedAsImportant";
        OtherNotificationType["CustomerNeedResolved"] = "customerNeedResolved";
        OtherNotificationType["DocumentCommentMention"] = "documentCommentMention";
        OtherNotificationType["DocumentCommentReaction"] = "documentCommentReaction";
        OtherNotificationType["DocumentContentChange"] = "documentContentChange";
        OtherNotificationType["DocumentDeleted"] = "documentDeleted";
        OtherNotificationType["DocumentMention"] = "documentMention";
        OtherNotificationType["DocumentMoved"] = "documentMoved";
        OtherNotificationType["DocumentNewComment"] = "documentNewComment";
        OtherNotificationType["DocumentReminder"] = "documentReminder";
        OtherNotificationType["DocumentRestored"] = "documentRestored";
        OtherNotificationType["DocumentSubscribed"] = "documentSubscribed";
        OtherNotificationType["DocumentThreadResolved"] = "documentThreadResolved";
        OtherNotificationType["DocumentUnsubscribed"] = "documentUnsubscribed";
        OtherNotificationType["FeedSummaryGenerated"] = "feedSummaryGenerated";
        OtherNotificationType["InitiativeAddedAsOwner"] = "initiativeAddedAsOwner";
        OtherNotificationType["InitiativeCommentMention"] = "initiativeCommentMention";
        OtherNotificationType["InitiativeCommentReaction"] = "initiativeCommentReaction";
        OtherNotificationType["InitiativeDescriptionContentChange"] = "initiativeDescriptionContentChange";
        OtherNotificationType["InitiativeMention"] = "initiativeMention";
        OtherNotificationType["InitiativeNewComment"] = "initiativeNewComment";
        OtherNotificationType["InitiativeReminder"] = "initiativeReminder";
        OtherNotificationType["InitiativeThreadResolved"] = "initiativeThreadResolved";
        OtherNotificationType["InitiativeUpdateCommentMention"] = "initiativeUpdateCommentMention";
        OtherNotificationType["InitiativeUpdateCommentReaction"] = "initiativeUpdateCommentReaction";
        OtherNotificationType["InitiativeUpdateCreated"] = "initiativeUpdateCreated";
        OtherNotificationType["InitiativeUpdateMention"] = "initiativeUpdateMention";
        OtherNotificationType["InitiativeUpdateNewComment"] = "initiativeUpdateNewComment";
        OtherNotificationType["InitiativeUpdatePrompt"] = "initiativeUpdatePrompt";
        OtherNotificationType["InitiativeUpdateReaction"] = "initiativeUpdateReaction";
        OtherNotificationType["IssueAddedToTriage"] = "issueAddedToTriage";
        OtherNotificationType["IssueAddedToView"] = "issueAddedToView";
        OtherNotificationType["IssueBlocking"] = "issueBlocking";
        OtherNotificationType["IssueCreated"] = "issueCreated";
        OtherNotificationType["IssueDue"] = "issueDue";
        OtherNotificationType["IssuePriorityUrgent"] = "issuePriorityUrgent";
        OtherNotificationType["IssueReminder"] = "issueReminder";
        OtherNotificationType["IssueReopened"] = "issueReopened";
        OtherNotificationType["IssueSlaBreached"] = "issueSlaBreached";
        OtherNotificationType["IssueSlaHighRisk"] = "issueSlaHighRisk";
        OtherNotificationType["IssueStatusChangedAll"] = "issueStatusChangedAll";
        OtherNotificationType["IssueSubscribed"] = "issueSubscribed";
        OtherNotificationType["IssueThreadResolved"] = "issueThreadResolved";
        OtherNotificationType["IssueUnblocked"] = "issueUnblocked";
        OtherNotificationType["IssueUnsubscribed"] = "issueUnsubscribed";
        OtherNotificationType["OauthClientApprovalCreated"] = "oauthClientApprovalCreated";
        OtherNotificationType["ProjectAddedAsLead"] = "projectAddedAsLead";
        OtherNotificationType["ProjectAddedAsMember"] = "projectAddedAsMember";
        OtherNotificationType["ProjectCommentMention"] = "projectCommentMention";
        OtherNotificationType["ProjectCommentReaction"] = "projectCommentReaction";
        OtherNotificationType["ProjectDescriptionContentChange"] = "projectDescriptionContentChange";
        OtherNotificationType["ProjectMention"] = "projectMention";
        OtherNotificationType["ProjectMilestoneCommentMention"] = "projectMilestoneCommentMention";
        OtherNotificationType["ProjectMilestoneCommentReaction"] = "projectMilestoneCommentReaction";
        OtherNotificationType["ProjectMilestoneDescriptionContentChange"] = "projectMilestoneDescriptionContentChange";
        OtherNotificationType["ProjectMilestoneMention"] = "projectMilestoneMention";
        OtherNotificationType["ProjectMilestoneNewComment"] = "projectMilestoneNewComment";
        OtherNotificationType["ProjectMilestoneThreadResolved"] = "projectMilestoneThreadResolved";
        OtherNotificationType["ProjectNewComment"] = "projectNewComment";
        OtherNotificationType["ProjectReminder"] = "projectReminder";
        OtherNotificationType["ProjectThreadResolved"] = "projectThreadResolved";
        OtherNotificationType["ProjectUpdateCommentMention"] = "projectUpdateCommentMention";
        OtherNotificationType["ProjectUpdateCommentReaction"] = "projectUpdateCommentReaction";
        OtherNotificationType["ProjectUpdateCreated"] = "projectUpdateCreated";
        OtherNotificationType["ProjectUpdateMention"] = "projectUpdateMention";
        OtherNotificationType["ProjectUpdateNewComment"] = "projectUpdateNewComment";
        OtherNotificationType["ProjectUpdatePrompt"] = "projectUpdatePrompt";
        OtherNotificationType["ProjectUpdateReaction"] = "projectUpdateReaction";
        OtherNotificationType["PullRequestApproved"] = "pullRequestApproved";
        OtherNotificationType["PullRequestChangesRequested"] = "pullRequestChangesRequested";
        OtherNotificationType["PullRequestChecksFailed"] = "pullRequestChecksFailed";
        OtherNotificationType["PullRequestCommentMention"] = "pullRequestCommentMention";
        OtherNotificationType["PullRequestCommented"] = "pullRequestCommented";
        OtherNotificationType["PullRequestMention"] = "pullRequestMention";
        OtherNotificationType["PullRequestRemovedFromMergeQueue"] = "pullRequestRemovedFromMergeQueue";
        OtherNotificationType["PullRequestReviewRequested"] = "pullRequestReviewRequested";
        OtherNotificationType["PullRequestReviewRerequested"] = "pullRequestReviewRerequested";
        OtherNotificationType["System"] = "system";
        OtherNotificationType["TeamUpdateCommentMention"] = "teamUpdateCommentMention";
        OtherNotificationType["TeamUpdateCommentReaction"] = "teamUpdateCommentReaction";
        OtherNotificationType["TeamUpdateCreated"] = "teamUpdateCreated";
        OtherNotificationType["TeamUpdateMention"] = "teamUpdateMention";
        OtherNotificationType["TeamUpdateNewComment"] = "teamUpdateNewComment";
        OtherNotificationType["TeamUpdateReaction"] = "teamUpdateReaction";
        OtherNotificationType["TriageResponsibilityIssueAddedToTriage"] = "triageResponsibilityIssueAddedToTriage";
    })(exports.OtherNotificationType || (exports.OtherNotificationType = {}));
    /** How to treat NULL values, whether they should appear first or last */
    exports.PaginationNulls = void 0;
    (function (PaginationNulls) {
        PaginationNulls["First"] = "first";
        PaginationNulls["Last"] = "last";
    })(exports.PaginationNulls || (exports.PaginationNulls = {}));
    /** By which field should the pagination order by */
    exports.PaginationOrderBy = void 0;
    (function (PaginationOrderBy) {
        PaginationOrderBy["CreatedAt"] = "createdAt";
        PaginationOrderBy["UpdatedAt"] = "updatedAt";
    })(exports.PaginationOrderBy || (exports.PaginationOrderBy = {}));
    /** Whether to sort in ascending or descending order */
    exports.PaginationSortOrder = void 0;
    (function (PaginationSortOrder) {
        PaginationSortOrder["Ascending"] = "Ascending";
        PaginationSortOrder["Descending"] = "Descending";
    })(exports.PaginationSortOrder || (exports.PaginationSortOrder = {}));
    /** Type of Post */
    exports.PostType = void 0;
    (function (PostType) {
        PostType["Summary"] = "summary";
        PostType["Update"] = "update";
    })(exports.PostType || (exports.PostType = {}));
    /** [Internal] The scope of product intelligence suggestion data for a team. */
    exports.ProductIntelligenceScope = void 0;
    (function (ProductIntelligenceScope) {
        ProductIntelligenceScope["None"] = "none";
        ProductIntelligenceScope["Team"] = "team";
        ProductIntelligenceScope["TeamHierarchy"] = "teamHierarchy";
        ProductIntelligenceScope["Workspace"] = "workspace";
    })(exports.ProductIntelligenceScope || (exports.ProductIntelligenceScope = {}));
    /** The status of a project milestone. */
    exports.ProjectMilestoneStatus = void 0;
    (function (ProjectMilestoneStatus) {
        ProjectMilestoneStatus["Done"] = "done";
        ProjectMilestoneStatus["Next"] = "next";
        ProjectMilestoneStatus["Overdue"] = "overdue";
        ProjectMilestoneStatus["Unstarted"] = "unstarted";
    })(exports.ProjectMilestoneStatus || (exports.ProjectMilestoneStatus = {}));
    /** A type of project status. */
    exports.ProjectStatusType = void 0;
    (function (ProjectStatusType) {
        ProjectStatusType["Backlog"] = "backlog";
        ProjectStatusType["Canceled"] = "canceled";
        ProjectStatusType["Completed"] = "completed";
        ProjectStatusType["Paused"] = "paused";
        ProjectStatusType["Planned"] = "planned";
        ProjectStatusType["Started"] = "started";
    })(exports.ProjectStatusType || (exports.ProjectStatusType = {}));
    /** Different tabs available inside a project. */
    exports.ProjectTab = void 0;
    (function (ProjectTab) {
        ProjectTab["Customers"] = "customers";
        ProjectTab["Documents"] = "documents";
        ProjectTab["Issues"] = "issues";
        ProjectTab["Updates"] = "updates";
    })(exports.ProjectTab || (exports.ProjectTab = {}));
    /** The health type when the project update is created. */
    exports.ProjectUpdateHealthType = void 0;
    (function (ProjectUpdateHealthType) {
        ProjectUpdateHealthType["AtRisk"] = "atRisk";
        ProjectUpdateHealthType["OffTrack"] = "offTrack";
        ProjectUpdateHealthType["OnTrack"] = "onTrack";
    })(exports.ProjectUpdateHealthType || (exports.ProjectUpdateHealthType = {}));
    /** The frequency at which to send project update reminders. */
    exports.ProjectUpdateReminderFrequency = void 0;
    (function (ProjectUpdateReminderFrequency) {
        ProjectUpdateReminderFrequency["Month"] = "month";
        ProjectUpdateReminderFrequency["Never"] = "never";
        ProjectUpdateReminderFrequency["TwoWeeks"] = "twoWeeks";
        ProjectUpdateReminderFrequency["Week"] = "week";
    })(exports.ProjectUpdateReminderFrequency || (exports.ProjectUpdateReminderFrequency = {}));
    /** The method used to merge a pull request. */
    exports.PullRequestMergeMethod = void 0;
    (function (PullRequestMergeMethod) {
        PullRequestMergeMethod["Merge"] = "MERGE";
        PullRequestMergeMethod["Rebase"] = "REBASE";
        PullRequestMergeMethod["Squash"] = "SQUASH";
    })(exports.PullRequestMergeMethod || (exports.PullRequestMergeMethod = {}));
    exports.PullRequestReviewTool = void 0;
    (function (PullRequestReviewTool) {
        PullRequestReviewTool["Graphite"] = "graphite";
        PullRequestReviewTool["Source"] = "source";
    })(exports.PullRequestReviewTool || (exports.PullRequestReviewTool = {}));
    /** The status of a pull request. */
    exports.PullRequestStatus = void 0;
    (function (PullRequestStatus) {
        PullRequestStatus["Approved"] = "approved";
        PullRequestStatus["Closed"] = "closed";
        PullRequestStatus["Draft"] = "draft";
        PullRequestStatus["InReview"] = "inReview";
        PullRequestStatus["Merged"] = "merged";
        PullRequestStatus["Open"] = "open";
    })(exports.PullRequestStatus || (exports.PullRequestStatus = {}));
    /** The different push subscription types. */
    exports.PushSubscriptionType = void 0;
    (function (PushSubscriptionType) {
        PushSubscriptionType["Apple"] = "apple";
        PushSubscriptionType["AppleDevelopment"] = "appleDevelopment";
        PushSubscriptionType["Firebase"] = "firebase";
        PushSubscriptionType["Web"] = "web";
    })(exports.PushSubscriptionType || (exports.PushSubscriptionType = {}));
    /** Features release channel. */
    exports.ReleaseChannel = void 0;
    (function (ReleaseChannel) {
        ReleaseChannel["Beta"] = "beta";
        ReleaseChannel["Development"] = "development";
        ReleaseChannel["Internal"] = "internal";
        ReleaseChannel["PreRelease"] = "preRelease";
        ReleaseChannel["Public"] = "public";
    })(exports.ReleaseChannel || (exports.ReleaseChannel = {}));
    exports.SLADayCountType = void 0;
    (function (SLADayCountType) {
        SLADayCountType["All"] = "all";
        SLADayCountType["OnlyBusinessDays"] = "onlyBusinessDays";
    })(exports.SLADayCountType || (exports.SLADayCountType = {}));
    /** The type of the semantic search result. */
    exports.SemanticSearchResultType = void 0;
    (function (SemanticSearchResultType) {
        SemanticSearchResultType["Document"] = "document";
        SemanticSearchResultType["Initiative"] = "initiative";
        SemanticSearchResultType["Issue"] = "issue";
        SemanticSearchResultType["Project"] = "project";
    })(exports.SemanticSearchResultType || (exports.SemanticSearchResultType = {}));
    exports.SendStrategy = void 0;
    (function (SendStrategy) {
        SendStrategy["Desktop"] = "desktop";
        SendStrategy["DesktopAndPush"] = "desktopAndPush";
        SendStrategy["DesktopThenPush"] = "desktopThenPush";
        SendStrategy["Push"] = "push";
    })(exports.SendStrategy || (exports.SendStrategy = {}));
    exports.SlaStatus = void 0;
    (function (SlaStatus) {
        SlaStatus["Breached"] = "Breached";
        SlaStatus["Completed"] = "Completed";
        SlaStatus["Failed"] = "Failed";
        SlaStatus["HighRisk"] = "HighRisk";
        SlaStatus["LowRisk"] = "LowRisk";
        SlaStatus["MediumRisk"] = "MediumRisk";
    })(exports.SlaStatus || (exports.SlaStatus = {}));
    exports.SlackChannelType = void 0;
    (function (SlackChannelType) {
        SlackChannelType["DirectMessage"] = "DirectMessage";
        SlackChannelType["MultiPersonDirectMessage"] = "MultiPersonDirectMessage";
        SlackChannelType["Private"] = "Private";
        SlackChannelType["Public"] = "Public";
    })(exports.SlackChannelType || (exports.SlackChannelType = {}));
    /** Which action should be taken after an issue is added to triage. */
    exports.TriageResponsibilityAction = void 0;
    (function (TriageResponsibilityAction) {
        TriageResponsibilityAction["Assign"] = "assign";
        TriageResponsibilityAction["Notify"] = "notify";
    })(exports.TriageResponsibilityAction || (exports.TriageResponsibilityAction = {}));
    exports.UserContextViewType = void 0;
    (function (UserContextViewType) {
        UserContextViewType["Assigned"] = "assigned";
    })(exports.UserContextViewType || (exports.UserContextViewType = {}));
    /** The types of flags that the user can have. */
    exports.UserFlagType = void 0;
    (function (UserFlagType) {
        UserFlagType["All"] = "all";
        UserFlagType["AnalyticsWelcomeDismissed"] = "analyticsWelcomeDismissed";
        UserFlagType["CanPlaySnake"] = "canPlaySnake";
        UserFlagType["CanPlayTetris"] = "canPlayTetris";
        UserFlagType["CommandMenuClearShortcutTip"] = "commandMenuClearShortcutTip";
        UserFlagType["CompletedOnboarding"] = "completedOnboarding";
        UserFlagType["CycleWelcomeDismissed"] = "cycleWelcomeDismissed";
        UserFlagType["DesktopDownloadToastDismissed"] = "desktopDownloadToastDismissed";
        UserFlagType["DesktopInstalled"] = "desktopInstalled";
        UserFlagType["DesktopTabsOnboardingDismissed"] = "desktopTabsOnboardingDismissed";
        UserFlagType["DueDateShortcutMigration"] = "dueDateShortcutMigration";
        UserFlagType["EditorSlashCommandUsed"] = "editorSlashCommandUsed";
        UserFlagType["EmptyActiveIssuesDismissed"] = "emptyActiveIssuesDismissed";
        UserFlagType["EmptyBacklogDismissed"] = "emptyBacklogDismissed";
        UserFlagType["EmptyCustomViewsDismissed"] = "emptyCustomViewsDismissed";
        UserFlagType["EmptyMyIssuesDismissed"] = "emptyMyIssuesDismissed";
        UserFlagType["EmptyParagraphSlashCommandTip"] = "emptyParagraphSlashCommandTip";
        UserFlagType["FigmaPluginBannerDismissed"] = "figmaPluginBannerDismissed";
        UserFlagType["FigmaPromptDismissed"] = "figmaPromptDismissed";
        UserFlagType["HelpIslandFeatureInsightsDismissed"] = "helpIslandFeatureInsightsDismissed";
        UserFlagType["ImportBannerDismissed"] = "importBannerDismissed";
        UserFlagType["InitiativesBannerDismissed"] = "initiativesBannerDismissed";
        UserFlagType["InsightsHelpDismissed"] = "insightsHelpDismissed";
        UserFlagType["InsightsWelcomeDismissed"] = "insightsWelcomeDismissed";
        UserFlagType["IssueLabelSuggestionUsed"] = "issueLabelSuggestionUsed";
        UserFlagType["IssueMovePromptCompleted"] = "issueMovePromptCompleted";
        UserFlagType["JoinTeamIntroductionDismissed"] = "joinTeamIntroductionDismissed";
        UserFlagType["ListSelectionTip"] = "listSelectionTip";
        UserFlagType["MigrateThemePreference"] = "migrateThemePreference";
        UserFlagType["MilestoneOnboardingIsSeenAndDismissed"] = "milestoneOnboardingIsSeenAndDismissed";
        UserFlagType["ProjectBacklogWelcomeDismissed"] = "projectBacklogWelcomeDismissed";
        UserFlagType["ProjectBoardOnboardingIsSeenAndDismissed"] = "projectBoardOnboardingIsSeenAndDismissed";
        UserFlagType["ProjectUpdatesWelcomeDismissed"] = "projectUpdatesWelcomeDismissed";
        UserFlagType["ProjectWelcomeDismissed"] = "projectWelcomeDismissed";
        UserFlagType["PulseWelcomeDismissed"] = "pulseWelcomeDismissed";
        UserFlagType["RewindBannerDismissed"] = "rewindBannerDismissed";
        UserFlagType["SlackBotWelcomeMessageShown"] = "slackBotWelcomeMessageShown";
        UserFlagType["SlackCommentReactionTipShown"] = "slackCommentReactionTipShown";
        UserFlagType["TeamsPageIntroductionDismissed"] = "teamsPageIntroductionDismissed";
        UserFlagType["ThreadedCommentsNudgeIsSeen"] = "threadedCommentsNudgeIsSeen";
        UserFlagType["TriageWelcomeDismissed"] = "triageWelcomeDismissed";
        UserFlagType["TryCyclesDismissed"] = "tryCyclesDismissed";
        UserFlagType["TryGithubDismissed"] = "tryGithubDismissed";
        UserFlagType["TryInvitePeopleDismissed"] = "tryInvitePeopleDismissed";
        UserFlagType["TryRoadmapsDismissed"] = "tryRoadmapsDismissed";
        UserFlagType["TryTriageDismissed"] = "tryTriageDismissed";
        UserFlagType["UpdatedSlackThreadSyncIntegration"] = "updatedSlackThreadSyncIntegration";
    })(exports.UserFlagType || (exports.UserFlagType = {}));
    /** Operations that can be applied to UserFlagType. */
    exports.UserFlagUpdateOperation = void 0;
    (function (UserFlagUpdateOperation) {
        UserFlagUpdateOperation["Clear"] = "clear";
        UserFlagUpdateOperation["Decr"] = "decr";
        UserFlagUpdateOperation["Incr"] = "incr";
        UserFlagUpdateOperation["Lock"] = "lock";
    })(exports.UserFlagUpdateOperation || (exports.UserFlagUpdateOperation = {}));
    /** The different permission roles available to users on an organization. */
    exports.UserRoleType = void 0;
    (function (UserRoleType) {
        UserRoleType["Admin"] = "admin";
        UserRoleType["App"] = "app";
        UserRoleType["Guest"] = "guest";
        UserRoleType["User"] = "user";
    })(exports.UserRoleType || (exports.UserRoleType = {}));
    /** The type of view preferences (either user or organization level preferences). */
    exports.ViewPreferencesType = void 0;
    (function (ViewPreferencesType) {
        ViewPreferencesType["Organization"] = "organization";
        ViewPreferencesType["User"] = "user";
    })(exports.ViewPreferencesType || (exports.ViewPreferencesType = {}));
    /** The client view this custom view is targeting. */
    exports.ViewType = void 0;
    (function (ViewType) {
        ViewType["ActiveIssues"] = "activeIssues";
        ViewType["AllIssues"] = "allIssues";
        ViewType["Archive"] = "archive";
        ViewType["Backlog"] = "backlog";
        ViewType["Board"] = "board";
        ViewType["CompletedCycle"] = "completedCycle";
        ViewType["CustomView"] = "customView";
        ViewType["CustomViews"] = "customViews";
        ViewType["Customer"] = "customer";
        ViewType["Customers"] = "customers";
        ViewType["Cycle"] = "cycle";
        ViewType["Dashboards"] = "dashboards";
        ViewType["EmbeddedCustomerNeeds"] = "embeddedCustomerNeeds";
        ViewType["FeedAll"] = "feedAll";
        ViewType["FeedCreated"] = "feedCreated";
        ViewType["FeedFollowing"] = "feedFollowing";
        ViewType["FeedPopular"] = "feedPopular";
        ViewType["Inbox"] = "inbox";
        ViewType["Initiative"] = "initiative";
        ViewType["InitiativeOverview"] = "initiativeOverview";
        ViewType["InitiativeOverviewSubInitiatives"] = "initiativeOverviewSubInitiatives";
        ViewType["Initiatives"] = "initiatives";
        ViewType["InitiativesCompleted"] = "initiativesCompleted";
        ViewType["InitiativesPlanned"] = "initiativesPlanned";
        ViewType["IssueIdentifiers"] = "issueIdentifiers";
        ViewType["Label"] = "label";
        ViewType["MyIssues"] = "myIssues";
        ViewType["MyIssuesActivity"] = "myIssuesActivity";
        ViewType["MyIssuesCreatedByMe"] = "myIssuesCreatedByMe";
        ViewType["MyIssuesSubscribedTo"] = "myIssuesSubscribedTo";
        ViewType["MyReviews"] = "myReviews";
        ViewType["Project"] = "project";
        ViewType["ProjectCustomerNeeds"] = "projectCustomerNeeds";
        ViewType["ProjectDocuments"] = "projectDocuments";
        ViewType["ProjectLabel"] = "projectLabel";
        ViewType["Projects"] = "projects";
        ViewType["ProjectsAll"] = "projectsAll";
        ViewType["ProjectsBacklog"] = "projectsBacklog";
        ViewType["ProjectsClosed"] = "projectsClosed";
        ViewType["QuickView"] = "quickView";
        ViewType["Reviews"] = "reviews";
        ViewType["Roadmap"] = "roadmap";
        ViewType["RoadmapAll"] = "roadmapAll";
        ViewType["RoadmapBacklog"] = "roadmapBacklog";
        ViewType["RoadmapClosed"] = "roadmapClosed";
        ViewType["Roadmaps"] = "roadmaps";
        ViewType["Search"] = "search";
        ViewType["SplitSearch"] = "splitSearch";
        ViewType["SubIssues"] = "subIssues";
        ViewType["Teams"] = "teams";
        ViewType["Triage"] = "triage";
        ViewType["UserProfile"] = "userProfile";
        ViewType["UserProfileCreatedByUser"] = "userProfileCreatedByUser";
        ViewType["WorkspaceMembers"] = "workspaceMembers";
    })(exports.ViewType || (exports.ViewType = {}));
    const EntityFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Entity" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Entity" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const CustomViewNotificationSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomViewNotificationSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewNotificationSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
                        { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriber" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                    ],
                },
            },
        ],
    };
    const CustomerNotificationSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerNotificationSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNotificationSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
                        { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriber" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                    ],
                },
            },
        ],
    };
    const CycleNotificationSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CycleNotificationSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleNotificationSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
                        { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriber" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                    ],
                },
            },
        ],
    };
    const FacetFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Facet" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Facet" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "sourceFeedUser" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "sourceInitiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "sourcePage" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "sourceProject" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "sourceTeam" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "targetCustomView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const CustomerNeedArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerNeedArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const CycleArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CycleArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const DeletePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DeletePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DeletePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "entityId" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const DocumentArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const InitiativeArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const InitiativeUpdateArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeUpdateArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssueArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ActorBotFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ActorBot" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ActorBot" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "userDisplayName" } },
                        { kind: "Field", name: { kind: "Name", value: "subType" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const CustomerNeedNotificationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerNeedNotification" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedNotification" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "customerNeedId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "category" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerNeed" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "relatedIssue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "relatedProject" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "readAt" } },
                        { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const CustomerNotificationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerNotification" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNotification" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "customerId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "category" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "readAt" } },
                        { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const DocumentNotificationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentNotification" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentNotification" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "commentId" } },
                        { kind: "Field", name: { kind: "Name", value: "documentId" } },
                        { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "category" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "readAt" } },
                        { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const InitiativeNotificationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeNotification" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeNotification" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "commentId" } },
                        { kind: "Field", name: { kind: "Name", value: "initiativeId" } },
                        { kind: "Field", name: { kind: "Name", value: "initiativeUpdateId" } },
                        { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "category" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "document" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parentComment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "readAt" } },
                        { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const NotificationSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriber" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                    ],
                },
            },
        ],
    };
    const IssueNotificationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueNotification" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueNotification" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "commentId" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "category" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parentComment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriptions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "readAt" } },
                        { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const OauthClientApprovalFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OauthClientApproval" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApproval" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "requesterId" } },
                        { kind: "Field", name: { kind: "Name", value: "responderId" } },
                        { kind: "Field", name: { kind: "Name", value: "requestReason" } },
                        { kind: "Field", name: { kind: "Name", value: "denyReason" } },
                        { kind: "Field", name: { kind: "Name", value: "scopes" } },
                        { kind: "Field", name: { kind: "Name", value: "status" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "oauthClientId" } },
                    ],
                },
            },
        ],
    };
    const OauthClientApprovalNotificationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OauthClientApprovalNotification" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApprovalNotification" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "oauthClientApprovalId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "oauthClientApproval" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientApproval" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "category" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "readAt" } },
                        { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const PostNotificationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PostNotification" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PostNotification" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "commentId" } },
                        { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
                        { kind: "Field", name: { kind: "Name", value: "postId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "category" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "readAt" } },
                        { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectNotificationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectNotification" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotification" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "commentId" } },
                        { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectMilestoneId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectUpdateId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "category" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "document" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parentComment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "readAt" } },
                        { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const PullRequestNotificationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PullRequestNotification" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PullRequestNotification" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "pullRequestCommentId" } },
                        { kind: "Field", name: { kind: "Name", value: "pullRequestId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "category" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "readAt" } },
                        { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const NotificationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Notification" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Notification" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "category" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "emailedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "readAt" } },
                        { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedNotification" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedNotification" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNotification" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNotification" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentNotification" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentNotification" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeNotification" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeNotification" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueNotification" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueNotification" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApprovalNotification" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientApprovalNotification" } },
                                ],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PostNotification" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PostNotification" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotification" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectNotification" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PullRequestNotification" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PullRequestNotification" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const NotificationArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectStatusArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectStatusArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectUpdateArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectUpdateArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const RoadmapArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "RoadmapArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const TeamArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const WorkflowStateArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WorkflowStateArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ArchivePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ArchivePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ArchivePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DeletePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamArchivePayload" } }],
                            },
                        },
                        {
                            kind: "InlineFragment",
                            typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateArchivePayload" } },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const LabelNotificationSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "LabelNotificationSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "LabelNotificationSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
                        { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriber" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                    ],
                },
            },
        ],
    };
    const ProjectNotificationSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectNotificationSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotificationSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
                        { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriber" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                    ],
                },
            },
        ],
    };
    const TeamNotificationSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamNotificationSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamNotificationSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
                        { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriber" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                    ],
                },
            },
        ],
    };
    const UserNotificationSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserNotificationSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserNotificationSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
                        { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriber" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                    ],
                },
            },
        ],
    };
    const SesDomainIdentityDnsRecordFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SesDomainIdentityDnsRecord" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SesDomainIdentityDnsRecord" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "content" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "isVerified" } },
                    ],
                },
            },
        ],
    };
    const SesDomainIdentityFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SesDomainIdentity" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SesDomainIdentity" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "region" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "dnsRecords" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SesDomainIdentityDnsRecord" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "domain" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "canSendFromCustomDomain" } },
                    ],
                },
            },
        ],
    };
    const EmailIntakeAddressFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EmailIntakeAddress" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddress" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "sesDomainIdentity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SesDomainIdentity" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "issueCanceledAutoReply" } },
                        { kind: "Field", name: { kind: "Name", value: "issueCompletedAutoReply" } },
                        { kind: "Field", name: { kind: "Name", value: "issueCreatedAutoReply" } },
                        { kind: "Field", name: { kind: "Name", value: "forwardingEmailAddress" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "senderName" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "template" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "address" } },
                        { kind: "Field", name: { kind: "Name", value: "repliesEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "customerRequestsEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "issueCanceledAutoReplyEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "issueCompletedAutoReplyEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "issueCreatedAutoReplyEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "useUserNamesInReplies" } },
                        { kind: "Field", name: { kind: "Name", value: "enabled" } },
                    ],
                },
            },
        ],
    };
    const AuthIdentityProviderFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthIdentityProvider" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthIdentityProvider" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "ssoBinding" } },
                        { kind: "Field", name: { kind: "Name", value: "ssoEndpoint" } },
                        { kind: "Field", name: { kind: "Name", value: "priority" } },
                        { kind: "Field", name: { kind: "Name", value: "ssoSignAlgo" } },
                        { kind: "Field", name: { kind: "Name", value: "issuerEntityId" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "samlEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "scimEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "defaultMigrated" } },
                        { kind: "Field", name: { kind: "Name", value: "ssoSigningCert" } },
                    ],
                },
            },
        ],
    };
    const InitiativeNotificationSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeNotificationSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeNotificationSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } },
                        { kind: "Field", name: { kind: "Name", value: "userContextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriber" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                    ],
                },
            },
        ],
    };
    const OrganizationIpRestrictionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationIpRestriction" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationIpRestriction" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "range" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "enabled" } },
                    ],
                },
            },
        ],
    };
    const ProjectStatusFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectStatus" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatus" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "position" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "indefinite" } },
                    ],
                },
            },
        ],
    };
    const PaidSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PaidSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PaidSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "collectionMethod" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "cancelAt" } },
                        { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                        { kind: "Field", name: { kind: "Name", value: "nextBillingAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "seatsMaximum" } },
                        { kind: "Field", name: { kind: "Name", value: "seatsMinimum" } },
                        { kind: "Field", name: { kind: "Name", value: "seats" } },
                        { kind: "Field", name: { kind: "Name", value: "pendingChangeType" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const OrganizationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Organization" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Organization" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } },
                        { kind: "Field", name: { kind: "Name", value: "allowedFileUploadContentTypes" } },
                        { kind: "Field", name: { kind: "Name", value: "customersConfiguration" } },
                        { kind: "Field", name: { kind: "Name", value: "defaultFeedSummarySchedule" } },
                        { kind: "Field", name: { kind: "Name", value: "gitBranchFormat" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "ipRestrictions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationIpRestriction" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "userCount" } },
                        { kind: "Field", name: { kind: "Name", value: "customerCount" } },
                        { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } },
                        { kind: "Field", name: { kind: "Name", value: "previousUrlKeys" } },
                        { kind: "Field", name: { kind: "Name", value: "periodUploadVolume" } },
                        { kind: "Field", name: { kind: "Name", value: "initiativeUpdateRemindersDay" } },
                        { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersDay" } },
                        { kind: "Field", name: { kind: "Name", value: "releaseChannel" } },
                        { kind: "Field", name: { kind: "Name", value: "initiativeUpdateRemindersHour" } },
                        { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersHour" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "fiscalYearStartMonth" } },
                        { kind: "Field", name: { kind: "Name", value: "initiativeUpdateReminderFrequencyInWeeks" } },
                        { kind: "Field", name: { kind: "Name", value: "projectUpdateReminderFrequencyInWeeks" } },
                        { kind: "Field", name: { kind: "Name", value: "logoUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectStatuses" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscription" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PaidSubscription" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "urlKey" } },
                        { kind: "Field", name: { kind: "Name", value: "deletionRequestedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "trialEndsAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "hipaaComplianceEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "samlEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "scimEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "allowMembersToInvite" } },
                        { kind: "Field", name: { kind: "Name", value: "restrictTeamCreationToAdmins" } },
                        { kind: "Field", name: { kind: "Name", value: "gitLinkbackMessagesEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "gitPublicLinkbackMessagesEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "feedEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "customersEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "roadmapEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "restrictLabelManagementToAdmins" } },
                        { kind: "Field", name: { kind: "Name", value: "projectUpdatesReminderFrequency" } },
                        { kind: "Field", name: { kind: "Name", value: "slaDayCount" } },
                    ],
                },
            },
        ],
    };
    const AuthenticationSessionResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthenticationSessionResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthenticationSessionResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "client" } },
                        { kind: "Field", name: { kind: "Name", value: "countryCodes" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "location" } },
                        { kind: "Field", name: { kind: "Name", value: "ip" } },
                        { kind: "Field", name: { kind: "Name", value: "isCurrentSession" } },
                        { kind: "Field", name: { kind: "Name", value: "locationCity" } },
                        { kind: "Field", name: { kind: "Name", value: "locationCountryCode" } },
                        { kind: "Field", name: { kind: "Name", value: "locationCountry" } },
                        { kind: "Field", name: { kind: "Name", value: "locationRegionCode" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "operatingSystem" } },
                        { kind: "Field", name: { kind: "Name", value: "service" } },
                        { kind: "Field", name: { kind: "Name", value: "userAgent" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "browserType" } },
                        { kind: "Field", name: { kind: "Name", value: "lastActiveAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const BaseWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "BaseWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "BaseWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationId" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                    ],
                },
            },
        ],
    };
    const CustomerNeedChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerNeedChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "attachmentId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "customerId" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectId" } },
                    ],
                },
            },
        ],
    };
    const OauthClientChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OauthClientChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                    ],
                },
            },
        ],
    };
    const IntegrationChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "service" } },
                    ],
                },
            },
        ],
    };
    const IdentityProviderFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IdentityProvider" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IdentityProvider" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "ssoBinding" } },
                        { kind: "Field", name: { kind: "Name", value: "ssoEndpoint" } },
                        { kind: "Field", name: { kind: "Name", value: "priority" } },
                        { kind: "Field", name: { kind: "Name", value: "ssoSignAlgo" } },
                        { kind: "Field", name: { kind: "Name", value: "issuerEntityId" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "samlEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "scimEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "defaultMigrated" } },
                        { kind: "Field", name: { kind: "Name", value: "ssoSigningCert" } },
                    ],
                },
            },
        ],
    };
    const OrganizationDomainFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationDomain" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDomain" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "verificationEmail" } },
                        { kind: "Field", name: { kind: "Name", value: "verified" } },
                        { kind: "Field", name: { kind: "Name", value: "disableOrganizationCreation" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "identityProvider" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IdentityProvider" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "authType" } },
                        { kind: "Field", name: { kind: "Name", value: "claimed" } },
                    ],
                },
            },
        ],
    };
    const AuthorizingUserFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthorizingUser" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthorizingUser" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "displayName" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                    ],
                },
            },
        ],
    };
    const WebhookFailureEventFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WebhookFailureEvent" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookFailureEvent" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "responseOrError" } },
                        { kind: "Field", name: { kind: "Name", value: "httpStatus" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "executionId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhook" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const UserChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                    ],
                },
            },
        ],
    };
    const CommentChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CommentChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "documentContentId" } },
                        { kind: "Field", name: { kind: "Name", value: "initiativeUpdateId" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectUpdateId" } },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        { kind: "Field", name: { kind: "Name", value: "body" } },
                    ],
                },
            },
        ],
    };
    const InitiativeChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                    ],
                },
            },
        ],
    };
    const ProjectChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                    ],
                },
            },
        ],
    };
    const DocumentChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "initiativeId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                    ],
                },
            },
        ],
    };
    const TeamChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "key" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                    ],
                },
            },
        ],
    };
    const IssueWithDescriptionChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "teamId" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "identifier" } },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                    ],
                },
            },
        ],
    };
    const ProjectUpdateChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectUpdateChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        { kind: "Field", name: { kind: "Name", value: "body" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const OtherNotificationWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OtherNotificationWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OtherNotificationWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "actorId" } },
                        { kind: "Field", name: { kind: "Name", value: "commentId" } },
                        { kind: "Field", name: { kind: "Name", value: "documentId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectUpdateId" } },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "document" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parentComment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateChildWebhookPayload" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const IntegrationActorWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationActorWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationActorWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "service" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const OauthClientActorWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OauthClientActorWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientActorWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const OrganizationOriginWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationOriginWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationOriginWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const OAuthAppWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OAuthAppWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OAuthAppWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationId" } },
                        { kind: "Field", name: { kind: "Name", value: "oauthClientId" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "action" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const DocumentContentChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentContentChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContentChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "document" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ExternalUserChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ExternalUserChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalUserChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                    ],
                },
            },
        ],
    };
    const InitiativeUpdateChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeUpdateChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "bodyData" } },
                        { kind: "Field", name: { kind: "Name", value: "editedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "health" } },
                    ],
                },
            },
        ],
    };
    const IssueChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "teamId" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "identifier" } },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                    ],
                },
            },
        ],
    };
    const CommentWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CommentWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "resolvingCommentId" } },
                        { kind: "Field", name: { kind: "Name", value: "documentContentId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "externalUserId" } },
                        { kind: "Field", name: { kind: "Name", value: "initiativeUpdateId" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "parentId" } },
                        { kind: "Field", name: { kind: "Name", value: "postId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectUpdateId" } },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        { kind: "Field", name: { kind: "Name", value: "resolvingUserId" } },
                        { kind: "Field", name: { kind: "Name", value: "body" } },
                        { kind: "Field", name: { kind: "Name", value: "botActor" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentContent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContentChildWebhookPayload" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "syncedWith" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUser" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUserChildWebhookPayload" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateChildWebhookPayload" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateChildWebhookPayload" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "quotedText" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionData" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "editedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "resolvedAt" } },
                    ],
                },
            },
        ],
    };
    const AttachmentWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AttachmentWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "metadata" } },
                        { kind: "Field", name: { kind: "Name", value: "source" } },
                        { kind: "Field", name: { kind: "Name", value: "subtitle" } },
                        { kind: "Field", name: { kind: "Name", value: "creatorId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "originalIssueId" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "externalUserCreatorId" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "sourceType" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                        { kind: "Field", name: { kind: "Name", value: "groupBySource" } },
                    ],
                },
            },
        ],
    };
    const CustomerChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "domains" } },
                        { kind: "Field", name: { kind: "Name", value: "externalIds" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                    ],
                },
            },
        ],
    };
    const CustomerNeedWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerNeedWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "attachmentId" } },
                        { kind: "Field", name: { kind: "Name", value: "commentId" } },
                        { kind: "Field", name: { kind: "Name", value: "creatorId" } },
                        { kind: "Field", name: { kind: "Name", value: "customerId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectAttachmentId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "body" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "originalIssueId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "priority" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    ],
                },
            },
        ],
    };
    const CustomerStatusChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerStatusChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatusChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "displayName" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const CustomerTierChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerTierChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "displayName" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                    ],
                },
            },
        ],
    };
    const CustomerWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "slackChannelId" } },
                        { kind: "Field", name: { kind: "Name", value: "statusId" } },
                        { kind: "Field", name: { kind: "Name", value: "tierId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "mainSourceId" } },
                        { kind: "Field", name: { kind: "Name", value: "ownerId" } },
                        { kind: "Field", name: { kind: "Name", value: "revenue" } },
                        { kind: "Field", name: { kind: "Name", value: "approximateNeedCount" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "status" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatusChildWebhookPayload" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "tier" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTierChildWebhookPayload" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "logoUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "domains" } },
                        { kind: "Field", name: { kind: "Name", value: "externalIds" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "size" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    ],
                },
            },
        ],
    };
    const CycleWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CycleWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "inheritedFromId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "uncompletedIssuesUponCloseIds" } },
                        { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "endsAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "number" } },
                        { kind: "Field", name: { kind: "Name", value: "startsAt" } },
                        { kind: "Field", name: { kind: "Name", value: "teamId" } },
                        { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "scopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } },
                    ],
                },
            },
        ],
    };
    const DocumentWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "initiativeId" } },
                        { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplateId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectId" } },
                        { kind: "Field", name: { kind: "Name", value: "resourceFolderId" } },
                        { kind: "Field", name: { kind: "Name", value: "creatorId" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedById" } },
                        { kind: "Field", name: { kind: "Name", value: "subscriberIds" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "content" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "hiddenAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                    ],
                },
            },
        ],
    };
    const ProjectUpdateWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectUpdateWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "bodyData" } },
                        { kind: "Field", name: { kind: "Name", value: "body" } },
                        { kind: "Field", name: { kind: "Name", value: "editedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "health" } },
                        { kind: "Field", name: { kind: "Name", value: "projectId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "reactionData" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectMilestoneChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectMilestoneChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "targetDate" } },
                    ],
                },
            },
        ],
    };
    const ProjectStatusChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectStatusChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const ProjectWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "labelIds" } },
                        { kind: "Field", name: { kind: "Name", value: "memberIds" } },
                        { kind: "Field", name: { kind: "Name", value: "teamIds" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "convertedFromIssueId" } },
                        { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplateId" } },
                        { kind: "Field", name: { kind: "Name", value: "lastUpdateId" } },
                        { kind: "Field", name: { kind: "Name", value: "leadId" } },
                        { kind: "Field", name: { kind: "Name", value: "statusId" } },
                        { kind: "Field", name: { kind: "Name", value: "creatorId" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                        { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "content" } },
                        { kind: "Field", name: { kind: "Name", value: "documentContentId" } },
                        { kind: "Field", name: { kind: "Name", value: "startDate" } },
                        { kind: "Field", name: { kind: "Name", value: "health" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiatives" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "milestones" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneChildWebhookPayload" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "priority" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lead" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "status" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusChildWebhookPayload" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "startDateResolution" } },
                        { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } },
                        { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "targetDate" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersPausedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "scopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                    ],
                },
            },
        ],
    };
    const ReactionWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ReactionWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ReactionWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "emoji" } },
                        { kind: "Field", name: { kind: "Name", value: "commentId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "externalUserId" } },
                        { kind: "Field", name: { kind: "Name", value: "initiativeUpdateId" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "postId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectUpdateId" } },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateChildWebhookPayload" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IssueStatusChangedNotificationWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueStatusChangedNotificationWebhookPayload" },
                typeCondition: {
                    kind: "NamedType",
                    name: { kind: "Name", value: "IssueStatusChangedNotificationWebhookPayload" },
                },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "actorId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    ],
                },
            },
        ],
    };
    const UserWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "displayName" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "timezone" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "disableReason" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "guest" } },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                        { kind: "Field", name: { kind: "Name", value: "admin" } },
                        { kind: "Field", name: { kind: "Name", value: "app" } },
                    ],
                },
            },
        ],
    };
    const GuidanceRuleWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GuidanceRuleWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GuidanceRuleWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "body" } },
                    ],
                },
            },
        ],
    };
    const AgentActivityWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AgentActivityWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "signal" } },
                        { kind: "Field", name: { kind: "Name", value: "signalMetadata" } },
                        { kind: "Field", name: { kind: "Name", value: "agentSessionId" } },
                        { kind: "Field", name: { kind: "Name", value: "sourceCommentId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        { kind: "Field", name: { kind: "Name", value: "content" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    ],
                },
            },
        ],
    };
    const AgentSessionWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AgentSessionWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentSessionWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "summary" } },
                        { kind: "Field", name: { kind: "Name", value: "sourceMetadata" } },
                        { kind: "Field", name: { kind: "Name", value: "appUserId" } },
                        { kind: "Field", name: { kind: "Name", value: "commentId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationId" } },
                        { kind: "Field", name: { kind: "Name", value: "creatorId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "status" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "endedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const AgentSessionEventWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AgentSessionEventWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentSessionEventWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "guidance" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GuidanceRuleWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "oauthClientId" } },
                        { kind: "Field", name: { kind: "Name", value: "appUserId" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "agentActivity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "agentSession" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentSessionWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "previousComments" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "action" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const AuditEntryWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuditEntryWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "requestInformation" } },
                        { kind: "Field", name: { kind: "Name", value: "metadata" } },
                        { kind: "Field", name: { kind: "Name", value: "countryCode" } },
                        { kind: "Field", name: { kind: "Name", value: "ip" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationId" } },
                        { kind: "Field", name: { kind: "Name", value: "actorId" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const InitiativeUpdateWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeUpdateWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "bodyData" } },
                        { kind: "Field", name: { kind: "Name", value: "body" } },
                        { kind: "Field", name: { kind: "Name", value: "editedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "health" } },
                        { kind: "Field", name: { kind: "Name", value: "initiativeId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "reactionData" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const InitiativeWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "lastUpdateId" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationId" } },
                        { kind: "Field", name: { kind: "Name", value: "creatorId" } },
                        { kind: "Field", name: { kind: "Name", value: "ownerId" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "status" } },
                        { kind: "Field", name: { kind: "Name", value: "updateRemindersDay" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "updateReminderFrequencyInWeeks" } },
                        { kind: "Field", name: { kind: "Name", value: "updateReminderFrequency" } },
                        { kind: "Field", name: { kind: "Name", value: "health" } },
                        { kind: "Field", name: { kind: "Name", value: "updateRemindersHour" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lastUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateChildWebhookPayload" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parentInitiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projects" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } },
                        { kind: "Field", name: { kind: "Name", value: "frequencyResolution" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subInitiatives" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "targetDate" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "owner" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                    ],
                },
            },
        ],
    };
    const IssueAssignedToYouNotificationWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueAssignedToYouNotificationWebhookPayload" },
                typeCondition: {
                    kind: "NamedType",
                    name: { kind: "Name", value: "IssueAssignedToYouNotificationWebhookPayload" },
                },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "actorId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    ],
                },
            },
        ],
    };
    const IssueCommentMentionNotificationWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueCommentMentionNotificationWebhookPayload" },
                typeCondition: {
                    kind: "NamedType",
                    name: { kind: "Name", value: "IssueCommentMentionNotificationWebhookPayload" },
                },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "actorId" } },
                        { kind: "Field", name: { kind: "Name", value: "commentId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parentComment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    ],
                },
            },
        ],
    };
    const IssueCommentReactionNotificationWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueCommentReactionNotificationWebhookPayload" },
                typeCondition: {
                    kind: "NamedType",
                    name: { kind: "Name", value: "IssueCommentReactionNotificationWebhookPayload" },
                },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "actorId" } },
                        { kind: "Field", name: { kind: "Name", value: "commentId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parentComment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    ],
                },
            },
        ],
    };
    const IssueEmojiReactionNotificationWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueEmojiReactionNotificationWebhookPayload" },
                typeCondition: {
                    kind: "NamedType",
                    name: { kind: "Name", value: "IssueEmojiReactionNotificationWebhookPayload" },
                },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "actorId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    ],
                },
            },
        ],
    };
    const IssueLabelWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueLabelWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "creatorId" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "inheritedFromId" } },
                        { kind: "Field", name: { kind: "Name", value: "parentId" } },
                        { kind: "Field", name: { kind: "Name", value: "teamId" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "isGroup" } },
                    ],
                },
            },
        ],
    };
    const IssueMentionNotificationWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueMentionNotificationWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueMentionNotificationWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "actorId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    ],
                },
            },
        ],
    };
    const IssueNewCommentNotificationWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueNewCommentNotificationWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueNewCommentNotificationWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "actorId" } },
                        { kind: "Field", name: { kind: "Name", value: "commentId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "parentCommentId" } },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parentComment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    ],
                },
            },
        ],
    };
    const IssueUnassignedFromYouNotificationWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueUnassignedFromYouNotificationWebhookPayload" },
                typeCondition: {
                    kind: "NamedType",
                    name: { kind: "Name", value: "IssueUnassignedFromYouNotificationWebhookPayload" },
                },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "actorId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "externalUserActorId" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "IssueWithDescriptionChildWebhookPayload" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                    ],
                },
            },
        ],
    };
    const AppUserNotificationWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AppUserNotificationWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AppUserNotificationWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "oauthClientId" } },
                        { kind: "Field", name: { kind: "Name", value: "appUserId" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationId" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "action" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const AppUserTeamAccessChangedWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AppUserTeamAccessChangedWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AppUserTeamAccessChangedWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "oauthClientId" } },
                        { kind: "Field", name: { kind: "Name", value: "appUserId" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationId" } },
                        { kind: "Field", name: { kind: "Name", value: "addedTeamIds" } },
                        { kind: "Field", name: { kind: "Name", value: "removedTeamIds" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "action" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "canAccessAllPublicTeams" } },
                    ],
                },
            },
        ],
    };
    const CustomResourceWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomResourceWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomResourceWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationId" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "action" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const EntityWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EntityWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationId" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedFrom" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "action" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                    ],
                },
            },
        ],
    };
    const CycleChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CycleChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "endsAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "number" } },
                        { kind: "Field", name: { kind: "Name", value: "startsAt" } },
                    ],
                },
            },
        ],
    };
    const WorkflowStateChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WorkflowStateChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const IssueLabelChildWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueLabelChildWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelChildWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "parentId" } },
                    ],
                },
            },
        ],
    };
    const IssueWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                        { kind: "Field", name: { kind: "Name", value: "labelIds" } },
                        { kind: "Field", name: { kind: "Name", value: "integrationSourceType" } },
                        { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } },
                        { kind: "Field", name: { kind: "Name", value: "delegateId" } },
                        { kind: "Field", name: { kind: "Name", value: "cycleId" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "externalUserCreatorId" } },
                        { kind: "Field", name: { kind: "Name", value: "stateId" } },
                        { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplateId" } },
                        { kind: "Field", name: { kind: "Name", value: "parentId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectMilestoneId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectId" } },
                        { kind: "Field", name: { kind: "Name", value: "recurringIssueTemplateId" } },
                        { kind: "Field", name: { kind: "Name", value: "sourceCommentId" } },
                        { kind: "Field", name: { kind: "Name", value: "teamId" } },
                        { kind: "Field", name: { kind: "Name", value: "creatorId" } },
                        { kind: "Field", name: { kind: "Name", value: "assigneeId" } },
                        { kind: "Field", name: { kind: "Name", value: "subscriberIds" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "delegate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "botActor" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "descriptionData" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "dueDate" } },
                        { kind: "Field", name: { kind: "Name", value: "syncedWith" } },
                        { kind: "Field", name: { kind: "Name", value: "estimate" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserCreator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUserChildWebhookPayload" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "identifier" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "state" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateChildWebhookPayload" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                        { kind: "Field", name: { kind: "Name", value: "number" } },
                        { kind: "Field", name: { kind: "Name", value: "priorityLabel" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "labels" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "priority" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestone" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneChildWebhookPayload" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "reactionData" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamChildWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedTriageAt" } },
                        { kind: "Field", name: { kind: "Name", value: "addedToCycleAt" } },
                        { kind: "Field", name: { kind: "Name", value: "addedToProjectAt" } },
                        { kind: "Field", name: { kind: "Name", value: "addedToTeamAt" } },
                        { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                        { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "triagedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slaBreachesAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slaHighRiskAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slaMediumRiskAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slaStartedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slaType" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "assignee" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserChildWebhookPayload" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IssueSlaWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueSlaWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSlaWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueData" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "action" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                    ],
                },
            },
        ],
    };
    const SemanticSearchResultFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SemanticSearchResult" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SemanticSearchResult" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "document" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const SemanticSearchPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SemanticSearchPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SemanticSearchPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "enabled" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "results" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SemanticSearchResult" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const UserAuthorizedApplicationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserAuthorizedApplication" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAuthorizedApplication" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "approvalErrorCode" } },
                        { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "developer" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "clientId" } },
                        { kind: "Field", name: { kind: "Name", value: "developerUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "webhooksEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "createdByLinear" } },
                        { kind: "Field", name: { kind: "Name", value: "isAuthorized" } },
                    ],
                },
            },
        ],
    };
    const ApplicationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Application" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Application" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "imageUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "developer" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "clientId" } },
                        { kind: "Field", name: { kind: "Name", value: "developerUrl" } },
                    ],
                },
            },
        ],
    };
    const TeamWithParentWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamWithParentWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamWithParentWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "key" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "parentId" } },
                        { kind: "Field", name: { kind: "Name", value: "displayName" } },
                    ],
                },
            },
        ],
    };
    const TeamOriginWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamOriginWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamOriginWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamWithParentWebhookPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const IntegrationsSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationsSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "contextViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueNewComment" } },
                        { kind: "Field", name: { kind: "Name", value: "slackInitiativeUpdateCreated" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueAddedToTriage" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueCreated" } },
                        { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreated" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueSlaHighRisk" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueSlaBreached" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueAddedToView" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueStatusChangedDone" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueStatusChangedAll" } },
                        { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreatedToTeam" } },
                        { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreatedToWorkspace" } },
                    ],
                },
            },
        ],
    };
    const InitiativePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const InitiativeToProjectPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeToProjectPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeToProject" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const NotificationDeliveryPreferencesDayFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "end" } },
                        { kind: "Field", name: { kind: "Name", value: "start" } },
                    ],
                },
            },
        ],
    };
    const NotificationDeliveryPreferencesScheduleFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "friday" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "monday" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "saturday" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "sunday" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "thursday" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "tuesday" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "wednesday" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "disabled" } },
                    ],
                },
            },
        ],
    };
    const NotificationDeliveryPreferencesChannelFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "schedule" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "notificationsDisabled" } },
                    ],
                },
            },
        ],
    };
    const NotificationDeliveryPreferencesFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationDeliveryPreferences" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferences" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "mobile" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" } },
                                ],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const NotificationChannelPreferencesFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationChannelPreferences" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "slack" } },
                        { kind: "Field", name: { kind: "Name", value: "desktop" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "mobile" } },
                    ],
                },
            },
        ],
    };
    const NotificationCategoryPreferencesFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationCategoryPreferences" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationCategoryPreferences" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customers" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "feed" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "appsAndIntegrations" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "assignments" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "commentsAndReplies" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentChanges" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "mentions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "postsAndUpdates" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reactions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reminders" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reviews" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "statusChanges" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "subscriptions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "system" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triage" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const UserSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "calendarHash" } },
                        { kind: "Field", name: { kind: "Name", value: "unsubscribedFrom" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationDeliveryPreferences" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferences" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationCategoryPreferences" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationCategoryPreferences" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationChannelPreferences" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "subscribedToDPA" } },
                        { kind: "Field", name: { kind: "Name", value: "subscribedToChangelog" } },
                        { kind: "Field", name: { kind: "Name", value: "subscribedToInviteAccepted" } },
                        { kind: "Field", name: { kind: "Name", value: "subscribedToPrivacyLegalUpdates" } },
                        { kind: "Field", name: { kind: "Name", value: "autoAssignToSelf" } },
                        { kind: "Field", name: { kind: "Name", value: "showFullUserNames" } },
                    ],
                },
            },
        ],
    };
    const UserActorWebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserActorWebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserActorWebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const IssueImportJqlCheckPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueImportJqlCheckPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportJqlCheckPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "error" } },
                        { kind: "Field", name: { kind: "Name", value: "count" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssueImportSyncCheckPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueImportSyncCheckPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportSyncCheckPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "error" } },
                        { kind: "Field", name: { kind: "Name", value: "canSync" } },
                    ],
                },
            },
        ],
    };
    const AgentActivityActionContentFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AgentActivityActionContent" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityActionContent" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "action" } },
                        { kind: "Field", name: { kind: "Name", value: "parameter" } },
                        { kind: "Field", name: { kind: "Name", value: "result" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const AgentActivityElicitationContentFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AgentActivityElicitationContent" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityElicitationContent" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "body" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const AgentActivityErrorContentFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AgentActivityErrorContent" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityErrorContent" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "body" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const AgentActivityPromptContentFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AgentActivityPromptContent" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityPromptContent" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "body" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const AgentActivityResponseContentFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AgentActivityResponseContent" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityResponseContent" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "body" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const AgentActivityThoughtContentFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AgentActivityThoughtContent" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityThoughtContent" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "body" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const AgentActivityFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AgentActivity" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivity" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "signal" } },
                        { kind: "Field", name: { kind: "Name", value: "sourceMetadata" } },
                        { kind: "Field", name: { kind: "Name", value: "signalMetadata" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "agentSession" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "sourceComment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "content" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityActionContent" } },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityActionContent" } },
                                            ],
                                        },
                                    },
                                    {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: { kind: "Name", value: "AgentActivityElicitationContent" },
                                        },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityElicitationContent" } },
                                            ],
                                        },
                                    },
                                    {
                                        kind: "InlineFragment",
                                        typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityErrorContent" } },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityErrorContent" } },
                                            ],
                                        },
                                    },
                                    {
                                        kind: "InlineFragment",
                                        typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityPromptContent" } },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityPromptContent" } },
                                            ],
                                        },
                                    },
                                    {
                                        kind: "InlineFragment",
                                        typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityResponseContent" } },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityResponseContent" } },
                                            ],
                                        },
                                    },
                                    {
                                        kind: "InlineFragment",
                                        typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityThoughtContent" } },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityThoughtContent" } },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "ephemeral" } },
                    ],
                },
            },
        ],
    };
    const PageInfoFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PageInfo" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PageInfo" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "startCursor" } },
                        { kind: "Field", name: { kind: "Name", value: "endCursor" } },
                        { kind: "Field", name: { kind: "Name", value: "hasPreviousPage" } },
                        { kind: "Field", name: { kind: "Name", value: "hasNextPage" } },
                    ],
                },
            },
        ],
    };
    const AgentActivityConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AgentActivityConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivity" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const AgentActivityPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AgentActivityPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "agentActivity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const AgentSessionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AgentSession" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentSession" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "summary" } },
                        { kind: "Field", name: { kind: "Name", value: "sourceMetadata" } },
                        { kind: "Field", name: { kind: "Name", value: "externalLink" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "appUser" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "status" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "endedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const AgentSessionConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AgentSessionConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentSessionConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentSession" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const AgentSessionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AgentSessionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AgentSessionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "agentSession" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ApiKeyFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ApiKey" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKey" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "scope" } },
                        { kind: "Field", name: { kind: "Name", value: "label" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "requestedSyncGroups" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "lastActiveAt" } },
                    ],
                },
            },
        ],
    };
    const ApiKeyConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ApiKeyConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ApiKeyPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ApiKeyPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "apiKey" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const SlackAsksTeamSettingsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SlackAsksTeamSettings" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackAsksTeamSettings" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "hasDefaultAsk" } },
                    ],
                },
            },
        ],
    };
    const SlackChannelNameMappingFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SlackChannelNameMapping" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackChannelNameMapping" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "autoCreateTemplateId" } },
                        { kind: "Field", name: { kind: "Name", value: "autoCreateOnBotMention" } },
                        { kind: "Field", name: { kind: "Name", value: "postCancellationUpdates" } },
                        { kind: "Field", name: { kind: "Name", value: "postCompletionUpdates" } },
                        { kind: "Field", name: { kind: "Name", value: "postAcceptedFromTriageUpdates" } },
                        { kind: "Field", name: { kind: "Name", value: "botAdded" } },
                        { kind: "Field", name: { kind: "Name", value: "isPrivate" } },
                        { kind: "Field", name: { kind: "Name", value: "isShared" } },
                        { kind: "Field", name: { kind: "Name", value: "aiTitles" } },
                        { kind: "Field", name: { kind: "Name", value: "autoCreateOnMessage" } },
                        { kind: "Field", name: { kind: "Name", value: "autoCreateOnEmoji" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teams" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackAsksTeamSettings" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const AsksChannelConnectPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AsksChannelConnectPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AsksChannelConnectPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "mapping" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelNameMapping" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "addBot" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const AttachmentFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Attachment" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Attachment" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "sourceType" } },
                        { kind: "Field", name: { kind: "Name", value: "subtitle" } },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                        { kind: "Field", name: { kind: "Name", value: "metadata" } },
                        { kind: "Field", name: { kind: "Name", value: "groupBySource" } },
                        { kind: "Field", name: { kind: "Name", value: "source" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "bodyData" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "originalIssue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserCreator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const AttachmentConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AttachmentConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const AttachmentPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AttachmentPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const AttachmentSourcesPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AttachmentSourcesPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentSourcesPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "sources" } },
                    ],
                },
            },
        ],
    };
    const AuditEntryFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuditEntry" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntry" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "requestInformation" } },
                        { kind: "Field", name: { kind: "Name", value: "metadata" } },
                        { kind: "Field", name: { kind: "Name", value: "countryCode" } },
                        { kind: "Field", name: { kind: "Name", value: "ip" } },
                        { kind: "Field", name: { kind: "Name", value: "actorId" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const AuditEntryConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuditEntryConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntry" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const AuditEntryTypeFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuditEntryType" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryType" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const AuthOrganizationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthOrganization" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOrganization" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } },
                        { kind: "Field", name: { kind: "Name", value: "previousUrlKeys" } },
                        { kind: "Field", name: { kind: "Name", value: "serviceId" } },
                        { kind: "Field", name: { kind: "Name", value: "releaseChannel" } },
                        { kind: "Field", name: { kind: "Name", value: "logoUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "urlKey" } },
                        { kind: "Field", name: { kind: "Name", value: "region" } },
                        { kind: "Field", name: { kind: "Name", value: "deletionRequestedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "samlEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "scimEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "enabled" } },
                        { kind: "Field", name: { kind: "Name", value: "userCount" } },
                    ],
                },
            },
        ],
    };
    const AuthUserFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthUser" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthUser" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "displayName" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "userAccountId" } },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                        { kind: "Field", name: { kind: "Name", value: "role" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const AuthResolverResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "AuthResolverResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthResolverResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "token" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "lastUsedOrganizationId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "users" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lockedUsers" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lockedOrganizations" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "availableOrganizations" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "allowDomainAccess" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const ReactionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Reaction" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Reaction" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "emoji" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUser" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const DocumentContentFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentContent" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContent" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "content" } },
                        { kind: "Field", name: { kind: "Name", value: "contentState" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "document" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestone" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "restoredAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const ExternalEntityInfoGithubMetadataFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ExternalEntityInfoGithubMetadata" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalEntityInfoGithubMetadata" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "number" } },
                        { kind: "Field", name: { kind: "Name", value: "owner" } },
                        { kind: "Field", name: { kind: "Name", value: "repo" } },
                    ],
                },
            },
        ],
    };
    const ExternalEntityInfoJiraMetadataFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ExternalEntityInfoJiraMetadata" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalEntityInfoJiraMetadata" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "issueTypeId" } },
                        { kind: "Field", name: { kind: "Name", value: "projectId" } },
                        { kind: "Field", name: { kind: "Name", value: "issueKey" } },
                    ],
                },
            },
        ],
    };
    const ExternalEntitySlackMetadataFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ExternalEntitySlackMetadata" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalEntitySlackMetadata" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "messageUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "channelId" } },
                        { kind: "Field", name: { kind: "Name", value: "channelName" } },
                        { kind: "Field", name: { kind: "Name", value: "isFromSlack" } },
                    ],
                },
            },
        ],
    };
    const ExternalEntityInfoFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ExternalEntityInfo" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalEntityInfo" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "metadata" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "InlineFragment",
                                        typeCondition: {
                                            kind: "NamedType",
                                            name: { kind: "Name", value: "ExternalEntityInfoGithubMetadata" },
                                        },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "ExternalEntityInfoGithubMetadata" } },
                                            ],
                                        },
                                    },
                                    {
                                        kind: "InlineFragment",
                                        typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalEntityInfoJiraMetadata" } },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "ExternalEntityInfoJiraMetadata" } },
                                            ],
                                        },
                                    },
                                    {
                                        kind: "InlineFragment",
                                        typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalEntitySlackMetadata" } },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "ExternalEntitySlackMetadata" } },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "service" } },
                    ],
                },
            },
        ],
    };
    const SyncedExternalThreadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SyncedExternalThread" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SyncedExternalThread" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "displayName" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "subType" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "isPersonalIntegrationRequired" } },
                        { kind: "Field", name: { kind: "Name", value: "isPersonalIntegrationConnected" } },
                        { kind: "Field", name: { kind: "Name", value: "isConnected" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const CommentFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Comment" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Comment" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "agentSession" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionData" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reactions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "body" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "resolvingComment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentContent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "syncedWith" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalEntityInfo" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalThread" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SyncedExternalThread" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUser" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "quotedText" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "resolvedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "editedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "resolvingUser" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const CommentConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CommentConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const CommentPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CommentPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ContactPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ContactPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ContactPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const CreateCsvExportReportPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CreateCsvExportReportPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateCsvExportReportPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const CreateOrJoinOrganizationResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ViewPreferencesValuesFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ViewPreferencesValues" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesValues" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "issueGrouping" } },
                        { kind: "Field", name: { kind: "Name", value: "viewOrdering" } },
                        { kind: "Field", name: { kind: "Name", value: "showCompletedIssues" } },
                    ],
                },
            },
        ],
    };
    const ViewPreferencesFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ViewPreferences" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferences" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "preferences" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "viewType" } },
                    ],
                },
            },
        ],
    };
    const CustomViewFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomView" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomView" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewPreferencesValues" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userViewPreferences" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "feedItemFilterData" } },
                        { kind: "Field", name: { kind: "Name", value: "initiativeFilterData" } },
                        { kind: "Field", name: { kind: "Name", value: "filterData" } },
                        { kind: "Field", name: { kind: "Name", value: "projectFilterData" } },
                        { kind: "Field", name: { kind: "Name", value: "filters" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "modelName" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationViewPreferences" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "updatedBy" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "owner" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "shared" } },
                    ],
                },
            },
        ],
    };
    const CustomViewConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomViewConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const CustomViewHasSubscribersPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomViewHasSubscribersPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewHasSubscribersPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "hasSubscribers" } },
                    ],
                },
            },
        ],
    };
    const CustomViewPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomViewPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const CustomViewSuggestionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomViewSuggestionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewSuggestionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                    ],
                },
            },
        ],
    };
    const CustomerFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Customer" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Customer" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "slackChannelId" } },
                        { kind: "Field", name: { kind: "Name", value: "mainSourceId" } },
                        { kind: "Field", name: { kind: "Name", value: "revenue" } },
                        { kind: "Field", name: { kind: "Name", value: "approximateNeedCount" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "status" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "logoUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "domains" } },
                        { kind: "Field", name: { kind: "Name", value: "externalIds" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "size" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "tier" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "owner" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const CustomerConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Customer" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectAttachmentFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectAttachment" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectAttachment" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "sourceType" } },
                        { kind: "Field", name: { kind: "Name", value: "metadata" } },
                        { kind: "Field", name: { kind: "Name", value: "source" } },
                        { kind: "Field", name: { kind: "Name", value: "subtitle" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                    ],
                },
            },
        ],
    };
    const CustomerNeedFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerNeed" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeed" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "originalIssue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "body" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectAttachment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectAttachment" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "priority" } },
                    ],
                },
            },
        ],
    };
    const CustomerNeedConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerNeedConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeed" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const CustomerNeedPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerNeedPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "need" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const CustomerNeedUpdatePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerNeedUpdatePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedUpdatePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "need" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "updatedRelatedNeeds" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeed" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const CustomerPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const CustomerStatusFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerStatus" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatus" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "displayName" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "position" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const CustomerStatusConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerStatusConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatusConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatus" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const CustomerStatusPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerStatusPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatusPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "status" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const CustomerTierFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerTier" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerTier" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "displayName" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "position" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const CustomerTierConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerTierConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTier" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const CustomerTierPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CustomerTierPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "tier" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const CycleFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Cycle" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Cycle" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "inheritedFrom" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "endsAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "number" } },
                        { kind: "Field", name: { kind: "Name", value: "progress" } },
                        { kind: "Field", name: { kind: "Name", value: "startsAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "scopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "isActive" } },
                        { kind: "Field", name: { kind: "Name", value: "isFuture" } },
                        { kind: "Field", name: { kind: "Name", value: "isPast" } },
                        { kind: "Field", name: { kind: "Name", value: "isNext" } },
                        { kind: "Field", name: { kind: "Name", value: "isPrevious" } },
                    ],
                },
            },
        ],
    };
    const CycleConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CycleConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const CyclePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "CyclePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CyclePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const DocumentFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Document" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Document" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                        { kind: "Field", name: { kind: "Name", value: "documentContentId" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "content" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lastAppliedTemplate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "hiddenAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "updatedBy" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const DocumentConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Document" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const DocumentContentHistoryTypeFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentContentHistoryType" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContentHistoryType" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "actorIds" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "contentDataSnapshotAt" } },
                    ],
                },
            },
        ],
    };
    const DocumentContentHistoryPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentContentHistoryPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContentHistoryPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "history" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContentHistoryType" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const DocumentPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "document" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ArchiveResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ArchiveResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ArchiveResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "archive" } },
                        { kind: "Field", name: { kind: "Name", value: "totalCount" } },
                        { kind: "Field", name: { kind: "Name", value: "databaseVersion" } },
                        { kind: "Field", name: { kind: "Name", value: "includesDependencies" } },
                    ],
                },
            },
        ],
    };
    const DocumentSearchResultFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentSearchResult" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentSearchResult" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                        { kind: "Field", name: { kind: "Name", value: "metadata" } },
                        { kind: "Field", name: { kind: "Name", value: "documentContentId" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "content" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lastAppliedTemplate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "hiddenAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "updatedBy" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const DocumentSearchPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DocumentSearchPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentSearchPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "archivePayload" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "totalCount" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentSearchResult" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const DraftFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Draft" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Draft" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "data" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parentComment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerNeed" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "bodyData" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "isAutogenerated" } },
                    ],
                },
            },
        ],
    };
    const DraftConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "DraftConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DraftConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Draft" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const EmailIntakeAddressPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EmailIntakeAddressPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddressPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailIntakeAddress" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const EmailUnsubscribePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EmailUnsubscribePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const EmailUserAccountAuthChallengeResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "authType" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const EmojiFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Emoji" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Emoji" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "source" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const EmojiConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EmojiConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const EmojiPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EmojiPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emoji" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const EntityExternalLinkFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EntityExternalLink" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLink" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "label" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const EntityExternalLinkConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EntityExternalLinkConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLink" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const EntityExternalLinkPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "EntityExternalLinkPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entityExternalLink" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ExternalUserFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ExternalUser" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalUser" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "displayName" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSeen" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const ExternalUserConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ExternalUserConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalUserConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUser" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const FavoriteFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Favorite" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Favorite" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "document" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "label" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLabel" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "folderName" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "owner" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "initiativeTab" } },
                        { kind: "Field", name: { kind: "Name", value: "projectTab" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "predefinedViewTeam" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "predefinedViewType" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectTeam" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const FavoriteConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FavoriteConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoriteConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const FavoritePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FavoritePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoritePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favorite" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const FetchDataPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FetchDataPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FetchDataPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "query" } },
                        { kind: "Field", name: { kind: "Name", value: "data" } },
                        { kind: "Field", name: { kind: "Name", value: "filters" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const FileUploadDeletePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FileUploadDeletePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FileUploadDeletePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const FrontAttachmentPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "FrontAttachmentPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FrontAttachmentPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const GitAutomationTargetBranchFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitAutomationTargetBranch" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranch" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "branchPattern" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "isRegex" } },
                    ],
                },
            },
        ],
    };
    const GitAutomationStateFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitAutomationState" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationState" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "state" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "event" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "targetBranch" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranch" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "branchPattern" } },
                    ],
                },
            },
        ],
    };
    const GitAutomationStateConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitAutomationStateConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStateConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationState" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const GitAutomationStatePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitAutomationStatePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStatePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "gitAutomationState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationState" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const GitAutomationTargetBranchPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitAutomationTargetBranchPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "targetBranch" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranch" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const GitHubCommitIntegrationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitHubCommitIntegrationPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "webhookSecret" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const GitHubEnterpriseServerInstallVerificationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitHubEnterpriseServerInstallVerificationPayload" },
                typeCondition: {
                    kind: "NamedType",
                    name: { kind: "Name", value: "GitHubEnterpriseServerInstallVerificationPayload" },
                },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const GitHubEnterpriseServerPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitHubEnterpriseServerPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubEnterpriseServerPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "installUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "setupUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "webhookSecret" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const GitLabIntegrationCreatePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "GitLabIntegrationCreatePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitLabIntegrationCreatePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "webhookSecret" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ImageUploadFromUrlPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ImageUploadFromUrlPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const InitiativeFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Initiative" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Initiative" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parentInitiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationsSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentContent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updateRemindersDay" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "targetDate" } },
                        { kind: "Field", name: { kind: "Name", value: "updateReminderFrequency" } },
                        { kind: "Field", name: { kind: "Name", value: "health" } },
                        { kind: "Field", name: { kind: "Name", value: "updateRemindersHour" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "content" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lastUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updateReminderFrequencyInWeeks" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } },
                        { kind: "Field", name: { kind: "Name", value: "frequencyResolution" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "status" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "owner" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const InitiativeConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Initiative" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const InitiativeHistoryFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeHistory" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeHistory" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "entries" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const InitiativeHistoryConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeHistoryConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeHistoryConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeHistory" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const InitiativeRelationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeRelation" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelation" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "relatedInitiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const InitiativeRelationConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeRelationConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelationConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeRelation" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const InitiativeRelationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeRelationPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelationPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeRelation" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeRelation" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const InitiativeToProjectFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeToProject" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProject" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const InitiativeToProjectConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeToProjectConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProject" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const InitiativeUpdateFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeUpdate" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdate" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionData" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reactions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "diffMarkdown" } },
                        { kind: "Field", name: { kind: "Name", value: "diff" } },
                        { kind: "Field", name: { kind: "Name", value: "health" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "editedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "body" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "isDiffHidden" } },
                        { kind: "Field", name: { kind: "Name", value: "isStale" } },
                    ],
                },
            },
        ],
    };
    const InitiativeUpdateConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeUpdateConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdate" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const InitiativeUpdatePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeUpdatePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdatePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const InitiativeUpdateReminderPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "InitiativeUpdateReminderPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateReminderPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IntegrationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Integration" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Integration" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "service" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IntegrationConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IntegrationHasScopesPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationHasScopesPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationHasScopesPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "missingScopes" } },
                        { kind: "Field", name: { kind: "Name", value: "hasAllScopes" } },
                    ],
                },
            },
        ],
    };
    const IntegrationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IntegrationRequestPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationRequestPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationRequestPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IntegrationSlackWorkspaceNamePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationSlackWorkspaceNamePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationSlackWorkspaceNamePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IntegrationTemplateFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationTemplate" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplate" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "foreignEntityId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "template" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const IntegrationTemplateConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationTemplateConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplateConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplate" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IntegrationTemplatePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationTemplatePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplatePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationTemplate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IntegrationsSettingsPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IntegrationsSettingsPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationsSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssueFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Issue" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Issue" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionData" } },
                        { kind: "Field", name: { kind: "Name", value: "labelIds" } },
                        { kind: "Field", name: { kind: "Name", value: "integrationSourceType" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "identifier" } },
                        { kind: "Field", name: { kind: "Name", value: "priorityLabel" } },
                        { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reactions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "customerTicketCount" } },
                        { kind: "Field", name: { kind: "Name", value: "branchName" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "delegate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "sourceComment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "dueDate" } },
                        { kind: "Field", name: { kind: "Name", value: "estimate" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "syncedWith" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalEntityInfo" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserCreator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "asksExternalUserRequester" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "asksRequester" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                        { kind: "Field", name: { kind: "Name", value: "number" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lastAppliedTemplate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "boardOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "priority" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestone" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "recurringIssueTemplate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedTriageAt" } },
                        { kind: "Field", name: { kind: "Name", value: "triagedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "addedToCycleAt" } },
                        { kind: "Field", name: { kind: "Name", value: "addedToProjectAt" } },
                        { kind: "Field", name: { kind: "Name", value: "addedToTeamAt" } },
                        { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                        { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slaStartedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slaBreachesAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slaHighRiskAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slaMediumRiskAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slaType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "assignee" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "snoozedBy" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favorite" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "state" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IssueBatchPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueBatchPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueBatchPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issues" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssueConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IssueFilterSuggestionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueFilterSuggestionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueFilterSuggestionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "filter" } },
                        { kind: "Field", name: { kind: "Name", value: "logId" } },
                    ],
                },
            },
        ],
    };
    const IssueRelationHistoryPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueRelationHistoryPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationHistoryPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "identifier" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const UserFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "User" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "User" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "statusUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "avatarUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } },
                        { kind: "Field", name: { kind: "Name", value: "disableReason" } },
                        { kind: "Field", name: { kind: "Name", value: "avatarBackgroundColor" } },
                        { kind: "Field", name: { kind: "Name", value: "statusEmoji" } },
                        { kind: "Field", name: { kind: "Name", value: "initials" } },
                        { kind: "Field", name: { kind: "Name", value: "statusLabel" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSeen" } },
                        { kind: "Field", name: { kind: "Name", value: "timezone" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "gitHubUserId" } },
                        { kind: "Field", name: { kind: "Name", value: "displayName" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "active" } },
                        { kind: "Field", name: { kind: "Name", value: "guest" } },
                        { kind: "Field", name: { kind: "Name", value: "app" } },
                        { kind: "Field", name: { kind: "Name", value: "admin" } },
                        { kind: "Field", name: { kind: "Name", value: "isAssignable" } },
                        { kind: "Field", name: { kind: "Name", value: "isMentionable" } },
                        { kind: "Field", name: { kind: "Name", value: "isMe" } },
                        { kind: "Field", name: { kind: "Name", value: "canAccessAnyPublicTeam" } },
                        { kind: "Field", name: { kind: "Name", value: "calendarHash" } },
                        { kind: "Field", name: { kind: "Name", value: "inviteHash" } },
                    ],
                },
            },
        ],
    };
    const IssueImportFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueImport" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImport" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "progress" } },
                        { kind: "Field", name: { kind: "Name", value: "errorMetadata" } },
                        { kind: "Field", name: { kind: "Name", value: "csvFileUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "serviceMetadata" } },
                        { kind: "Field", name: { kind: "Name", value: "teamName" } },
                        { kind: "Field", name: { kind: "Name", value: "mapping" } },
                        { kind: "Field", name: { kind: "Name", value: "displayName" } },
                        { kind: "Field", name: { kind: "Name", value: "creatorId" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "service" } },
                        { kind: "Field", name: { kind: "Name", value: "status" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "error" } },
                    ],
                },
            },
        ],
    };
    const IssueLabelFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueLabel" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabel" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastAppliedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "inheritedFrom" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "isGroup" } },
                    ],
                },
            },
        ],
    };
    const IssueHistoryFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueHistory" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistory" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "relationChanges" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationHistoryPayload" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "addedLabelIds" } },
                        { kind: "Field", name: { kind: "Name", value: "removedLabelIds" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "descriptionUpdatedBy" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "actors" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fromDelegate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toDelegate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fromCycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toCycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "attachmentId" } },
                        { kind: "Field", name: { kind: "Name", value: "customerNeedId" } },
                        { kind: "Field", name: { kind: "Name", value: "toCycleId" } },
                        { kind: "Field", name: { kind: "Name", value: "toParentId" } },
                        { kind: "Field", name: { kind: "Name", value: "toConvertedProjectId" } },
                        { kind: "Field", name: { kind: "Name", value: "toProjectId" } },
                        { kind: "Field", name: { kind: "Name", value: "toStateId" } },
                        { kind: "Field", name: { kind: "Name", value: "fromCycleId" } },
                        { kind: "Field", name: { kind: "Name", value: "fromParentId" } },
                        { kind: "Field", name: { kind: "Name", value: "fromProjectId" } },
                        { kind: "Field", name: { kind: "Name", value: "fromStateId" } },
                        { kind: "Field", name: { kind: "Name", value: "fromTeamId" } },
                        { kind: "Field", name: { kind: "Name", value: "toTeamId" } },
                        { kind: "Field", name: { kind: "Name", value: "fromAssigneeId" } },
                        { kind: "Field", name: { kind: "Name", value: "toAssigneeId" } },
                        { kind: "Field", name: { kind: "Name", value: "actorId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImport" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "addedLabels" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "removedLabels" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toConvertedProject" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fromParent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toParent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fromProject" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toProject" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fromState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fromTeam" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toTeam" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "toAssignee" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fromAssignee" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageResponsibilityNotifiedUsers" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "fromDueDate" } },
                        { kind: "Field", name: { kind: "Name", value: "toDueDate" } },
                        { kind: "Field", name: { kind: "Name", value: "fromEstimate" } },
                        { kind: "Field", name: { kind: "Name", value: "toEstimate" } },
                        { kind: "Field", name: { kind: "Name", value: "fromPriority" } },
                        { kind: "Field", name: { kind: "Name", value: "toPriority" } },
                        { kind: "Field", name: { kind: "Name", value: "fromTitle" } },
                        { kind: "Field", name: { kind: "Name", value: "toTitle" } },
                        { kind: "Field", name: { kind: "Name", value: "archived" } },
                        { kind: "Field", name: { kind: "Name", value: "autoArchived" } },
                        { kind: "Field", name: { kind: "Name", value: "autoClosed" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedDescription" } },
                    ],
                },
            },
        ],
    };
    const IssueHistoryConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueHistoryConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistoryConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistory" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IssueImportCheckPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueImportCheckPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportCheckPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssueImportDeletePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueImportDeletePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportDeletePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImport" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssueImportPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueImportPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImport" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssueLabelConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueLabelConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IssueLabelPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueLabelPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabel" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssuePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssuePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssuePriorityValueFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssuePriorityValue" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePriorityValue" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "label" } },
                        { kind: "Field", name: { kind: "Name", value: "priority" } },
                    ],
                },
            },
        ],
    };
    const IssueRelationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueRelation" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelation" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "relatedIssue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const IssueRelationConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueRelationConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IssueRelationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueRelationPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRelation" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const IssueSearchResultFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueSearchResult" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSearchResult" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionData" } },
                        { kind: "Field", name: { kind: "Name", value: "labelIds" } },
                        { kind: "Field", name: { kind: "Name", value: "integrationSourceType" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "identifier" } },
                        { kind: "Field", name: { kind: "Name", value: "priorityLabel" } },
                        { kind: "Field", name: { kind: "Name", value: "metadata" } },
                        { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reactions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "customerTicketCount" } },
                        { kind: "Field", name: { kind: "Name", value: "branchName" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "delegate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "botActor" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "sourceComment" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "dueDate" } },
                        { kind: "Field", name: { kind: "Name", value: "estimate" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "syncedWith" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalEntityInfo" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUserCreator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "asksExternalUserRequester" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "asksRequester" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                        { kind: "Field", name: { kind: "Name", value: "number" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lastAppliedTemplate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "boardOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "priority" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestone" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "recurringIssueTemplate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedTriageAt" } },
                        { kind: "Field", name: { kind: "Name", value: "triagedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "addedToCycleAt" } },
                        { kind: "Field", name: { kind: "Name", value: "addedToProjectAt" } },
                        { kind: "Field", name: { kind: "Name", value: "addedToTeamAt" } },
                        { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                        { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slaStartedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slaBreachesAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slaHighRiskAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slaMediumRiskAt" } },
                        { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "slaType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "assignee" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "snoozedBy" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favorite" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "state" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IssueSearchPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueSearchPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSearchPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "archivePayload" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "totalCount" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSearchResult" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IssueSuggestionMetadataFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueSuggestionMetadata" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSuggestionMetadata" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "appliedAutomationRuleId" } },
                        { kind: "Field", name: { kind: "Name", value: "classification" } },
                        { kind: "Field", name: { kind: "Name", value: "evalLogId" } },
                        { kind: "Field", name: { kind: "Name", value: "rank" } },
                        { kind: "Field", name: { kind: "Name", value: "reasons" } },
                        { kind: "Field", name: { kind: "Name", value: "score" } },
                        { kind: "Field", name: { kind: "Name", value: "variant" } },
                    ],
                },
            },
        ],
    };
    const IssueSuggestionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueSuggestion" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSuggestion" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "dismissalReason" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "metadata" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSuggestionMetadata" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "state" } },
                        { kind: "Field", name: { kind: "Name", value: "stateChangedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "suggestedIssue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "suggestedIssueId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "suggestedLabel" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "suggestedLabelId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "suggestedProject" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "suggestedTeam" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "suggestedUser" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "suggestedUserId" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const IssueSuggestionConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueSuggestionConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSuggestionConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSuggestion" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const IssueTitleSuggestionFromCustomerRequestPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "IssueTitleSuggestionFromCustomerRequestPayload" },
                typeCondition: {
                    kind: "NamedType",
                    name: { kind: "Name", value: "IssueTitleSuggestionFromCustomerRequestPayload" },
                },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "title" } },
                    ],
                },
            },
        ],
    };
    const LogoutResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "LogoutResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "LogoutResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const NodeFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Node" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Node" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const NotificationBatchActionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationBatchActionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationBatchActionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notifications" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const NotificationConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const NotificationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notification" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const NotificationSubscriptionConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationSubscriptionConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const NotificationSubscriptionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "NotificationSubscriptionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationSubscription" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const OrganizationAcceptedOrExpiredInviteDetailsPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationAcceptedOrExpiredInviteDetailsPayload" },
                typeCondition: {
                    kind: "NamedType",
                    name: { kind: "Name", value: "OrganizationAcceptedOrExpiredInviteDetailsPayload" },
                },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "status" } },
                    ],
                },
            },
        ],
    };
    const OrganizationCancelDeletePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationCancelDeletePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationCancelDeletePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const OrganizationDeletePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationDeletePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDeletePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const OrganizationExistsPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationExistsPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationExistsPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                        { kind: "Field", name: { kind: "Name", value: "exists" } },
                    ],
                },
            },
        ],
    };
    const OrganizationInviteFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationInvite" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvite" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "metadata" } },
                        { kind: "Field", name: { kind: "Name", value: "external" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "acceptedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "expiresAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "role" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "inviter" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "invitee" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const OrganizationInviteConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationInviteConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const OrganizationInviteFullDetailsPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationInviteFullDetailsPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteFullDetailsPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationId" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationName" } },
                        { kind: "Field", name: { kind: "Name", value: "email" } },
                        { kind: "Field", name: { kind: "Name", value: "inviter" } },
                        { kind: "Field", name: { kind: "Name", value: "status" } },
                        { kind: "Field", name: { kind: "Name", value: "organizationLogoUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "role" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "accepted" } },
                        { kind: "Field", name: { kind: "Name", value: "expired" } },
                    ],
                },
            },
        ],
    };
    const OrganizationInvitePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationInvitePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvitePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationInvite" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const OrganizationMetaFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationMeta" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationMeta" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } },
                        { kind: "Field", name: { kind: "Name", value: "region" } },
                    ],
                },
            },
        ],
    };
    const OrganizationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const OrganizationStartTrialPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "OrganizationStartTrialPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationStartTrialPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const PasskeyLoginStartResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PasskeyLoginStartResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PasskeyLoginStartResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "options" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Project" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Project" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                        { kind: "Field", name: { kind: "Name", value: "labelIds" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationsSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentContent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updateRemindersDay" } },
                        { kind: "Field", name: { kind: "Name", value: "targetDate" } },
                        { kind: "Field", name: { kind: "Name", value: "startDate" } },
                        { kind: "Field", name: { kind: "Name", value: "updateReminderFrequency" } },
                        { kind: "Field", name: { kind: "Name", value: "health" } },
                        { kind: "Field", name: { kind: "Name", value: "updateRemindersHour" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lastUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lastAppliedTemplate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updateReminderFrequencyInWeeks" } },
                        { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "progress" } },
                        { kind: "Field", name: { kind: "Name", value: "scope" } },
                        { kind: "Field", name: { kind: "Name", value: "priorityLabel" } },
                        { kind: "Field", name: { kind: "Name", value: "priority" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lead" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "convertedFromIssue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "content" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } },
                        { kind: "Field", name: { kind: "Name", value: "startDateResolution" } },
                        { kind: "Field", name: { kind: "Name", value: "frequencyResolution" } },
                        { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "status" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                        { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersPausedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "scopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favorite" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } },
                        { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } },
                        { kind: "Field", name: { kind: "Name", value: "state" } },
                    ],
                },
            },
        ],
    };
    const ProjectConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectFilterSuggestionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectFilterSuggestionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilterSuggestionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "filter" } },
                        { kind: "Field", name: { kind: "Name", value: "logId" } },
                    ],
                },
            },
        ],
    };
    const ProjectHistoryFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectHistory" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectHistory" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "entries" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const ProjectHistoryConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectHistoryConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectHistoryConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectHistory" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectLabelFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectLabel" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabel" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastAppliedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "parent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "isGroup" } },
                    ],
                },
            },
        ],
    };
    const ProjectLabelConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectLabelConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabel" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectLabelPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectLabelPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLabel" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectMilestoneFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectMilestone" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestone" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentContent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "targetDate" } },
                        { kind: "Field", name: { kind: "Name", value: "progress" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "status" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const ProjectMilestoneConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectMilestoneConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestone" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectMilestoneMoveIssueToTeamFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectMilestoneMoveIssueToTeam" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneMoveIssueToTeam" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "issueId" } },
                        { kind: "Field", name: { kind: "Name", value: "teamId" } },
                    ],
                },
            },
        ],
    };
    const ProjectMilestoneMoveProjectTeamsFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectMilestoneMoveProjectTeams" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneMoveProjectTeams" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "projectId" } },
                        { kind: "Field", name: { kind: "Name", value: "teamIds" } },
                    ],
                },
            },
        ],
    };
    const ProjectMilestoneMovePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectMilestoneMovePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneMovePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "previousIssueTeamIds" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneMoveIssueToTeam" } },
                                ],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "previousProjectTeamIds" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneMoveProjectTeams" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestone" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectMilestonePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectMilestonePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestonePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestone" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectRelationFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectRelation" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelation" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestone" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "relatedProjectMilestone" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "relatedProject" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "anchorType" } },
                        { kind: "Field", name: { kind: "Name", value: "relatedAnchorType" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const ProjectRelationConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectRelationConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelation" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectRelationPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectRelationPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectRelation" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectSearchResultFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectSearchResult" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectSearchResult" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "trashed" } },
                        { kind: "Field", name: { kind: "Name", value: "labelIds" } },
                        { kind: "Field", name: { kind: "Name", value: "metadata" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationsSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentContent" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updateRemindersDay" } },
                        { kind: "Field", name: { kind: "Name", value: "targetDate" } },
                        { kind: "Field", name: { kind: "Name", value: "startDate" } },
                        { kind: "Field", name: { kind: "Name", value: "updateReminderFrequency" } },
                        { kind: "Field", name: { kind: "Name", value: "health" } },
                        { kind: "Field", name: { kind: "Name", value: "updateRemindersHour" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lastUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lastAppliedTemplate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "updateReminderFrequencyInWeeks" } },
                        { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "progress" } },
                        { kind: "Field", name: { kind: "Name", value: "scope" } },
                        { kind: "Field", name: { kind: "Name", value: "priorityLabel" } },
                        { kind: "Field", name: { kind: "Name", value: "priority" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lead" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "convertedFromIssue" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "content" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } },
                        { kind: "Field", name: { kind: "Name", value: "startDateResolution" } },
                        { kind: "Field", name: { kind: "Name", value: "frequencyResolution" } },
                        { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "status" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "canceledAt" } },
                        { kind: "Field", name: { kind: "Name", value: "completedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersPausedUntilAt" } },
                        { kind: "Field", name: { kind: "Name", value: "scopeHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favorite" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } },
                        { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } },
                        { kind: "Field", name: { kind: "Name", value: "state" } },
                    ],
                },
            },
        ],
    };
    const ProjectSearchPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectSearchPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectSearchPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "archivePayload" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "totalCount" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectSearchResult" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectStatusConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectStatusConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectStatusCountPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectStatusCountPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusCountPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "privateCount" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedTeamCount" } },
                        { kind: "Field", name: { kind: "Name", value: "count" } },
                    ],
                },
            },
        ],
    };
    const ProjectStatusPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectStatusPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "status" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectUpdateFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectUpdate" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdate" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "reactionData" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reactions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "diffMarkdown" } },
                        { kind: "Field", name: { kind: "Name", value: "diff" } },
                        { kind: "Field", name: { kind: "Name", value: "health" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "editedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        { kind: "Field", name: { kind: "Name", value: "body" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "isDiffHidden" } },
                        { kind: "Field", name: { kind: "Name", value: "isStale" } },
                    ],
                },
            },
        ],
    };
    const ProjectUpdateConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectUpdateConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdate" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ProjectUpdatePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectUpdatePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdatePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ProjectUpdateReminderPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ProjectUpdateReminderPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateReminderPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const PushSubscriptionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PushSubscription" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscription" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const PushSubscriptionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PushSubscriptionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entity" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscription" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const PushSubscriptionTestPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "PushSubscriptionTestPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionTestPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const RateLimitResultPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "RateLimitResultPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RateLimitResultPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "period" } },
                        { kind: "Field", name: { kind: "Name", value: "remainingAmount" } },
                        { kind: "Field", name: { kind: "Name", value: "requestedAmount" } },
                        { kind: "Field", name: { kind: "Name", value: "reset" } },
                        { kind: "Field", name: { kind: "Name", value: "allowedAmount" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                    ],
                },
            },
        ],
    };
    const RateLimitPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "RateLimitPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RateLimitPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "identifier" } },
                        { kind: "Field", name: { kind: "Name", value: "kind" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "limits" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RateLimitResultPayload" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const ReactionPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ReactionPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ReactionPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reaction" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const RoadmapFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Roadmap" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Roadmap" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "slugId" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "owner" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const RoadmapConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "RoadmapConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Roadmap" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const RoadmapPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "RoadmapPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmap" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const RoadmapToProjectFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "RoadmapToProject" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProject" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmap" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const RoadmapToProjectConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "RoadmapToProjectConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProject" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const RoadmapToProjectPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "RoadmapToProjectPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapToProject" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const SlackChannelConnectPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SlackChannelConnectPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackChannelConnectPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "nudgeToConnectMainSlackIntegration" } },
                        { kind: "Field", name: { kind: "Name", value: "nudgeToUpdateMainSlackIntegration" } },
                        { kind: "Field", name: { kind: "Name", value: "addBot" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const SsoUrlFromEmailResponseFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SsoUrlFromEmailResponse" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "samlSsoUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const SuccessPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SuccessPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SuccessPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const SummaryPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "SummaryPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SummaryPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "summary" } },
                    ],
                },
            },
        ],
    };
    const TeamFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Team" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Team" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignCompleted" } },
                        { kind: "Field", name: { kind: "Name", value: "cycleLockToActive" } },
                        { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignStarted" } },
                        { kind: "Field", name: { kind: "Name", value: "cycleCalenderUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "upcomingCycleCount" } },
                        { kind: "Field", name: { kind: "Name", value: "issueCount" } },
                        { kind: "Field", name: { kind: "Name", value: "autoArchivePeriod" } },
                        { kind: "Field", name: { kind: "Name", value: "autoClosePeriod" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationsSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "activeCycle" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageResponsibility" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "scimGroupName" } },
                        { kind: "Field", name: { kind: "Name", value: "autoCloseStateId" } },
                        { kind: "Field", name: { kind: "Name", value: "cycleCooldownTime" } },
                        { kind: "Field", name: { kind: "Name", value: "cycleStartDay" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "defaultTemplateForMembers" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "defaultTemplateForNonMembers" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "defaultProjectTemplate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "defaultIssueState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "cycleDuration" } },
                        { kind: "Field", name: { kind: "Name", value: "icon" } },
                        { kind: "Field", name: { kind: "Name", value: "defaultTemplateForMembersId" } },
                        { kind: "Field", name: { kind: "Name", value: "defaultTemplateForNonMembersId" } },
                        { kind: "Field", name: { kind: "Name", value: "issueEstimationType" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "displayName" } },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "key" } },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "timezone" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "mergeWorkflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "draftWorkflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "startWorkflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "mergeableWorkflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reviewWorkflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "markedAsDuplicateWorkflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageIssueState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "inviteHash" } },
                        { kind: "Field", name: { kind: "Name", value: "defaultIssueEstimate" } },
                        { kind: "Field", name: { kind: "Name", value: "setIssueSortOrderOnStateChange" } },
                        { kind: "Field", name: { kind: "Name", value: "requirePriorityToLeaveTriage" } },
                        { kind: "Field", name: { kind: "Name", value: "autoCloseChildIssues" } },
                        { kind: "Field", name: { kind: "Name", value: "autoCloseParentIssues" } },
                        { kind: "Field", name: { kind: "Name", value: "scimManaged" } },
                        { kind: "Field", name: { kind: "Name", value: "private" } },
                        { kind: "Field", name: { kind: "Name", value: "inheritIssueEstimation" } },
                        { kind: "Field", name: { kind: "Name", value: "inheritWorkflowStatuses" } },
                        { kind: "Field", name: { kind: "Name", value: "cyclesEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "issueEstimationExtended" } },
                        { kind: "Field", name: { kind: "Name", value: "issueEstimationAllowZero" } },
                        { kind: "Field", name: { kind: "Name", value: "aiThreadSummariesEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "groupIssueHistory" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } },
                        { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } },
                        { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } },
                        { kind: "Field", name: { kind: "Name", value: "triageEnabled" } },
                        { kind: "Field", name: { kind: "Name", value: "issueOrderingNoPriorityFirst" } },
                        { kind: "Field", name: { kind: "Name", value: "issueSortOrderDefaultToBottom" } },
                    ],
                },
            },
        ],
    };
    const TeamConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const TeamMembershipFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamMembership" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembership" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "owner" } },
                    ],
                },
            },
        ],
    };
    const TeamMembershipConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamMembershipConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const TeamMembershipPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamMembershipPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamMembership" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const TeamPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TeamPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const TemplateFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Template" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Template" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "templateData" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "inheritedFrom" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "sortOrder" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "lastUpdatedBy" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const TemplateConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TemplateConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplateConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const TemplatePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TemplatePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplatePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "template" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const TimeScheduleEntryFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TimeScheduleEntry" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleEntry" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "userId" } },
                        { kind: "Field", name: { kind: "Name", value: "userEmail" } },
                        { kind: "Field", name: { kind: "Name", value: "endsAt" } },
                        { kind: "Field", name: { kind: "Name", value: "startsAt" } },
                    ],
                },
            },
        ],
    };
    const TimeScheduleFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TimeSchedule" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeSchedule" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "externalUrl" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "externalId" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entries" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeScheduleEntry" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const TimeScheduleConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TimeScheduleConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedule" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const TimeSchedulePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TimeSchedulePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeSchedulePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "timeSchedule" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const TriageResponsibilityManualSelectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TriageResponsibilityManualSelection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityManualSelection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "userIds" } },
                    ],
                },
            },
        ],
    };
    const TriageResponsibilityFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TriageResponsibility" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibility" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "manualSelection" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityManualSelection" } },
                                ],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "action" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "timeSchedule" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "currentUser" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const TriageResponsibilityConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TriageResponsibilityConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibility" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const TriageResponsibilityPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "TriageResponsibilityPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageResponsibility" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const UploadFileHeaderFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UploadFileHeader" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFileHeader" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "key" } },
                        { kind: "Field", name: { kind: "Name", value: "value" } },
                    ],
                },
            },
        ],
    };
    const UploadFileFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UploadFile" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFile" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "assetUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "contentType" } },
                        { kind: "Field", name: { kind: "Name", value: "filename" } },
                        { kind: "Field", name: { kind: "Name", value: "uploadUrl" } },
                        { kind: "Field", name: { kind: "Name", value: "size" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "headers" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFileHeader" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "metaData" } },
                    ],
                },
            },
        ],
    };
    const UploadPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UploadPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "uploadFile" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFile" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const UserAdminPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserAdminPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAdminPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const UserConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const UserPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const UserSettingsFlagPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserSettingsFlagPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "flag" } },
                        { kind: "Field", name: { kind: "Name", value: "value" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const UserSettingsFlagsResetPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserSettingsFlagsResetPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const UserSettingsPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "UserSettingsPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const ViewPreferencesPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "ViewPreferencesPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewPreferences" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const WebhookFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "Webhook" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Webhook" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "secret" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "resourceTypes" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "creator" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "url" } },
                        { kind: "Field", name: { kind: "Name", value: "label" } },
                        { kind: "Field", name: { kind: "Name", value: "allPublicTeams" } },
                        { kind: "Field", name: { kind: "Name", value: "enabled" } },
                    ],
                },
            },
        ],
    };
    const WebhookConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WebhookConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const WebhookPayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WebhookPayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookPayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhook" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const WorkflowStateFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WorkflowState" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowState" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "description" } },
                        { kind: "Field", name: { kind: "Name", value: "updatedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "position" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "inheritedFrom" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "color" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "archivedAt" } },
                        { kind: "Field", name: { kind: "Name", value: "createdAt" } },
                        { kind: "Field", name: { kind: "Name", value: "type" } },
                        { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                },
            },
        ],
    };
    const WorkflowStateConnectionFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WorkflowStateConnection" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateConnection" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "nodes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }],
                            },
                        },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pageInfo" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }],
                            },
                        },
                    ],
                },
            },
        ],
    };
    const WorkflowStatePayloadFragmentDoc = {
        kind: "Document",
        definitions: [
            {
                kind: "FragmentDefinition",
                name: { kind: "Name", value: "WorkflowStatePayload" },
                typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStatePayload" } },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        { kind: "Field", name: { kind: "Name", value: "lastSyncId" } },
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowState" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }],
                            },
                        },
                        { kind: "Field", name: { kind: "Name", value: "success" } },
                    ],
                },
            },
        ],
    };
    const AdministrableTeamsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "administrableTeams" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "administrableTeams" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamConnectionFragmentDoc.definitions,
            ...TeamFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AgentActivitiesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "agentActivities" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "agentActivities" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...AgentActivityConnectionFragmentDoc.definitions,
            ...AgentActivityFragmentDoc.definitions,
            ...AgentActivityActionContentFragmentDoc.definitions,
            ...AgentActivityElicitationContentFragmentDoc.definitions,
            ...AgentActivityErrorContentFragmentDoc.definitions,
            ...AgentActivityPromptContentFragmentDoc.definitions,
            ...AgentActivityResponseContentFragmentDoc.definitions,
            ...AgentActivityThoughtContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AgentActivityDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "agentActivity" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "agentActivity" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivity" } }],
                            },
                        },
                    ],
                },
            },
            ...AgentActivityFragmentDoc.definitions,
            ...AgentActivityActionContentFragmentDoc.definitions,
            ...AgentActivityElicitationContentFragmentDoc.definitions,
            ...AgentActivityErrorContentFragmentDoc.definitions,
            ...AgentActivityPromptContentFragmentDoc.definitions,
            ...AgentActivityResponseContentFragmentDoc.definitions,
            ...AgentActivityThoughtContentFragmentDoc.definitions,
        ],
    };
    const AgentSessionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "agentSession" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "agentSession" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentSession" } }],
                            },
                        },
                    ],
                },
            },
            ...AgentSessionFragmentDoc.definitions,
        ],
    };
    const AgentSession_ActivitiesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "agentSession_activities" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "agentSession" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "activities" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...AgentActivityConnectionFragmentDoc.definitions,
            ...AgentActivityFragmentDoc.definitions,
            ...AgentActivityActionContentFragmentDoc.definitions,
            ...AgentActivityElicitationContentFragmentDoc.definitions,
            ...AgentActivityErrorContentFragmentDoc.definitions,
            ...AgentActivityPromptContentFragmentDoc.definitions,
            ...AgentActivityResponseContentFragmentDoc.definitions,
            ...AgentActivityThoughtContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AgentSessionsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "agentSessions" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "agentSessions" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentSessionConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...AgentSessionConnectionFragmentDoc.definitions,
            ...AgentSessionFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ApiKeysDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "apiKeys" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "apiKeys" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKeyConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ApiKeyConnectionFragmentDoc.definitions,
            ...ApiKeyFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ApplicationInfoDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "applicationInfo" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "applicationInfo" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "clientId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Application" } }],
                            },
                        },
                    ],
                },
            },
            ...ApplicationFragmentDoc.definitions,
        ],
    };
    const ApplicationWithAuthorizationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "applicationWithAuthorization" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "actor" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "ListType",
                                type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                            },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "applicationWithAuthorization" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "actor" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "actor" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "clientId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "clientId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "scope" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAuthorizedApplication" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAuthorizedApplicationFragmentDoc.definitions,
        ],
    };
    const AttachmentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachment" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentFragmentDoc.definitions,
        ],
    };
    const AttachmentIssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_AttachmentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_attachments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "attachments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...AttachmentConnectionFragmentDoc.definitions,
            ...AttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_BotActorDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_botActor" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "botActor" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ActorBotFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_ChildrenDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_children" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "children" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_CommentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_comments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "comments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
            ...CommentFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...SyncedExternalThreadFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_FormerAttachmentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_formerAttachments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "formerAttachments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...AttachmentConnectionFragmentDoc.definitions,
            ...AttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_FormerNeedsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_formerNeeds" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "formerNeeds" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CustomerNeedConnectionFragmentDoc.definitions,
            ...CustomerNeedFragmentDoc.definitions,
            ...ProjectAttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_HistoryDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_history" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "history" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueHistoryConnectionFragmentDoc.definitions,
            ...IssueHistoryFragmentDoc.definitions,
            ...IssueRelationHistoryPayloadFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_InverseRelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_inverseRelations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "inverseRelations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationConnectionFragmentDoc.definitions,
            ...IssueRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_LabelsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_labels" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "labels" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelConnectionFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_NeedsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_needs" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "needs" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CustomerNeedConnectionFragmentDoc.definitions,
            ...CustomerNeedFragmentDoc.definitions,
            ...ProjectAttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_RelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_relations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "relations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationConnectionFragmentDoc.definitions,
            ...IssueRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentIssue_SubscribersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentIssue_subscribers" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "subscribers" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeDisabled" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachments" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentConnectionFragmentDoc.definitions,
            ...AttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AttachmentsForUrlDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "attachmentsForURL" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentsForURL" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentConnectionFragmentDoc.definitions,
            ...AttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AuditEntriesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "auditEntries" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "auditEntries" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntryConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...AuditEntryConnectionFragmentDoc.definitions,
            ...AuditEntryFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const AuditEntryTypesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "auditEntryTypes" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "auditEntryTypes" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntryType" } }],
                            },
                        },
                    ],
                },
            },
            ...AuditEntryTypeFragmentDoc.definitions,
        ],
    };
    const AuthenticationSessionsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "authenticationSessions" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "authenticationSessions" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthenticationSessionResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...AuthenticationSessionResponseFragmentDoc.definitions,
        ],
    };
    const AvailableUsersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "availableUsers" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "availableUsers" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...AuthResolverResponseFragmentDoc.definitions,
            ...AuthUserFragmentDoc.definitions,
            ...AuthOrganizationFragmentDoc.definitions,
        ],
    };
    const CommentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "comment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "hash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }],
                            },
                        },
                    ],
                },
            },
            ...CommentFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...SyncedExternalThreadFragmentDoc.definitions,
        ],
    };
    const Comment_BotActorDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "comment_botActor" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "hash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "botActor" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ActorBotFragmentDoc.definitions,
        ],
    };
    const Comment_ChildrenDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "comment_children" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "hash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "children" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
            ...CommentFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...SyncedExternalThreadFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Comment_DocumentContentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "comment_documentContent" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "hash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "documentContent" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...DocumentContentFragmentDoc.definitions,
        ],
    };
    const Comment_ExternalThreadDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "comment_externalThread" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comment" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "hash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "externalThread" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SyncedExternalThread" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...SyncedExternalThreadFragmentDoc.definitions,
        ],
    };
    const CommentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "comments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "comments" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
            ...CommentFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...SyncedExternalThreadFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const CustomViewDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customView" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomViewFragmentDoc.definitions,
            ...ViewPreferencesValuesFragmentDoc.definitions,
            ...ViewPreferencesFragmentDoc.definitions,
        ],
    };
    const CustomView_InitiativesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customView_initiatives" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "initiatives" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...InitiativeConnectionFragmentDoc.definitions,
            ...InitiativeFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const CustomView_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customView_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                        type: {
                            kind: "ListType",
                            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueSortInput" } } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeSubTeams" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "sort" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const CustomView_OrganizationViewPreferencesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customView_organizationViewPreferences" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "organizationViewPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ViewPreferencesFragmentDoc.definitions,
            ...ViewPreferencesValuesFragmentDoc.definitions,
        ],
    };
    const CustomView_OrganizationViewPreferences_PreferencesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customView_organizationViewPreferences_preferences" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "organizationViewPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "preferences" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            { kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ViewPreferencesValuesFragmentDoc.definitions,
        ],
    };
    const CustomView_ProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customView_projects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: { kind: "NamedType", name: { kind: "Name", value: "ProjectSortInput" } },
                            },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "projects" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeSubTeams" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "sort" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectConnectionFragmentDoc.definitions,
            ...ProjectFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const CustomView_UserViewPreferencesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customView_userViewPreferences" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "userViewPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ViewPreferencesFragmentDoc.definitions,
            ...ViewPreferencesValuesFragmentDoc.definitions,
        ],
    };
    const CustomView_UserViewPreferences_PreferencesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customView_userViewPreferences_preferences" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "userViewPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "preferences" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            { kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ViewPreferencesValuesFragmentDoc.definitions,
        ],
    };
    const CustomView_ViewPreferencesValuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customView_viewPreferencesValues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customView" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "viewPreferencesValues" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ViewPreferencesValuesFragmentDoc.definitions,
        ],
    };
    const CustomViewHasSubscribersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customViewHasSubscribers" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customViewHasSubscribers" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewHasSubscribersPayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CustomViewHasSubscribersPayloadFragmentDoc.definitions,
        ],
    };
    const CustomViewsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customViews" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewSortInput" } },
                            },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customViews" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "sort" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomViewConnectionFragmentDoc.definitions,
            ...CustomViewFragmentDoc.definitions,
            ...ViewPreferencesValuesFragmentDoc.definitions,
            ...ViewPreferencesFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const CustomerDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customer" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customer" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Customer" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerFragmentDoc.definitions,
        ],
    };
    const CustomerNeedDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customerNeed" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerNeed" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "hash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeed" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerNeedFragmentDoc.definitions,
            ...ProjectAttachmentFragmentDoc.definitions,
        ],
    };
    const CustomerNeed_ProjectAttachmentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customerNeed_projectAttachment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerNeed" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "hash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "hash" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "projectAttachment" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectAttachment" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectAttachmentFragmentDoc.definitions,
        ],
    };
    const CustomerNeedsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customerNeeds" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerNeeds" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerNeedConnectionFragmentDoc.definitions,
            ...CustomerNeedFragmentDoc.definitions,
            ...ProjectAttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const CustomerStatusDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customerStatus" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerStatus" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatus" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerStatusFragmentDoc.definitions,
        ],
    };
    const CustomerStatusesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customerStatuses" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerStatuses" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatusConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerStatusConnectionFragmentDoc.definitions,
            ...CustomerStatusFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const CustomerTierDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customerTier" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerTier" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTier" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerTierFragmentDoc.definitions,
        ],
    };
    const CustomerTiersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customerTiers" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerTiers" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTierConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerTierConnectionFragmentDoc.definitions,
            ...CustomerTierFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const CustomersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "customers" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CustomerFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sorts" } },
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: { kind: "NamedType", name: { kind: "Name", value: "CustomerSortInput" } },
                            },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customers" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "sorts" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "sorts" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerConnectionFragmentDoc.definitions,
            ...CustomerFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const CycleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "cycle" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }],
                            },
                        },
                    ],
                },
            },
            ...CycleFragmentDoc.definitions,
        ],
    };
    const Cycle_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "cycle_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Cycle_UncompletedIssuesUponCloseDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "cycle_uncompletedIssuesUponClose" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycle" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "uncompletedIssuesUponClose" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const CyclesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "cycles" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CycleFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycles" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...CycleConnectionFragmentDoc.definitions,
            ...CycleFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const DocumentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "document" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "document" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Document" } }],
                            },
                        },
                    ],
                },
            },
            ...DocumentFragmentDoc.definitions,
        ],
    };
    const Document_CommentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "document_comments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "document" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "comments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
            ...CommentFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...SyncedExternalThreadFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const DocumentContentHistoryDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "documentContentHistory" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentContentHistory" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContentHistoryPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DocumentContentHistoryPayloadFragmentDoc.definitions,
            ...DocumentContentHistoryTypeFragmentDoc.definitions,
        ],
    };
    const DocumentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "documents" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "DocumentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documents" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...DocumentConnectionFragmentDoc.definitions,
            ...DocumentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const EmailIntakeAddressDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "emailIntakeAddress" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailIntakeAddress" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddress" } }],
                            },
                        },
                    ],
                },
            },
            ...EmailIntakeAddressFragmentDoc.definitions,
            ...SesDomainIdentityFragmentDoc.definitions,
            ...SesDomainIdentityDnsRecordFragmentDoc.definitions,
        ],
    };
    const EmailIntakeAddress_SesDomainIdentityDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "emailIntakeAddress_sesDomainIdentity" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailIntakeAddress" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "sesDomainIdentity" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SesDomainIdentity" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...SesDomainIdentityFragmentDoc.definitions,
            ...SesDomainIdentityDnsRecordFragmentDoc.definitions,
        ],
    };
    const EmojiDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "emoji" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emoji" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }],
                            },
                        },
                    ],
                },
            },
            ...EmojiFragmentDoc.definitions,
        ],
    };
    const EmojisDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "emojis" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emojis" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...EmojiConnectionFragmentDoc.definitions,
            ...EmojiFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const EntityExternalLinkDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "entityExternalLink" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entityExternalLink" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLink" } }],
                            },
                        },
                    ],
                },
            },
            ...EntityExternalLinkFragmentDoc.definitions,
        ],
    };
    const ExternalUserDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "externalUser" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUser" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUser" } }],
                            },
                        },
                    ],
                },
            },
            ...ExternalUserFragmentDoc.definitions,
        ],
    };
    const ExternalUsersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "externalUsers" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "externalUsers" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUserConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ExternalUserConnectionFragmentDoc.definitions,
            ...ExternalUserFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const FavoriteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "favorite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favorite" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }],
                            },
                        },
                    ],
                },
            },
            ...FavoriteFragmentDoc.definitions,
        ],
    };
    const Favorite_ChildrenDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "favorite_children" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favorite" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "children" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoriteConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...FavoriteConnectionFragmentDoc.definitions,
            ...FavoriteFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const FavoritesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "favorites" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favorites" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoriteConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...FavoriteConnectionFragmentDoc.definitions,
            ...FavoriteFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const InitiativeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiative" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Initiative" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
        ],
    };
    const Initiative_DocumentContentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiative_documentContent" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "documentContent" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...DocumentContentFragmentDoc.definitions,
        ],
    };
    const Initiative_DocumentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiative_documents" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "DocumentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "documents" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...DocumentConnectionFragmentDoc.definitions,
            ...DocumentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Initiative_HistoryDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiative_history" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "history" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeHistoryConnection" } },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...InitiativeHistoryConnectionFragmentDoc.definitions,
            ...InitiativeHistoryFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Initiative_LinksDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiative_links" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "links" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkConnection" } },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...EntityExternalLinkConnectionFragmentDoc.definitions,
            ...EntityExternalLinkFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Initiative_ProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiative_projects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeSubInitiatives" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: { kind: "NamedType", name: { kind: "Name", value: "ProjectSortInput" } },
                            },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "projects" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeSubInitiatives" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeSubInitiatives" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "sort" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectConnectionFragmentDoc.definitions,
            ...ProjectFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Initiative_SubInitiativesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiative_subInitiatives" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeSortInput" } },
                            },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiative" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "subInitiatives" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "sort" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...InitiativeConnectionFragmentDoc.definitions,
            ...InitiativeFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const InitiativeRelationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiativeRelation" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeRelation" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelation" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectRelationFragmentDoc.definitions,
        ],
    };
    const InitiativeRelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiativeRelations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeRelations" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeRelationConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeRelationConnectionFragmentDoc.definitions,
            ...InitiativeRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const InitiativeToProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiativeToProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeToProject" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProject" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeToProjectFragmentDoc.definitions,
        ],
    };
    const InitiativeToProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiativeToProjects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeToProjects" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProjectConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeToProjectConnectionFragmentDoc.definitions,
            ...InitiativeToProjectFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const InitiativeUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiativeUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdate" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeUpdateFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
        ],
    };
    const InitiativeUpdate_CommentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiativeUpdate_comments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "comments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
            ...CommentFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...SyncedExternalThreadFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const InitiativeUpdatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiativeUpdates" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeUpdates" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeUpdateConnectionFragmentDoc.definitions,
            ...InitiativeUpdateFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const InitiativesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "initiatives" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeSortInput" } },
                            },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiatives" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "sort" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeConnectionFragmentDoc.definitions,
            ...InitiativeFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IntegrationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "integration" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integration" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationFragmentDoc.definitions,
        ],
    };
    const IntegrationHasScopesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "integrationHasScopes" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "integrationId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "scopes" } },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "ListType",
                                type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                            },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationHasScopes" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "integrationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "integrationId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "scopes" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "scopes" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationHasScopesPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationHasScopesPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationTemplateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "integrationTemplate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationTemplate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplate" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationTemplateFragmentDoc.definitions,
        ],
    };
    const IntegrationTemplatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "integrationTemplates" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationTemplates" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplateConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationTemplateConnectionFragmentDoc.definitions,
            ...IntegrationTemplateFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IntegrationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "integrations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrations" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationConnectionFragmentDoc.definitions,
            ...IntegrationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IntegrationsSettingsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "integrationsSettings" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationsSettings" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettings" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationsSettingsFragmentDoc.definitions,
        ],
    };
    const IssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
        ],
    };
    const Issue_AttachmentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_attachments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "attachments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...AttachmentConnectionFragmentDoc.definitions,
            ...AttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Issue_BotActorDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_botActor" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "botActor" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ActorBotFragmentDoc.definitions,
        ],
    };
    const Issue_ChildrenDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_children" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "children" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Issue_CommentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_comments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "comments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
            ...CommentFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...SyncedExternalThreadFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Issue_FormerAttachmentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_formerAttachments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "formerAttachments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...AttachmentConnectionFragmentDoc.definitions,
            ...AttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Issue_FormerNeedsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_formerNeeds" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "formerNeeds" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CustomerNeedConnectionFragmentDoc.definitions,
            ...CustomerNeedFragmentDoc.definitions,
            ...ProjectAttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Issue_HistoryDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_history" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "history" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueHistoryConnectionFragmentDoc.definitions,
            ...IssueHistoryFragmentDoc.definitions,
            ...IssueRelationHistoryPayloadFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Issue_InverseRelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_inverseRelations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "inverseRelations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationConnectionFragmentDoc.definitions,
            ...IssueRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Issue_LabelsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_labels" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "labels" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelConnectionFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Issue_NeedsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_needs" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "needs" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CustomerNeedConnectionFragmentDoc.definitions,
            ...CustomerNeedFragmentDoc.definitions,
            ...ProjectAttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Issue_RelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_relations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "relations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationConnectionFragmentDoc.definitions,
            ...IssueRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Issue_SubscribersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issue_subscribers" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "subscribers" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeDisabled" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueFigmaFileKeySearchDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueFigmaFileKeySearch" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "fileKey" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueFigmaFileKeySearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "fileKey" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "fileKey" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueFilterSuggestionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueFilterSuggestion" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "prompt" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueFilterSuggestion" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "projectId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "prompt" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "prompt" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueFilterSuggestionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueFilterSuggestionPayloadFragmentDoc.definitions,
        ],
    };
    const IssueImportCheckCsvDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueImportCheckCSV" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "service" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportCheckCSV" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "csvUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "service" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "service" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportCheckPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportCheckPayloadFragmentDoc.definitions,
        ],
    };
    const IssueImportCheckSyncDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueImportCheckSync" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportCheckSync" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueImportId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportSyncCheckPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportSyncCheckPayloadFragmentDoc.definitions,
        ],
    };
    const IssueImportJqlCheckDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueImportJqlCheck" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jql" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportJqlCheck" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraEmail" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraHostname" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraProject" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraToken" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jql" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jql" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportJqlCheckPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportJqlCheckPayloadFragmentDoc.definitions,
        ],
    };
    const IssueLabelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueLabel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabel" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelFragmentDoc.definitions,
        ],
    };
    const IssueLabel_ChildrenDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueLabel_children" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabel" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "children" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelConnectionFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueLabel_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueLabel_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabel" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueLabelsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueLabels" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabels" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelConnectionFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssuePriorityValuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issuePriorityValues" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issuePriorityValues" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePriorityValue" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePriorityValueFragmentDoc.definitions,
        ],
    };
    const IssueRelationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueRelation" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRelation" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationFragmentDoc.definitions,
        ],
    };
    const IssueRelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueRelations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRelations" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationConnectionFragmentDoc.definitions,
            ...IssueRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueSearchDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueSearch" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "query" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "query" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "query" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueTitleSuggestionFromCustomerRequestDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueTitleSuggestionFromCustomerRequest" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "request" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueTitleSuggestionFromCustomerRequest" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "request" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "request" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "FragmentSpread",
                                        name: { kind: "Name", value: "IssueTitleSuggestionFromCustomerRequestPayload" },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueTitleSuggestionFromCustomerRequestPayloadFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearchDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_AttachmentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_attachments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "attachments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...AttachmentConnectionFragmentDoc.definitions,
            ...AttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_BotActorDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_botActor" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "botActor" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ActorBotFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_ChildrenDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_children" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "children" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_CommentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_comments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "comments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
            ...CommentFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...SyncedExternalThreadFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_FormerAttachmentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_formerAttachments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "formerAttachments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...AttachmentConnectionFragmentDoc.definitions,
            ...AttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_FormerNeedsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_formerNeeds" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "formerNeeds" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CustomerNeedConnectionFragmentDoc.definitions,
            ...CustomerNeedFragmentDoc.definitions,
            ...ProjectAttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_HistoryDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_history" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "history" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueHistoryConnectionFragmentDoc.definitions,
            ...IssueHistoryFragmentDoc.definitions,
            ...IssueRelationHistoryPayloadFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_InverseRelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_inverseRelations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "inverseRelations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationConnectionFragmentDoc.definitions,
            ...IssueRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_LabelsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_labels" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "labels" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelConnectionFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_NeedsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_needs" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "needs" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CustomerNeedConnectionFragmentDoc.definitions,
            ...CustomerNeedFragmentDoc.definitions,
            ...ProjectAttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_RelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_relations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "relations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationConnectionFragmentDoc.definitions,
            ...IssueRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssueVcsBranchSearch_SubscribersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issueVcsBranchSearch_subscribers" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueVcsBranchSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "branchName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "branchName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "subscribers" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeDisabled" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                        type: {
                            kind: "ListType",
                            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueSortInput" } } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issues" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "sort" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const NotificationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "notification" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notification" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...CustomerNeedNotificationFragmentDoc.definitions,
            ...CustomerNotificationFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...PostNotificationFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
            ...PullRequestNotificationFragmentDoc.definitions,
        ],
    };
    const NotificationSubscriptionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "notificationSubscription" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationSubscription" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationSubscriptionFragmentDoc.definitions,
        ],
    };
    const NotificationSubscriptionsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "notificationSubscriptions" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationSubscriptions" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionConnection" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationSubscriptionConnectionFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const NotificationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "notifications" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "NotificationFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notifications" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationConnectionFragmentDoc.definitions,
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...CustomerNeedNotificationFragmentDoc.definitions,
            ...CustomerNotificationFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...PostNotificationFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
            ...PullRequestNotificationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const OrganizationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Organization" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationFragmentDoc.definitions,
            ...OrganizationIpRestrictionFragmentDoc.definitions,
            ...ProjectStatusFragmentDoc.definitions,
            ...PaidSubscriptionFragmentDoc.definitions,
        ],
    };
    const Organization_IntegrationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization_integrations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "integrations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IntegrationConnectionFragmentDoc.definitions,
            ...IntegrationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Organization_LabelsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization_labels" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "labels" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelConnectionFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Organization_ProjectLabelsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization_projectLabels" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "projectLabels" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabelConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectLabelConnectionFragmentDoc.definitions,
            ...ProjectLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Organization_SubscriptionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization_subscription" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "subscription" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PaidSubscription" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...PaidSubscriptionFragmentDoc.definitions,
        ],
    };
    const Organization_TeamsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization_teams" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "teams" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamConnectionFragmentDoc.definitions,
            ...TeamFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Organization_TemplatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization_templates" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "NullableTemplateFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "templates" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplateConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TemplateConnectionFragmentDoc.definitions,
            ...TemplateFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Organization_UsersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organization_users" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organization" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "users" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeDisabled" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const OrganizationExistsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organizationExists" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "urlKey" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationExists" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "urlKey" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "urlKey" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationExistsPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationExistsPayloadFragmentDoc.definitions,
        ],
    };
    const OrganizationInviteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organizationInvite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationInvite" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationInviteFragmentDoc.definitions,
        ],
    };
    const OrganizationInvitesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "organizationInvites" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationInvites" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInviteConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationInviteConnectionFragmentDoc.definitions,
            ...OrganizationInviteFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
        ],
    };
    const Project_CommentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_comments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "comments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
            ...CommentFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...SyncedExternalThreadFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_DocumentContentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_documentContent" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "documentContent" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...DocumentContentFragmentDoc.definitions,
        ],
    };
    const Project_DocumentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_documents" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "DocumentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "documents" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...DocumentConnectionFragmentDoc.definitions,
            ...DocumentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_ExternalLinksDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_externalLinks" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "externalLinks" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkConnection" } },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...EntityExternalLinkConnectionFragmentDoc.definitions,
            ...EntityExternalLinkFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_HistoryDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_history" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "history" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectHistoryConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectHistoryConnectionFragmentDoc.definitions,
            ...ProjectHistoryFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_InitiativesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_initiatives" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "initiatives" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...InitiativeConnectionFragmentDoc.definitions,
            ...InitiativeFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_InverseRelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_inverseRelations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "inverseRelations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationConnection" } },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectRelationConnectionFragmentDoc.definitions,
            ...ProjectRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_LabelsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_labels" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "labels" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabelConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectLabelConnectionFragmentDoc.definitions,
            ...ProjectLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_MembersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_members" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "members" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeDisabled" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_NeedsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_needs" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "needs" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CustomerNeedConnectionFragmentDoc.definitions,
            ...CustomerNeedFragmentDoc.definitions,
            ...ProjectAttachmentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_ProjectMilestonesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_projectMilestones" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "projectMilestones" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneConnection" } },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectMilestoneConnectionFragmentDoc.definitions,
            ...ProjectMilestoneFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_ProjectUpdatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_projectUpdates" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "projectUpdates" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectUpdateConnectionFragmentDoc.definitions,
            ...ProjectUpdateFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_RelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_relations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "relations" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationConnection" } },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectRelationConnectionFragmentDoc.definitions,
            ...ProjectRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Project_TeamsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "project_teams" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "project" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "teams" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamConnectionFragmentDoc.definitions,
            ...TeamFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectFilterSuggestionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectFilterSuggestion" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "prompt" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectFilterSuggestion" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "prompt" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "prompt" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectFilterSuggestionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectFilterSuggestionPayloadFragmentDoc.definitions,
        ],
    };
    const ProjectLabelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectLabel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLabel" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabel" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectLabelFragmentDoc.definitions,
        ],
    };
    const ProjectLabel_ChildrenDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectLabel_children" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLabel" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "children" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabelConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectLabelConnectionFragmentDoc.definitions,
            ...ProjectLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectLabel_ProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectLabel_projects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: { kind: "NamedType", name: { kind: "Name", value: "ProjectSortInput" } },
                            },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLabel" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "projects" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "sort" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectConnectionFragmentDoc.definitions,
            ...ProjectFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectLabelsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectLabels" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLabels" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabelConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectLabelConnectionFragmentDoc.definitions,
            ...ProjectLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectMilestoneDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectMilestone" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestone" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestone" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectMilestoneFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
        ],
    };
    const ProjectMilestone_DocumentContentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectMilestone_documentContent" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestone" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "documentContent" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...DocumentContentFragmentDoc.definitions,
        ],
    };
    const ProjectMilestone_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectMilestone_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestone" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectMilestonesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectMilestones" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestones" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectMilestoneConnectionFragmentDoc.definitions,
            ...ProjectMilestoneFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectRelationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectRelation" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectRelation" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelation" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectRelationFragmentDoc.definitions,
        ],
    };
    const ProjectRelationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectRelations" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectRelations" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectRelationConnectionFragmentDoc.definitions,
            ...ProjectRelationFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectStatusDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectStatus" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectStatus" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectStatusFragmentDoc.definitions,
        ],
    };
    const ProjectStatusesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectStatuses" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectStatuses" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectStatusConnectionFragmentDoc.definitions,
            ...ProjectStatusFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdate" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectUpdateFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
        ],
    };
    const ProjectUpdate_CommentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectUpdate_comments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "comments" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CommentConnectionFragmentDoc.definitions,
            ...CommentFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...SyncedExternalThreadFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectUpdatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projectUpdates" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdates" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectUpdateConnectionFragmentDoc.definitions,
            ...ProjectUpdateFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const ProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "projects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: { kind: "NamedType", name: { kind: "Name", value: "ProjectSortInput" } },
                            },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projects" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "sort" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectConnectionFragmentDoc.definitions,
            ...ProjectFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const PushSubscriptionTestDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "pushSubscriptionTest" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sendStrategy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "SendStrategy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "targetMobile" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pushSubscriptionTest" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "sendStrategy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "sendStrategy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "targetMobile" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "targetMobile" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionTestPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...PushSubscriptionTestPayloadFragmentDoc.definitions,
        ],
    };
    const RateLimitStatusDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "rateLimitStatus" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "rateLimitStatus" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RateLimitPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...RateLimitPayloadFragmentDoc.definitions,
            ...RateLimitResultPayloadFragmentDoc.definitions,
        ],
    };
    const RoadmapDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "roadmap" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmap" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Roadmap" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapFragmentDoc.definitions,
        ],
    };
    const Roadmap_ProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "roadmap_projects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmap" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "projects" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectConnectionFragmentDoc.definitions,
            ...ProjectFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const RoadmapToProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "roadmapToProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapToProject" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProject" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapToProjectFragmentDoc.definitions,
        ],
    };
    const RoadmapToProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "roadmapToProjects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapToProjects" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapToProjectConnectionFragmentDoc.definitions,
            ...RoadmapToProjectFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const RoadmapsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "roadmaps" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmaps" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapConnectionFragmentDoc.definitions,
            ...RoadmapFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const SearchDocumentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "searchDocuments" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "term" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "searchDocuments" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeComments" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "term" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "term" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentSearchPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DocumentSearchPayloadFragmentDoc.definitions,
            ...ArchiveResponseFragmentDoc.definitions,
            ...DocumentSearchResultFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const SearchDocuments_ArchivePayloadDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "searchDocuments_archivePayload" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "term" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "searchDocuments" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeComments" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "term" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "term" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "archivePayload" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ArchiveResponseFragmentDoc.definitions,
        ],
    };
    const SearchIssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "searchIssues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "term" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "searchIssues" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeComments" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "term" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "term" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSearchPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueSearchPayloadFragmentDoc.definitions,
            ...ArchiveResponseFragmentDoc.definitions,
            ...IssueSearchResultFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const SearchIssues_ArchivePayloadDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "searchIssues_archivePayload" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "term" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "searchIssues" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeComments" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "term" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "term" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "archivePayload" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ArchiveResponseFragmentDoc.definitions,
        ],
    };
    const SearchProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "searchProjects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "term" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "searchProjects" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeComments" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "term" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "term" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectSearchPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectSearchPayloadFragmentDoc.definitions,
            ...ArchiveResponseFragmentDoc.definitions,
            ...ProjectSearchResultFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const SearchProjects_ArchivePayloadDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "searchProjects_archivePayload" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "term" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "searchProjects" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeComments" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "term" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "term" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "archivePayload" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ArchiveResponseFragmentDoc.definitions,
        ],
    };
    const SemanticSearchDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "semanticSearch" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filters" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "SemanticSearchFilters" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "maxResults" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "query" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "types" } },
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: { kind: "NamedType", name: { kind: "Name", value: "SemanticSearchResultType" } },
                            },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "semanticSearch" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filters" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filters" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "maxResults" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "maxResults" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "query" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "query" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "types" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "types" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SemanticSearchPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...SemanticSearchPayloadFragmentDoc.definitions,
            ...SemanticSearchResultFragmentDoc.definitions,
        ],
    };
    const SsoUrlFromEmailDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "ssoUrlFromEmail" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "email" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "ssoUrlFromEmail" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "email" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "email" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "isDesktop" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...SsoUrlFromEmailResponseFragmentDoc.definitions,
        ],
    };
    const TeamDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamFragmentDoc.definitions,
        ],
    };
    const Team_CyclesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_cycles" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "CycleFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "cycles" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CycleConnectionFragmentDoc.definitions,
            ...CycleFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Team_GitAutomationStatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_gitAutomationStates" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "gitAutomationStates" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationStateConnection" } },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...GitAutomationStateConnectionFragmentDoc.definitions,
            ...GitAutomationStateFragmentDoc.definitions,
            ...GitAutomationTargetBranchFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Team_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeSubTeams" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Team_LabelsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_labels" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "labels" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelConnectionFragmentDoc.definitions,
            ...IssueLabelFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Team_MembersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_members" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "members" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeDisabled" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Team_MembershipsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_memberships" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "memberships" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipConnectionFragmentDoc.definitions,
            ...TeamMembershipFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Team_ProjectsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_projects" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                        type: {
                            kind: "ListType",
                            type: {
                                kind: "NonNullType",
                                type: { kind: "NamedType", name: { kind: "Name", value: "ProjectSortInput" } },
                            },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "projects" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeSubTeams" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "sort" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...ProjectConnectionFragmentDoc.definitions,
            ...ProjectFragmentDoc.definitions,
            ...DocumentContentFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Team_StatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_states" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "states" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...WorkflowStateConnectionFragmentDoc.definitions,
            ...WorkflowStateFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Team_TemplatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_templates" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "NullableTemplateFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "templates" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplateConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TemplateConnectionFragmentDoc.definitions,
            ...TemplateFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Team_WebhooksDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "team_webhooks" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "team" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "webhooks" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...WebhookConnectionFragmentDoc.definitions,
            ...WebhookFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const TeamMembershipDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "teamMembership" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamMembership" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipFragmentDoc.definitions,
        ],
    };
    const TeamMembershipsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "teamMemberships" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamMemberships" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipConnectionFragmentDoc.definitions,
            ...TeamMembershipFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const TeamsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "teams" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teams" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamConnectionFragmentDoc.definitions,
            ...TeamFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const TemplateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "template" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "template" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }],
                            },
                        },
                    ],
                },
            },
            ...TemplateFragmentDoc.definitions,
        ],
    };
    const TemplatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "templates" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "templates" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }],
                            },
                        },
                    ],
                },
            },
            ...TemplateFragmentDoc.definitions,
        ],
    };
    const TemplatesForIntegrationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "templatesForIntegration" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "integrationType" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "templatesForIntegration" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "integrationType" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "integrationType" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }],
                            },
                        },
                    ],
                },
            },
            ...TemplateFragmentDoc.definitions,
        ],
    };
    const TimeScheduleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "timeSchedule" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "timeSchedule" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedule" } }],
                            },
                        },
                    ],
                },
            },
            ...TimeScheduleFragmentDoc.definitions,
            ...TimeScheduleEntryFragmentDoc.definitions,
        ],
    };
    const TimeSchedulesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "timeSchedules" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "timeSchedules" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeScheduleConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...TimeScheduleConnectionFragmentDoc.definitions,
            ...TimeScheduleFragmentDoc.definitions,
            ...TimeScheduleEntryFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const TriageResponsibilitiesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "triageResponsibilities" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageResponsibilities" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...TriageResponsibilityConnectionFragmentDoc.definitions,
            ...TriageResponsibilityFragmentDoc.definitions,
            ...TriageResponsibilityManualSelectionFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const TriageResponsibilityDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "triageResponsibility" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageResponsibility" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibility" } }],
                            },
                        },
                    ],
                },
            },
            ...TriageResponsibilityFragmentDoc.definitions,
            ...TriageResponsibilityManualSelectionFragmentDoc.definitions,
        ],
    };
    const TriageResponsibility_ManualSelectionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "triageResponsibility_manualSelection" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageResponsibility" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "manualSelection" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityManualSelection" } },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TriageResponsibilityManualSelectionFragmentDoc.definitions,
        ],
    };
    const UserDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "user" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                            },
                        },
                    ],
                },
            },
            ...UserFragmentDoc.definitions,
        ],
    };
    const User_AssignedIssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "user_assignedIssues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "assignedIssues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const User_CreatedIssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "user_createdIssues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "createdIssues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const User_DelegatedIssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "user_delegatedIssues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "delegatedIssues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const User_DraftsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "user_drafts" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "drafts" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DraftConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...DraftConnectionFragmentDoc.definitions,
            ...DraftFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const User_TeamMembershipsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "user_teamMemberships" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "teamMemberships" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipConnectionFragmentDoc.definitions,
            ...TeamMembershipFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const User_TeamsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "user_teams" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "user" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "teams" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamConnectionFragmentDoc.definitions,
            ...TeamFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const UserSettingsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettings" } }],
                            },
                        },
                    ],
                },
            },
            ...UserSettingsFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesChannelFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesScheduleFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
            ...NotificationCategoryPreferencesFragmentDoc.definitions,
            ...NotificationChannelPreferencesFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationCategoryPreferencesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationCategoryPreferences" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationCategoryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationCategoryPreferences" } },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationCategoryPreferencesFragmentDoc.definitions,
            ...NotificationChannelPreferencesFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationCategoryPreferences_AppsAndIntegrationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_appsAndIntegrations" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationCategoryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "appsAndIntegrations" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationChannelPreferencesFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationCategoryPreferences_AssignmentsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_assignments" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationCategoryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "assignments" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationChannelPreferencesFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationCategoryPreferences_CommentsAndRepliesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_commentsAndReplies" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationCategoryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "commentsAndReplies" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationChannelPreferencesFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationCategoryPreferences_CustomersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_customers" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationCategoryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "customers" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationChannelPreferencesFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationCategoryPreferences_DocumentChangesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_documentChanges" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationCategoryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "documentChanges" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationChannelPreferencesFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationCategoryPreferences_FeedDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_feed" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationCategoryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "feed" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationChannelPreferencesFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationCategoryPreferences_MentionsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_mentions" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationCategoryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "mentions" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationChannelPreferencesFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationCategoryPreferences_PostsAndUpdatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_postsAndUpdates" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationCategoryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "postsAndUpdates" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationChannelPreferencesFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationCategoryPreferences_ReactionsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_reactions" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationCategoryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "reactions" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationChannelPreferencesFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationCategoryPreferences_RemindersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_reminders" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationCategoryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "reminders" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationChannelPreferencesFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationCategoryPreferences_ReviewsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_reviews" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationCategoryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "reviews" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationChannelPreferencesFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationCategoryPreferences_StatusChangesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_statusChanges" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationCategoryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "statusChanges" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationChannelPreferencesFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationCategoryPreferences_SubscriptionsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_subscriptions" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationCategoryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "subscriptions" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationChannelPreferencesFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationCategoryPreferences_SystemDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_system" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationCategoryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "system" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationChannelPreferencesFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationCategoryPreferences_TriageDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_triage" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationCategoryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "triage" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationChannelPreferencesFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationChannelPreferencesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationChannelPreferences" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationChannelPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationChannelPreferencesFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferencesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferences" } },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesChannelFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesScheduleFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferences_MobileDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "mobile" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            {
                                                                kind: "FragmentSpread",
                                                                name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" },
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesChannelFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesScheduleFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "mobile" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            {
                                                                kind: "Field",
                                                                name: { kind: "Name", value: "schedule" },
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [
                                                                        {
                                                                            kind: "FragmentSpread",
                                                                            name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" },
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesScheduleFragmentDoc.definitions,
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_friday" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "mobile" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            {
                                                                kind: "Field",
                                                                name: { kind: "Name", value: "schedule" },
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [
                                                                        {
                                                                            kind: "Field",
                                                                            name: { kind: "Name", value: "friday" },
                                                                            selectionSet: {
                                                                                kind: "SelectionSet",
                                                                                selections: [
                                                                                    {
                                                                                        kind: "FragmentSpread",
                                                                                        name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_monday" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "mobile" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            {
                                                                kind: "Field",
                                                                name: { kind: "Name", value: "schedule" },
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [
                                                                        {
                                                                            kind: "Field",
                                                                            name: { kind: "Name", value: "monday" },
                                                                            selectionSet: {
                                                                                kind: "SelectionSet",
                                                                                selections: [
                                                                                    {
                                                                                        kind: "FragmentSpread",
                                                                                        name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_saturday" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "mobile" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            {
                                                                kind: "Field",
                                                                name: { kind: "Name", value: "schedule" },
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [
                                                                        {
                                                                            kind: "Field",
                                                                            name: { kind: "Name", value: "saturday" },
                                                                            selectionSet: {
                                                                                kind: "SelectionSet",
                                                                                selections: [
                                                                                    {
                                                                                        kind: "FragmentSpread",
                                                                                        name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_sunday" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "mobile" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            {
                                                                kind: "Field",
                                                                name: { kind: "Name", value: "schedule" },
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [
                                                                        {
                                                                            kind: "Field",
                                                                            name: { kind: "Name", value: "sunday" },
                                                                            selectionSet: {
                                                                                kind: "SelectionSet",
                                                                                selections: [
                                                                                    {
                                                                                        kind: "FragmentSpread",
                                                                                        name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_thursday" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "mobile" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            {
                                                                kind: "Field",
                                                                name: { kind: "Name", value: "schedule" },
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [
                                                                        {
                                                                            kind: "Field",
                                                                            name: { kind: "Name", value: "thursday" },
                                                                            selectionSet: {
                                                                                kind: "SelectionSet",
                                                                                selections: [
                                                                                    {
                                                                                        kind: "FragmentSpread",
                                                                                        name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_tuesday" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "mobile" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            {
                                                                kind: "Field",
                                                                name: { kind: "Name", value: "schedule" },
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [
                                                                        {
                                                                            kind: "Field",
                                                                            name: { kind: "Name", value: "tuesday" },
                                                                            selectionSet: {
                                                                                kind: "SelectionSet",
                                                                                selections: [
                                                                                    {
                                                                                        kind: "FragmentSpread",
                                                                                        name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_wednesday" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettings" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "notificationDeliveryPreferences" },
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [
                                                {
                                                    kind: "Field",
                                                    name: { kind: "Name", value: "mobile" },
                                                    selectionSet: {
                                                        kind: "SelectionSet",
                                                        selections: [
                                                            {
                                                                kind: "Field",
                                                                name: { kind: "Name", value: "schedule" },
                                                                selectionSet: {
                                                                    kind: "SelectionSet",
                                                                    selections: [
                                                                        {
                                                                            kind: "Field",
                                                                            name: { kind: "Name", value: "wednesday" },
                                                                            selectionSet: {
                                                                                kind: "SelectionSet",
                                                                                selections: [
                                                                                    {
                                                                                        kind: "FragmentSpread",
                                                                                        name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" },
                                                                                    },
                                                                                ],
                                                                            },
                                                                        },
                                                                    ],
                                                                },
                                                            },
                                                        ],
                                                    },
                                                },
                                            ],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationDeliveryPreferencesDayFragmentDoc.definitions,
        ],
    };
    const UsersDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "users" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                        type: {
                            kind: "ListType",
                            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserSortInput" } } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "users" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeDisabled" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "sort" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "sort" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...UserConnectionFragmentDoc.definitions,
            ...UserFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const VerifyGitHubEnterpriseServerInstallationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "verifyGitHubEnterpriseServerInstallation" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "integrationId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "verifyGitHubEnterpriseServerInstallation" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "integrationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "integrationId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "FragmentSpread",
                                        name: { kind: "Name", value: "GitHubEnterpriseServerInstallVerificationPayload" },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...GitHubEnterpriseServerInstallVerificationPayloadFragmentDoc.definitions,
        ],
    };
    const ViewerDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "viewer" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }],
                            },
                        },
                    ],
                },
            },
            ...UserFragmentDoc.definitions,
        ],
    };
    const Viewer_AssignedIssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "viewer_assignedIssues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "assignedIssues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Viewer_CreatedIssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "viewer_createdIssues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "createdIssues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Viewer_DelegatedIssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "viewer_delegatedIssues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "delegatedIssues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Viewer_DraftsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "viewer_drafts" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "drafts" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DraftConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...DraftConnectionFragmentDoc.definitions,
            ...DraftFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Viewer_TeamMembershipsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "viewer_teamMemberships" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "teamMemberships" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipConnectionFragmentDoc.definitions,
            ...TeamMembershipFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const Viewer_TeamsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "viewer_teams" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewer" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "teams" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...TeamConnectionFragmentDoc.definitions,
            ...TeamFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const WebhookDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "webhook" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhook" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }],
                            },
                        },
                    ],
                },
            },
            ...WebhookFragmentDoc.definitions,
        ],
    };
    const WebhooksDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "webhooks" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhooks" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...WebhookConnectionFragmentDoc.definitions,
            ...WebhookFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const WorkflowStateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "workflowState" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowState" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }],
                            },
                        },
                    ],
                },
            },
            ...WorkflowStateFragmentDoc.definitions,
        ],
    };
    const WorkflowState_IssuesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "workflowState_issues" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowState" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    {
                                        kind: "Field",
                                        name: { kind: "Name", value: "issues" },
                                        arguments: [
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "after" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "before" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "filter" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "first" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "includeArchived" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "last" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                            },
                                            {
                                                kind: "Argument",
                                                name: { kind: "Name", value: "orderBy" },
                                                value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                            },
                                        ],
                                        selectionSet: {
                                            kind: "SelectionSet",
                                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }],
                                        },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IssueConnectionFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const WorkflowStatesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "query",
                name: { kind: "Name", value: "workflowStates" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "after" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "before" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateFilter" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "first" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "last" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowStates" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "after" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "after" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "before" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "before" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filter" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filter" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "first" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "first" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeArchived" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "last" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "last" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "orderBy" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }],
                            },
                        },
                    ],
                },
            },
            ...WorkflowStateConnectionFragmentDoc.definitions,
            ...WorkflowStateFragmentDoc.definitions,
            ...PageInfoFragmentDoc.definitions,
        ],
    };
    const CreateAgentActivityDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createAgentActivity" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "AgentActivityCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "agentActivityCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentActivityPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AgentActivityPayloadFragmentDoc.definitions,
        ],
    };
    const AgentSessionCreateOnCommentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "agentSessionCreateOnComment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "AgentSessionCreateOnComment" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "agentSessionCreateOnComment" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentSessionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AgentSessionPayloadFragmentDoc.definitions,
        ],
    };
    const AgentSessionCreateOnIssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "agentSessionCreateOnIssue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "AgentSessionCreateOnIssue" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "agentSessionCreateOnIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentSessionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AgentSessionPayloadFragmentDoc.definitions,
        ],
    };
    const AgentSessionUpdateExternalUrlDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "agentSessionUpdateExternalUrl" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "AgentSessionUpdateExternalUrlInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "agentSessionUpdateExternalUrl" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AgentSessionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AgentSessionPayloadFragmentDoc.definitions,
        ],
    };
    const AirbyteIntegrationConnectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "airbyteIntegrationConnect" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "AirbyteConfigurationInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "airbyteIntegrationConnect" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const CreateAttachmentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createAttachment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteAttachmentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteAttachment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkDiscordDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkDiscord" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "channelId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "messageId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkDiscord" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "channelId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "channelId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "messageId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "messageId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkFrontDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkFront" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkFront" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "conversationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FrontAttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...FrontAttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkGitHubIssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkGitHubIssue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkGitHubIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkGitHubPrDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkGitHubPR" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "linkKind" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "GitLinkKind" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkGitHubPR" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "linkKind" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "linkKind" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkGitLabMrDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkGitLabMR" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "number" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Float" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "projectPathWithNamespace" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkGitLabMR" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "number" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "number" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "projectPathWithNamespace" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "projectPathWithNamespace" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkIntercomDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkIntercom" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "partId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkIntercom" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "conversationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "conversationId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "partId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "partId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkJiraIssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkJiraIssue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraIssueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkJiraIssue" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraIssueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraIssueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkSalesforceDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkSalesforce" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkSalesforce" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkSlackDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkSlack" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "syncToCommentThread" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkSlack" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "syncToCommentThread" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "syncToCommentThread" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkUrlDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkURL" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkURL" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentLinkZendeskDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentLinkZendesk" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "ticketId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "title" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentLinkZendesk" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "createAsUser" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "displayIconUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "ticketId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "ticketId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "title" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "title" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const AttachmentSyncToSlackDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "attachmentSyncToSlack" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentSyncToSlack" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const UpdateAttachmentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateAttachment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "attachmentUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AttachmentPayloadFragmentDoc.definitions,
        ],
    };
    const CreateCommentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createComment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CommentCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "commentCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CommentPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteCommentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteComment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "commentDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const CommentResolveDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "commentResolve" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "resolvingCommentId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "commentResolve" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "resolvingCommentId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "resolvingCommentId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CommentPayloadFragmentDoc.definitions,
        ],
    };
    const CommentUnresolveDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "commentUnresolve" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "commentUnresolve" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CommentPayloadFragmentDoc.definitions,
        ],
    };
    const UpdateCommentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateComment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CommentUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "commentUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CommentPayloadFragmentDoc.definitions,
        ],
    };
    const CreateContactDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createContact" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ContactCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "contactCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ContactPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ContactPayloadFragmentDoc.definitions,
        ],
    };
    const CreateCsvExportReportDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createCsvExportReport" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } },
                        type: {
                            kind: "ListType",
                            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "createCsvExportReport" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includePrivateTeamIds" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateCsvExportReportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CreateCsvExportReportPayloadFragmentDoc.definitions,
        ],
    };
    const CreateInitiativeUpdateReminderDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createInitiativeUpdateReminder" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "initiativeId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "userId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "createInitiativeUpdateReminder" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "initiativeId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "initiativeId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "userId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "userId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateReminderPayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...InitiativeUpdateReminderPayloadFragmentDoc.definitions,
        ],
    };
    const CreateOrganizationFromOnboardingDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createOrganizationFromOnboarding" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CreateOrganizationInput" } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "survey" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "OnboardingCustomerSurvey" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "createOrganizationFromOnboarding" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "survey" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "survey" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CreateOrJoinOrganizationResponseFragmentDoc.definitions,
            ...AuthOrganizationFragmentDoc.definitions,
            ...AuthUserFragmentDoc.definitions,
        ],
    };
    const CreateProjectUpdateReminderDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createProjectUpdateReminder" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "userId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "createProjectUpdateReminder" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "projectId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "userId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "userId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateReminderPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectUpdateReminderPayloadFragmentDoc.definitions,
        ],
    };
    const CreateCustomViewDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createCustomView" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customViewCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomViewPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteCustomViewDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteCustomView" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customViewDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateCustomViewDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateCustomView" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customViewUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomViewPayloadFragmentDoc.definitions,
        ],
    };
    const CreateCustomerDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createCustomer" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteCustomerDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteCustomer" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const CustomerMergeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "customerMerge" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sourceCustomerId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "targetCustomerId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerMerge" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "sourceCustomerId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "sourceCustomerId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "targetCustomerId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "targetCustomerId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerPayloadFragmentDoc.definitions,
        ],
    };
    const ArchiveCustomerNeedDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveCustomerNeed" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerNeedArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerNeedArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateCustomerNeedDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createCustomerNeed" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerNeedCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerNeedPayloadFragmentDoc.definitions,
        ],
    };
    const CustomerNeedCreateFromAttachmentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "customerNeedCreateFromAttachment" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedCreateFromAttachmentInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerNeedCreateFromAttachment" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerNeedPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteCustomerNeedDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteCustomerNeed" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "keepAttachment" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerNeedDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "keepAttachment" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "keepAttachment" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UnarchiveCustomerNeedDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unarchiveCustomerNeed" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerNeedUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerNeedArchivePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateCustomerNeedDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateCustomerNeed" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerNeedUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedUpdatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerNeedUpdatePayloadFragmentDoc.definitions,
            ...CustomerNeedFragmentDoc.definitions,
            ...ProjectAttachmentFragmentDoc.definitions,
        ],
    };
    const CreateCustomerStatusDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createCustomerStatus" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatusCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerStatusCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatusPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerStatusPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteCustomerStatusDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteCustomerStatus" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerStatusDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateCustomerStatusDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateCustomerStatus" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatusUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerStatusUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatusPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerStatusPayloadFragmentDoc.definitions,
        ],
    };
    const CreateCustomerTierDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createCustomerTier" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerTierCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTierPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerTierPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteCustomerTierDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteCustomerTier" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerTierDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateCustomerTierDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateCustomerTier" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerTierUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTierPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerTierPayloadFragmentDoc.definitions,
        ],
    };
    const UpdateCustomerDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateCustomer" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerPayloadFragmentDoc.definitions,
        ],
    };
    const CustomerUpsertDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "customerUpsert" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CustomerUpsertInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "customerUpsert" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CustomerPayloadFragmentDoc.definitions,
        ],
    };
    const ArchiveCycleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveCycle" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycleArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CycleArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateCycleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createCycle" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleCreateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycleCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CyclePayloadFragmentDoc.definitions,
        ],
    };
    const CycleShiftAllDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "cycleShiftAll" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "CycleShiftAllInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycleShiftAll" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CyclePayloadFragmentDoc.definitions,
        ],
    };
    const CycleStartUpcomingCycleTodayDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "cycleStartUpcomingCycleToday" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycleStartUpcomingCycleToday" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CyclePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateCycleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateCycle" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleUpdateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "cycleUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...CyclePayloadFragmentDoc.definitions,
        ],
    };
    const CreateDocumentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createDocument" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "DocumentCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DocumentPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteDocumentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteDocument" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DocumentArchivePayloadFragmentDoc.definitions,
        ],
    };
    const UnarchiveDocumentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unarchiveDocument" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DocumentArchivePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateDocumentDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateDocument" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "DocumentUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "documentUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DocumentPayloadFragmentDoc.definitions,
        ],
    };
    const CreateEmailIntakeAddressDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createEmailIntakeAddress" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddressCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailIntakeAddressCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...EmailIntakeAddressPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteEmailIntakeAddressDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteEmailIntakeAddress" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailIntakeAddressDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const EmailIntakeAddressRotateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "emailIntakeAddressRotate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailIntakeAddressRotate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...EmailIntakeAddressPayloadFragmentDoc.definitions,
        ],
    };
    const UpdateEmailIntakeAddressDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateEmailIntakeAddress" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddressUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailIntakeAddressUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...EmailIntakeAddressPayloadFragmentDoc.definitions,
        ],
    };
    const EmailTokenUserAccountAuthDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "emailTokenUserAccountAuth" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailTokenUserAccountAuth" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...AuthResolverResponseFragmentDoc.definitions,
            ...AuthUserFragmentDoc.definitions,
            ...AuthOrganizationFragmentDoc.definitions,
        ],
    };
    const EmailUnsubscribeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "emailUnsubscribe" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribeInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailUnsubscribe" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailUnsubscribePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...EmailUnsubscribePayloadFragmentDoc.definitions,
        ],
    };
    const EmailUserAccountAuthChallengeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "emailUserAccountAuthChallenge" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emailUserAccountAuthChallenge" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...EmailUserAccountAuthChallengeResponseFragmentDoc.definitions,
        ],
    };
    const CreateEmojiDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createEmoji" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmojiCreateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emojiCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...EmojiPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteEmojiDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteEmoji" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "emojiDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const CreateEntityExternalLinkDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createEntityExternalLink" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entityExternalLinkCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...EntityExternalLinkPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteEntityExternalLinkDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteEntityExternalLink" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entityExternalLinkDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateEntityExternalLinkDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateEntityExternalLink" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "entityExternalLinkUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...EntityExternalLinkPayloadFragmentDoc.definitions,
        ],
    };
    const CreateFavoriteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createFavorite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favoriteCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...FavoritePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteFavoriteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteFavorite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favoriteDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateFavoriteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateFavorite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "favoriteUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...FavoritePayloadFragmentDoc.definitions,
        ],
    };
    const FileUploadDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "fileUpload" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "contentType" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filename" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "makePublic" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "metaData" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "JSON" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "size" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "fileUpload" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "contentType" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "contentType" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filename" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filename" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "makePublic" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "makePublic" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "metaData" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "metaData" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "size" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "size" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UploadPayloadFragmentDoc.definitions,
            ...UploadFileFragmentDoc.definitions,
            ...UploadFileHeaderFragmentDoc.definitions,
        ],
    };
    const CreateGitAutomationStateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createGitAutomationState" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStateCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "gitAutomationStateCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationStatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...GitAutomationStatePayloadFragmentDoc.definitions,
            ...GitAutomationStateFragmentDoc.definitions,
            ...GitAutomationTargetBranchFragmentDoc.definitions,
        ],
    };
    const DeleteGitAutomationStateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteGitAutomationState" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "gitAutomationStateDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateGitAutomationStateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateGitAutomationState" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStateUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "gitAutomationStateUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationStatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...GitAutomationStatePayloadFragmentDoc.definitions,
            ...GitAutomationStateFragmentDoc.definitions,
            ...GitAutomationTargetBranchFragmentDoc.definitions,
        ],
    };
    const CreateGitAutomationTargetBranchDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createGitAutomationTargetBranch" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranchCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "gitAutomationTargetBranchCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...GitAutomationTargetBranchPayloadFragmentDoc.definitions,
            ...GitAutomationTargetBranchFragmentDoc.definitions,
        ],
    };
    const DeleteGitAutomationTargetBranchDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteGitAutomationTargetBranch" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "gitAutomationTargetBranchDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateGitAutomationTargetBranchDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateGitAutomationTargetBranch" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranchUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "gitAutomationTargetBranchUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...GitAutomationTargetBranchPayloadFragmentDoc.definitions,
            ...GitAutomationTargetBranchFragmentDoc.definitions,
        ],
    };
    const GoogleUserAccountAuthDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "googleUserAccountAuth" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "GoogleUserAccountAuthInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "googleUserAccountAuth" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...AuthResolverResponseFragmentDoc.definitions,
            ...AuthUserFragmentDoc.definitions,
            ...AuthOrganizationFragmentDoc.definitions,
        ],
    };
    const ImageUploadFromUrlDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "imageUploadFromUrl" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "url" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "imageUploadFromUrl" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "url" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "url" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ImageUploadFromUrlPayloadFragmentDoc.definitions,
        ],
    };
    const ImportFileUploadDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "importFileUpload" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "contentType" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "filename" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "metaData" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "JSON" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "size" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "importFileUpload" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "contentType" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "contentType" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "filename" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "filename" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "metaData" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "metaData" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "size" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "size" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UploadPayloadFragmentDoc.definitions,
            ...UploadFileFragmentDoc.definitions,
            ...UploadFileHeaderFragmentDoc.definitions,
        ],
    };
    const ArchiveInitiativeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveInitiative" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateInitiativeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createInitiative" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteInitiativeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteInitiative" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const CreateInitiativeRelationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createInitiativeRelation" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelationCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeRelationCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeRelationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeRelationPayloadFragmentDoc.definitions,
            ...InitiativeRelationFragmentDoc.definitions,
        ],
    };
    const DeleteInitiativeRelationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteInitiativeRelation" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeRelationDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateInitiativeRelationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateInitiativeRelation" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelationUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeRelationUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const CreateInitiativeToProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createInitiativeToProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeToProjectCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProjectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeToProjectPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteInitiativeToProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteInitiativeToProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeToProjectDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateInitiativeToProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateInitiativeToProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeToProjectUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProjectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeToProjectPayloadFragmentDoc.definitions,
        ],
    };
    const UnarchiveInitiativeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unarchiveInitiative" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeArchivePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateInitiativeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateInitiative" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativePayloadFragmentDoc.definitions,
        ],
    };
    const ArchiveInitiativeUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveInitiativeUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeUpdateArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeUpdateArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateInitiativeUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createInitiativeUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeUpdateCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeUpdatePayloadFragmentDoc.definitions,
        ],
    };
    const UnarchiveInitiativeUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unarchiveInitiativeUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeUpdateUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeUpdateArchivePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateInitiativeUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateInitiativeUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "initiativeUpdateUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...InitiativeUpdatePayloadFragmentDoc.definitions,
        ],
    };
    const ArchiveIntegrationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveIntegration" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationAsksConnectChannelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationAsksConnectChannel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationAsksConnectChannel" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AsksChannelConnectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...AsksChannelConnectPayloadFragmentDoc.definitions,
            ...SlackChannelNameMappingFragmentDoc.definitions,
            ...SlackAsksTeamSettingsFragmentDoc.definitions,
        ],
    };
    const DeleteIntegrationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteIntegration" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "skipInstallationDeletion" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "skipInstallationDeletion" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "skipInstallationDeletion" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationDiscordDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationDiscord" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationDiscord" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationFigmaDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationFigma" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationFigma" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationFrontDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationFront" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationFront" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationGitHubEnterpriseServerConnectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationGitHubEnterpriseServerConnect" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "githubUrl" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "organizationName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationGitHubEnterpriseServerConnect" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "githubUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "githubUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "organizationName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "organizationName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubEnterpriseServerPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...GitHubEnterpriseServerPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationGitHubPersonalDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationGitHubPersonal" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "codeAccess" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationGitHubPersonal" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "codeAccess" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "codeAccess" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const CreateIntegrationGithubCommitDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createIntegrationGithubCommit" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationGithubCommitCreate" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...GitHubCommitIntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationGithubConnectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationGithubConnect" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "codeAccess" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationGithubConnect" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "codeAccess" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "codeAccess" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "installationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationGithubImportConnectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationGithubImportConnect" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationGithubImportConnect" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "installationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationGithubImportRefreshDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationGithubImportRefresh" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationGithubImportRefresh" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationGitlabConnectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationGitlabConnect" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "accessToken" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationGitlabConnect" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "accessToken" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "accessToken" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "gitlabUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitLabIntegrationCreatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...GitLabIntegrationCreatePayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationGongDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationGong" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationGong" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationGoogleSheetsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationGoogleSheets" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationGoogleSheets" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationIntercomDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationIntercom" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "domainUrl" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationIntercom" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "domainUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "domainUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteIntegrationIntercomDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteIntegrationIntercom" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationIntercomDelete" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const UpdateIntegrationIntercomSettingsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateIntegrationIntercomSettings" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IntercomSettingsInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationIntercomSettingsUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationJiraPersonalDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationJiraPersonal" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "accessToken" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationJiraPersonal" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "accessToken" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "accessToken" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationLoomDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationLoom" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationLoom" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationRequestDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationRequest" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationRequestInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationRequest" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationRequestPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationRequestPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSalesforceDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSalesforce" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "subdomain" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSalesforce" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "subdomain" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "subdomain" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSentryConnectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSentryConnect" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSentryConnect" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "installationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "installationId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "organizationSlug" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlack" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlack" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "shouldUseV2Auth" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackAsksDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackAsks" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackAsks" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackCustomViewNotificationsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackCustomViewNotifications" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "customViewId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackCustomViewNotifications" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "customViewId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "customViewId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...SlackChannelConnectPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackCustomerChannelLinkDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackCustomerChannelLink" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "customerId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackCustomerChannelLink" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "customerId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "customerId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SuccessPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...SuccessPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackImportEmojisDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackImportEmojis" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackImportEmojis" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackOrAsksUpdateSlackTeamNameDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackOrAsksUpdateSlackTeamName" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "integrationId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackOrAsksUpdateSlackTeamName" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "integrationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "integrationId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationSlackWorkspaceNamePayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...IntegrationSlackWorkspaceNamePayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackOrgProjectUpdatesPostDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackOrgProjectUpdatesPost" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackOrgProjectUpdatesPost" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...SlackChannelConnectPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackPersonalDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackPersonal" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackPersonal" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackPostDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackPost" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackPost" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "shouldUseV2Auth" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...SlackChannelConnectPayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationSlackProjectPostDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationSlackProjectPost" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "service" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationSlackProjectPost" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "projectId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "projectId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "service" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "service" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...SlackChannelConnectPayloadFragmentDoc.definitions,
        ],
    };
    const CreateIntegrationTemplateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createIntegrationTemplate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplateCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationTemplateCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationTemplatePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteIntegrationTemplateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteIntegrationTemplate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationTemplateDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const IntegrationZendeskDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "integrationZendesk" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "subdomain" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationZendesk" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "scope" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "scope" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "subdomain" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "subdomain" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const CreateIntegrationsSettingsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createIntegrationsSettings" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationsSettingsCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationsSettingsPayloadFragmentDoc.definitions,
        ],
    };
    const UpdateIntegrationsSettingsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateIntegrationsSettings" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "integrationsSettingsUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationsSettingsPayloadFragmentDoc.definitions,
        ],
    };
    const IssueAddLabelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueAddLabel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueAddLabel" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "labelId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePayloadFragmentDoc.definitions,
        ],
    };
    const ArchiveIssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveIssue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "trash" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "trash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "trash" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateIssueBatchDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createIssueBatch" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IssueBatchCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueBatchCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueBatchPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueBatchPayloadFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
        ],
    };
    const UpdateIssueBatchDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateIssueBatch" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "ids" } },
                        type: {
                            kind: "NonNullType",
                            type: {
                                kind: "ListType",
                                type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UUID" } } },
                            },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueUpdateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueBatchUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "ids" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "ids" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueBatchPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueBatchPayloadFragmentDoc.definitions,
            ...IssueFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...ExternalEntityInfoFragmentDoc.definitions,
            ...ExternalEntityInfoGithubMetadataFragmentDoc.definitions,
            ...ExternalEntityInfoJiraMetadataFragmentDoc.definitions,
            ...ExternalEntitySlackMetadataFragmentDoc.definitions,
        ],
    };
    const CreateIssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createIssue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueCreateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteIssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteIssue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "permanentlyDelete" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "permanentlyDelete" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "permanentlyDelete" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueArchivePayloadFragmentDoc.definitions,
        ],
    };
    const IssueExternalSyncDisableDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueExternalSyncDisable" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "attachmentId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueExternalSyncDisable" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "attachmentId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "attachmentId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePayloadFragmentDoc.definitions,
        ],
    };
    const IssueImportCreateAsanaDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueImportCreateAsana" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportCreateAsana" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "asanaTeamName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "asanaToken" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeClosedIssues" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "instantProcess" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportPayloadFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
        ],
    };
    const IssueImportCreateCsvJiraDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueImportCreateCSVJira" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportCreateCSVJira" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "csvUrl" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraEmail" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraHostname" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraToken" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportPayloadFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
        ],
    };
    const IssueImportCreateClubhouseDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueImportCreateClubhouse" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseGroupName" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportCreateClubhouse" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "clubhouseGroupName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "clubhouseGroupName" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "clubhouseToken" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeClosedIssues" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "instantProcess" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportPayloadFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
        ],
    };
    const IssueImportCreateGithubDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueImportCreateGithub" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "githubLabels" } },
                        type: {
                            kind: "ListType",
                            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "githubRepoIds" } },
                        type: {
                            kind: "ListType",
                            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportCreateGithub" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "githubLabels" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "githubLabels" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "githubRepoIds" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "githubRepoIds" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeClosedIssues" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "instantProcess" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportPayloadFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
        ],
    };
    const IssueImportCreateJiraDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueImportCreateJira" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "jql" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportCreateJira" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "includeClosedIssues" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "instantProcess" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraEmail" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraHostname" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraProject" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jiraToken" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "jql" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "jql" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "teamName" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "teamName" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportPayloadFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
        ],
    };
    const DeleteIssueImportDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteIssueImport" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueImportId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportDeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportDeletePayloadFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
        ],
    };
    const IssueImportProcessDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueImportProcess" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "mapping" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "JSONObject" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportProcess" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "issueImportId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "mapping" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "mapping" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportPayloadFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
        ],
    };
    const UpdateIssueImportDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateIssueImport" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IssueImportUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueImportUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueImportPayloadFragmentDoc.definitions,
            ...IssueImportFragmentDoc.definitions,
        ],
    };
    const CreateIssueLabelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createIssueLabel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelCreateInput" } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabelCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "replaceTeamLabels" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteIssueLabelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteIssueLabel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabelDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateIssueLabelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateIssueLabel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelUpdateInput" } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueLabelUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "replaceTeamLabels" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueLabelPayloadFragmentDoc.definitions,
        ],
    };
    const CreateIssueRelationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createIssueRelation" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationCreateInput" } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "overrideCreatedAt" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRelationCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "overrideCreatedAt" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "overrideCreatedAt" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteIssueRelationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteIssueRelation" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRelationDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateIssueRelationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateIssueRelation" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRelationUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueRelationPayloadFragmentDoc.definitions,
        ],
    };
    const IssueReminderDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueReminder" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "reminderAt" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueReminder" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "reminderAt" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "reminderAt" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePayloadFragmentDoc.definitions,
        ],
    };
    const IssueRemoveLabelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueRemoveLabel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueRemoveLabel" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "labelId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePayloadFragmentDoc.definitions,
        ],
    };
    const IssueSubscribeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueSubscribe" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "userEmail" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "userId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueSubscribe" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "userEmail" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "userEmail" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "userId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "userId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePayloadFragmentDoc.definitions,
        ],
    };
    const UnarchiveIssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unarchiveIssue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssueArchivePayloadFragmentDoc.definitions,
        ],
    };
    const IssueUnsubscribeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "issueUnsubscribe" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "userEmail" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "userId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueUnsubscribe" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "userEmail" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "userEmail" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "userId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "userId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateIssueDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateIssue" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueUpdateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "issueUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IssuePayloadFragmentDoc.definitions,
        ],
    };
    const JoinOrganizationFromOnboardingDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "joinOrganizationFromOnboarding" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "JoinOrganizationInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "joinOrganizationFromOnboarding" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CreateOrJoinOrganizationResponseFragmentDoc.definitions,
            ...AuthOrganizationFragmentDoc.definitions,
            ...AuthUserFragmentDoc.definitions,
        ],
    };
    const LeaveOrganizationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "leaveOrganization" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "leaveOrganization" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "organizationId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...CreateOrJoinOrganizationResponseFragmentDoc.definitions,
            ...AuthOrganizationFragmentDoc.definitions,
            ...AuthUserFragmentDoc.definitions,
        ],
    };
    const LogoutDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "logout" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "reason" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "logout" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "reason" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "reason" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...LogoutResponseFragmentDoc.definitions,
        ],
    };
    const LogoutAllSessionsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "logoutAllSessions" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "reason" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "logoutAllSessions" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "reason" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "reason" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...LogoutResponseFragmentDoc.definitions,
        ],
    };
    const LogoutOtherSessionsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "logoutOtherSessions" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "reason" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "logoutOtherSessions" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "reason" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "reason" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...LogoutResponseFragmentDoc.definitions,
        ],
    };
    const LogoutSessionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "logoutSession" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "sessionId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "logoutSession" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "sessionId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "sessionId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...LogoutResponseFragmentDoc.definitions,
        ],
    };
    const ArchiveNotificationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveNotification" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationArchivePayloadFragmentDoc.definitions,
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...CustomerNeedNotificationFragmentDoc.definitions,
            ...CustomerNotificationFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...PostNotificationFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
            ...PullRequestNotificationFragmentDoc.definitions,
        ],
    };
    const NotificationArchiveAllDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "notificationArchiveAll" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationArchiveAll" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationBatchActionPayloadFragmentDoc.definitions,
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...CustomerNeedNotificationFragmentDoc.definitions,
            ...CustomerNotificationFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...PostNotificationFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
            ...PullRequestNotificationFragmentDoc.definitions,
        ],
    };
    const UpdateNotificationCategoryChannelSubscriptionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateNotificationCategoryChannelSubscription" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "category" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationCategory" } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "channel" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationChannel" } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "subscribe" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationCategoryChannelSubscriptionUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "category" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "category" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "channel" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "channel" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "subscribe" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "subscribe" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserSettingsPayloadFragmentDoc.definitions,
        ],
    };
    const NotificationMarkReadAllDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "notificationMarkReadAll" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "readAt" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationMarkReadAll" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "readAt" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "readAt" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationBatchActionPayloadFragmentDoc.definitions,
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...CustomerNeedNotificationFragmentDoc.definitions,
            ...CustomerNotificationFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...PostNotificationFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
            ...PullRequestNotificationFragmentDoc.definitions,
        ],
    };
    const NotificationMarkUnreadAllDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "notificationMarkUnreadAll" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationMarkUnreadAll" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationBatchActionPayloadFragmentDoc.definitions,
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...CustomerNeedNotificationFragmentDoc.definitions,
            ...CustomerNotificationFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...PostNotificationFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
            ...PullRequestNotificationFragmentDoc.definitions,
        ],
    };
    const NotificationSnoozeAllDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "notificationSnoozeAll" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "snoozedUntilAt" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationSnoozeAll" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "snoozedUntilAt" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "snoozedUntilAt" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationBatchActionPayloadFragmentDoc.definitions,
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...CustomerNeedNotificationFragmentDoc.definitions,
            ...CustomerNotificationFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...PostNotificationFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
            ...PullRequestNotificationFragmentDoc.definitions,
        ],
    };
    const CreateNotificationSubscriptionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createNotificationSubscription" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationSubscriptionCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionPayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationSubscriptionPayloadFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
        ],
    };
    const DeleteNotificationSubscriptionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteNotificationSubscription" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationSubscriptionDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateNotificationSubscriptionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateNotificationSubscription" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationSubscriptionUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionPayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...NotificationSubscriptionPayloadFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
        ],
    };
    const UnarchiveNotificationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unarchiveNotification" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationArchivePayloadFragmentDoc.definitions,
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...CustomerNeedNotificationFragmentDoc.definitions,
            ...CustomerNotificationFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...PostNotificationFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
            ...PullRequestNotificationFragmentDoc.definitions,
        ],
    };
    const NotificationUnsnoozeAllDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "notificationUnsnoozeAll" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } },
                        },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "unsnoozedAt" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationUnsnoozeAll" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "unsnoozedAt" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "unsnoozedAt" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationBatchActionPayloadFragmentDoc.definitions,
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...CustomerNeedNotificationFragmentDoc.definitions,
            ...CustomerNotificationFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...PostNotificationFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
            ...PullRequestNotificationFragmentDoc.definitions,
        ],
    };
    const UpdateNotificationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateNotification" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "NotificationUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "notificationUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...NotificationPayloadFragmentDoc.definitions,
            ...NotificationFragmentDoc.definitions,
            ...ActorBotFragmentDoc.definitions,
            ...CustomerNeedNotificationFragmentDoc.definitions,
            ...CustomerNotificationFragmentDoc.definitions,
            ...DocumentNotificationFragmentDoc.definitions,
            ...InitiativeNotificationFragmentDoc.definitions,
            ...IssueNotificationFragmentDoc.definitions,
            ...NotificationSubscriptionFragmentDoc.definitions,
            ...OauthClientApprovalNotificationFragmentDoc.definitions,
            ...OauthClientApprovalFragmentDoc.definitions,
            ...PostNotificationFragmentDoc.definitions,
            ...ProjectNotificationFragmentDoc.definitions,
            ...PullRequestNotificationFragmentDoc.definitions,
        ],
    };
    const DeleteOrganizationCancelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteOrganizationCancel" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationCancelDelete" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationCancelDeletePayload" } },
                                ],
                            },
                        },
                    ],
                },
            },
            ...OrganizationCancelDeletePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteOrganizationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteOrganization" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "DeleteOrganizationInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationDeletePayloadFragmentDoc.definitions,
        ],
    };
    const OrganizationDeleteChallengeDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "organizationDeleteChallenge" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationDeleteChallenge" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationDeletePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteOrganizationDomainDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteOrganizationDomain" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationDomainDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const CreateOrganizationInviteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createOrganizationInvite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationInviteCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvitePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationInvitePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteOrganizationInviteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteOrganizationInvite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationInviteDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateOrganizationInviteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateOrganizationInvite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationInviteUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvitePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationInvitePayloadFragmentDoc.definitions,
        ],
    };
    const OrganizationStartTrialDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "organizationStartTrial" },
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationStartTrial" },
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationStartTrialPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationStartTrialPayloadFragmentDoc.definitions,
        ],
    };
    const OrganizationStartTrialForPlanDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "organizationStartTrialForPlan" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationStartTrialInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationStartTrialForPlan" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationStartTrialPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationStartTrialPayloadFragmentDoc.definitions,
        ],
    };
    const UpdateOrganizationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateOrganization" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "organizationUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...OrganizationPayloadFragmentDoc.definitions,
        ],
    };
    const ProjectAddLabelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "projectAddLabel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectAddLabel" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "labelId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectPayloadFragmentDoc.definitions,
        ],
    };
    const ArchiveProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "trash" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "trash" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "trash" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "connectSlackChannel" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "connectSlackChannel" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "connectSlackChannel" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateProjectLabelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createProjectLabel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLabelCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabelPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectLabelPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteProjectLabelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteProjectLabel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLabelDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateProjectLabelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateProjectLabel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectLabelUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectLabelUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectLabelPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectLabelPayloadFragmentDoc.definitions,
        ],
    };
    const CreateProjectMilestoneDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createProjectMilestone" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestoneCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestonePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectMilestonePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteProjectMilestoneDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteProjectMilestone" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestoneDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateProjectMilestoneDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateProjectMilestone" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectMilestoneUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestonePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectMilestonePayloadFragmentDoc.definitions,
        ],
    };
    const CreateProjectRelationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createProjectRelation" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectRelationCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectRelationPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteProjectRelationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteProjectRelation" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectRelationDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateProjectRelationDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateProjectRelation" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectRelationUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectRelationPayloadFragmentDoc.definitions,
        ],
    };
    const ProjectRemoveLabelDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "projectRemoveLabel" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectRemoveLabel" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "labelId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "labelId" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectPayloadFragmentDoc.definitions,
        ],
    };
    const ArchiveProjectStatusDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveProjectStatus" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectStatusArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectStatusArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateProjectStatusDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createProjectStatus" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectStatusCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectStatusPayloadFragmentDoc.definitions,
        ],
    };
    const UnarchiveProjectStatusDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unarchiveProjectStatus" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectStatusUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectStatusArchivePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateProjectStatusDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateProjectStatus" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectStatusUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectStatusPayloadFragmentDoc.definitions,
        ],
    };
    const UnarchiveProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unarchiveProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectArchivePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectPayloadFragmentDoc.definitions,
        ],
    };
    const ArchiveProjectUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveProjectUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdateArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectUpdateArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateProjectUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createProjectUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdateCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectUpdatePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteProjectUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteProjectUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdateDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UnarchiveProjectUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unarchiveProjectUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdateUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectUpdateArchivePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateProjectUpdateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateProjectUpdate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "projectUpdateUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ProjectUpdatePayloadFragmentDoc.definitions,
        ],
    };
    const CreatePushSubscriptionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createPushSubscription" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pushSubscriptionCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...PushSubscriptionPayloadFragmentDoc.definitions,
            ...PushSubscriptionFragmentDoc.definitions,
        ],
    };
    const DeletePushSubscriptionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deletePushSubscription" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "pushSubscriptionDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...PushSubscriptionPayloadFragmentDoc.definitions,
            ...PushSubscriptionFragmentDoc.definitions,
        ],
    };
    const CreateReactionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createReaction" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ReactionCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reactionCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ReactionPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ReactionPayloadFragmentDoc.definitions,
            ...ReactionFragmentDoc.definitions,
        ],
    };
    const DeleteReactionDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteReaction" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "reactionDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const RefreshGoogleSheetsDataDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "refreshGoogleSheetsData" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "type" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "refreshGoogleSheetsData" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "type" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "type" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...IntegrationPayloadFragmentDoc.definitions,
        ],
    };
    const ResendOrganizationInviteDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "resendOrganizationInvite" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "resendOrganizationInvite" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const ResendOrganizationInviteByEmailDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "resendOrganizationInviteByEmail" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "email" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "resendOrganizationInviteByEmail" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "email" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "email" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const ArchiveRoadmapDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveRoadmap" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateRoadmapDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createRoadmap" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteRoadmapDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteRoadmap" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const CreateRoadmapToProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createRoadmapToProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapToProjectCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapToProjectPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteRoadmapToProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteRoadmapToProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapToProjectDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateRoadmapToProjectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateRoadmapToProject" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapToProjectUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapToProjectPayloadFragmentDoc.definitions,
        ],
    };
    const UnarchiveRoadmapDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unarchiveRoadmap" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapArchivePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateRoadmapDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateRoadmap" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "roadmapUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...RoadmapPayloadFragmentDoc.definitions,
        ],
    };
    const SamlTokenUserAccountAuthDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "samlTokenUserAccountAuth" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "samlTokenUserAccountAuth" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }],
                            },
                        },
                    ],
                },
            },
            ...AuthResolverResponseFragmentDoc.definitions,
            ...AuthUserFragmentDoc.definitions,
            ...AuthOrganizationFragmentDoc.definitions,
        ],
    };
    const CreateTeamDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createTeam" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamCreateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "copySettingsFromTeamId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteTeamCyclesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteTeamCycles" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamCyclesDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteTeamDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteTeam" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteTeamKeyDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteTeamKey" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamKeyDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const CreateTeamMembershipDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createTeamMembership" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamMembershipCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteTeamMembershipDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteTeamMembership" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "alsoLeaveParentTeams" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamMembershipDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "alsoLeaveParentTeams" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "alsoLeaveParentTeams" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateTeamMembershipDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateTeamMembership" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamMembershipUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamMembershipPayloadFragmentDoc.definitions,
        ],
    };
    const UnarchiveTeamDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unarchiveTeam" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamUnarchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamArchivePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateTeamDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateTeam" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamUpdateInput" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "mapping" } },
                        type: { kind: "NamedType", name: { kind: "Name", value: "InheritanceEntityMapping" } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "teamUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "mapping" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "mapping" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TeamPayloadFragmentDoc.definitions,
        ],
    };
    const CreateTemplateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createTemplate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TemplateCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "templateCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TemplatePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteTemplateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteTemplate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "templateDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateTemplateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateTemplate" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TemplateUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "templateUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TemplatePayloadFragmentDoc.definitions,
        ],
    };
    const CreateTimeScheduleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createTimeSchedule" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "timeScheduleCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TimeSchedulePayloadFragmentDoc.definitions,
        ],
    };
    const DeleteTimeScheduleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteTimeSchedule" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "timeScheduleDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const TimeScheduleRefreshIntegrationScheduleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "timeScheduleRefreshIntegrationSchedule" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "timeScheduleRefreshIntegrationSchedule" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TimeSchedulePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateTimeScheduleDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateTimeSchedule" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "timeScheduleUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TimeSchedulePayloadFragmentDoc.definitions,
        ],
    };
    const TimeScheduleUpsertExternalDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "timeScheduleUpsertExternal" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "externalId" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "timeScheduleUpsertExternal" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "externalId" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "externalId" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TimeSchedulePayloadFragmentDoc.definitions,
        ],
    };
    const CreateTriageResponsibilityDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createTriageResponsibility" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageResponsibilityCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TriageResponsibilityPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteTriageResponsibilityDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteTriageResponsibility" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageResponsibilityDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateTriageResponsibilityDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateTriageResponsibility" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "triageResponsibilityUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...TriageResponsibilityPayloadFragmentDoc.definitions,
        ],
    };
    const UserDemoteAdminDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userDemoteAdmin" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userDemoteAdmin" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAdminPayloadFragmentDoc.definitions,
        ],
    };
    const UserDemoteMemberDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userDemoteMember" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userDemoteMember" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAdminPayloadFragmentDoc.definitions,
        ],
    };
    const UserDiscordConnectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userDiscordConnect" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "code" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userDiscordConnect" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "code" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "code" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "redirectUri" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserPayloadFragmentDoc.definitions,
        ],
    };
    const UserExternalUserDisconnectDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userExternalUserDisconnect" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "service" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userExternalUserDisconnect" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "service" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "service" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserPayloadFragmentDoc.definitions,
        ],
    };
    const UpdateUserFlagDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateUserFlag" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "flag" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagType" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "operation" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagUpdateOperation" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userFlagUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "flag" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "flag" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "operation" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "operation" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserSettingsFlagPayloadFragmentDoc.definitions,
        ],
    };
    const UserPromoteAdminDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userPromoteAdmin" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userPromoteAdmin" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAdminPayloadFragmentDoc.definitions,
        ],
    };
    const UserPromoteMemberDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userPromoteMember" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userPromoteMember" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAdminPayloadFragmentDoc.definitions,
        ],
    };
    const UserSettingsFlagsResetDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userSettingsFlagsReset" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "flags" } },
                        type: {
                            kind: "ListType",
                            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagType" } } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettingsFlagsReset" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "flags" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "flags" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserSettingsFlagsResetPayloadFragmentDoc.definitions,
        ],
    };
    const UpdateUserSettingsDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateUserSettings" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSettingsUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserSettingsPayloadFragmentDoc.definitions,
        ],
    };
    const SuspendUserDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "suspendUser" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userSuspend" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAdminPayloadFragmentDoc.definitions,
        ],
    };
    const UserUnlinkFromIdentityProviderDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "userUnlinkFromIdentityProvider" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userUnlinkFromIdentityProvider" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAdminPayloadFragmentDoc.definitions,
        ],
    };
    const UnsuspendUserDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "unsuspendUser" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userUnsuspend" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserAdminPayloadFragmentDoc.definitions,
        ],
    };
    const UpdateUserDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateUser" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserUpdateInput" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "userUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...UserPayloadFragmentDoc.definitions,
        ],
    };
    const CreateViewPreferencesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createViewPreferences" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewPreferencesCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ViewPreferencesPayloadFragmentDoc.definitions,
            ...ViewPreferencesFragmentDoc.definitions,
            ...ViewPreferencesValuesFragmentDoc.definitions,
        ],
    };
    const DeleteViewPreferencesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteViewPreferences" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewPreferencesDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateViewPreferencesDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateViewPreferences" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "viewPreferencesUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...ViewPreferencesPayloadFragmentDoc.definitions,
            ...ViewPreferencesFragmentDoc.definitions,
            ...ViewPreferencesValuesFragmentDoc.definitions,
        ],
    };
    const CreateWebhookDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createWebhook" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "WebhookCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhookCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...WebhookPayloadFragmentDoc.definitions,
        ],
    };
    const DeleteWebhookDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "deleteWebhook" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhookDelete" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...DeletePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateWebhookDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateWebhook" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "WebhookUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "webhookUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }],
                            },
                        },
                    ],
                },
            },
            ...WebhookPayloadFragmentDoc.definitions,
        ],
    };
    const ArchiveWorkflowStateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "archiveWorkflowState" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowStateArchive" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...WorkflowStateArchivePayloadFragmentDoc.definitions,
        ],
    };
    const CreateWorkflowStateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "createWorkflowState" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateCreateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowStateCreate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...WorkflowStatePayloadFragmentDoc.definitions,
        ],
    };
    const UpdateWorkflowStateDocument = {
        kind: "Document",
        definitions: [
            {
                kind: "OperationDefinition",
                operation: "mutation",
                name: { kind: "Name", value: "updateWorkflowState" },
                variableDefinitions: [
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "id" } },
                        type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
                    },
                    {
                        kind: "VariableDefinition",
                        variable: { kind: "Variable", name: { kind: "Name", value: "input" } },
                        type: {
                            kind: "NonNullType",
                            type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateUpdateInput" } },
                        },
                    },
                ],
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "Field",
                            name: { kind: "Name", value: "workflowStateUpdate" },
                            arguments: [
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "id" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "id" } },
                                },
                                {
                                    kind: "Argument",
                                    name: { kind: "Name", value: "input" },
                                    value: { kind: "Variable", name: { kind: "Name", value: "input" } },
                                },
                            ],
                            selectionSet: {
                                kind: "SelectionSet",
                                selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }],
                            },
                        },
                    ],
                },
            },
            ...WorkflowStatePayloadFragmentDoc.definitions,
        ],
    };

    var _generated_documents = /*#__PURE__*/Object.freeze({
        __proto__: null,
        get AgentActivitySignal () { return exports.AgentActivitySignal; },
        get AgentActivityType () { return exports.AgentActivityType; },
        get AgentSessionStatus () { return exports.AgentSessionStatus; },
        get AgentSessionType () { return exports.AgentSessionType; },
        get AuthenticationSessionType () { return exports.AuthenticationSessionType; },
        get ContextViewType () { return exports.ContextViewType; },
        get CustomerStatusType () { return exports.CustomerStatusType; },
        get CyclePeriod () { return exports.CyclePeriod; },
        get DateResolutionType () { return exports.DateResolutionType; },
        get Day () { return exports.Day; },
        get EmailIntakeAddressType () { return exports.EmailIntakeAddressType; },
        get ExternalSyncService () { return exports.ExternalSyncService; },
        get FacetPageSource () { return exports.FacetPageSource; },
        get FeedSummarySchedule () { return exports.FeedSummarySchedule; },
        get FrequencyResolutionType () { return exports.FrequencyResolutionType; },
        get GitAutomationStates () { return exports.GitAutomationStates; },
        get GitLinkKind () { return exports.GitLinkKind; },
        get GithubOrgType () { return exports.GithubOrgType; },
        get InitiativeStatus () { return exports.InitiativeStatus; },
        get InitiativeTab () { return exports.InitiativeTab; },
        get InitiativeUpdateHealthType () { return exports.InitiativeUpdateHealthType; },
        get IntegrationService () { return exports.IntegrationService; },
        get IssueRelationType () { return exports.IssueRelationType; },
        get IssueSuggestionState () { return exports.IssueSuggestionState; },
        get IssueSuggestionType () { return exports.IssueSuggestionType; },
        get NotificationCategory () { return exports.NotificationCategory; },
        get NotificationChannel () { return exports.NotificationChannel; },
        get OAuthClientApprovalStatus () { return exports.OAuthClientApprovalStatus; },
        get OrganizationDomainAuthType () { return exports.OrganizationDomainAuthType; },
        get OrganizationInviteStatus () { return exports.OrganizationInviteStatus; },
        get OtherNotificationType () { return exports.OtherNotificationType; },
        get PaginationNulls () { return exports.PaginationNulls; },
        get PaginationOrderBy () { return exports.PaginationOrderBy; },
        get PaginationSortOrder () { return exports.PaginationSortOrder; },
        get PostType () { return exports.PostType; },
        get ProductIntelligenceScope () { return exports.ProductIntelligenceScope; },
        get ProjectMilestoneStatus () { return exports.ProjectMilestoneStatus; },
        get ProjectStatusType () { return exports.ProjectStatusType; },
        get ProjectTab () { return exports.ProjectTab; },
        get ProjectUpdateHealthType () { return exports.ProjectUpdateHealthType; },
        get ProjectUpdateReminderFrequency () { return exports.ProjectUpdateReminderFrequency; },
        get PullRequestMergeMethod () { return exports.PullRequestMergeMethod; },
        get PullRequestReviewTool () { return exports.PullRequestReviewTool; },
        get PullRequestStatus () { return exports.PullRequestStatus; },
        get PushSubscriptionType () { return exports.PushSubscriptionType; },
        get ReleaseChannel () { return exports.ReleaseChannel; },
        get SLADayCountType () { return exports.SLADayCountType; },
        get SemanticSearchResultType () { return exports.SemanticSearchResultType; },
        get SendStrategy () { return exports.SendStrategy; },
        get SlaStatus () { return exports.SlaStatus; },
        get SlackChannelType () { return exports.SlackChannelType; },
        get TriageResponsibilityAction () { return exports.TriageResponsibilityAction; },
        get UserContextViewType () { return exports.UserContextViewType; },
        get UserFlagType () { return exports.UserFlagType; },
        get UserFlagUpdateOperation () { return exports.UserFlagUpdateOperation; },
        get UserRoleType () { return exports.UserRoleType; },
        get ViewPreferencesType () { return exports.ViewPreferencesType; },
        get ViewType () { return exports.ViewType; },
        EntityFragmentDoc: EntityFragmentDoc,
        CustomViewNotificationSubscriptionFragmentDoc: CustomViewNotificationSubscriptionFragmentDoc,
        CustomerNotificationSubscriptionFragmentDoc: CustomerNotificationSubscriptionFragmentDoc,
        CycleNotificationSubscriptionFragmentDoc: CycleNotificationSubscriptionFragmentDoc,
        FacetFragmentDoc: FacetFragmentDoc,
        CustomerNeedArchivePayloadFragmentDoc: CustomerNeedArchivePayloadFragmentDoc,
        CycleArchivePayloadFragmentDoc: CycleArchivePayloadFragmentDoc,
        DeletePayloadFragmentDoc: DeletePayloadFragmentDoc,
        DocumentArchivePayloadFragmentDoc: DocumentArchivePayloadFragmentDoc,
        InitiativeArchivePayloadFragmentDoc: InitiativeArchivePayloadFragmentDoc,
        InitiativeUpdateArchivePayloadFragmentDoc: InitiativeUpdateArchivePayloadFragmentDoc,
        IssueArchivePayloadFragmentDoc: IssueArchivePayloadFragmentDoc,
        ActorBotFragmentDoc: ActorBotFragmentDoc,
        CustomerNeedNotificationFragmentDoc: CustomerNeedNotificationFragmentDoc,
        CustomerNotificationFragmentDoc: CustomerNotificationFragmentDoc,
        DocumentNotificationFragmentDoc: DocumentNotificationFragmentDoc,
        InitiativeNotificationFragmentDoc: InitiativeNotificationFragmentDoc,
        NotificationSubscriptionFragmentDoc: NotificationSubscriptionFragmentDoc,
        IssueNotificationFragmentDoc: IssueNotificationFragmentDoc,
        OauthClientApprovalFragmentDoc: OauthClientApprovalFragmentDoc,
        OauthClientApprovalNotificationFragmentDoc: OauthClientApprovalNotificationFragmentDoc,
        PostNotificationFragmentDoc: PostNotificationFragmentDoc,
        ProjectNotificationFragmentDoc: ProjectNotificationFragmentDoc,
        PullRequestNotificationFragmentDoc: PullRequestNotificationFragmentDoc,
        NotificationFragmentDoc: NotificationFragmentDoc,
        NotificationArchivePayloadFragmentDoc: NotificationArchivePayloadFragmentDoc,
        ProjectArchivePayloadFragmentDoc: ProjectArchivePayloadFragmentDoc,
        ProjectStatusArchivePayloadFragmentDoc: ProjectStatusArchivePayloadFragmentDoc,
        ProjectUpdateArchivePayloadFragmentDoc: ProjectUpdateArchivePayloadFragmentDoc,
        RoadmapArchivePayloadFragmentDoc: RoadmapArchivePayloadFragmentDoc,
        TeamArchivePayloadFragmentDoc: TeamArchivePayloadFragmentDoc,
        WorkflowStateArchivePayloadFragmentDoc: WorkflowStateArchivePayloadFragmentDoc,
        ArchivePayloadFragmentDoc: ArchivePayloadFragmentDoc,
        LabelNotificationSubscriptionFragmentDoc: LabelNotificationSubscriptionFragmentDoc,
        ProjectNotificationSubscriptionFragmentDoc: ProjectNotificationSubscriptionFragmentDoc,
        TeamNotificationSubscriptionFragmentDoc: TeamNotificationSubscriptionFragmentDoc,
        UserNotificationSubscriptionFragmentDoc: UserNotificationSubscriptionFragmentDoc,
        SesDomainIdentityDnsRecordFragmentDoc: SesDomainIdentityDnsRecordFragmentDoc,
        SesDomainIdentityFragmentDoc: SesDomainIdentityFragmentDoc,
        EmailIntakeAddressFragmentDoc: EmailIntakeAddressFragmentDoc,
        AuthIdentityProviderFragmentDoc: AuthIdentityProviderFragmentDoc,
        InitiativeNotificationSubscriptionFragmentDoc: InitiativeNotificationSubscriptionFragmentDoc,
        OrganizationIpRestrictionFragmentDoc: OrganizationIpRestrictionFragmentDoc,
        ProjectStatusFragmentDoc: ProjectStatusFragmentDoc,
        PaidSubscriptionFragmentDoc: PaidSubscriptionFragmentDoc,
        OrganizationFragmentDoc: OrganizationFragmentDoc,
        AuthenticationSessionResponseFragmentDoc: AuthenticationSessionResponseFragmentDoc,
        BaseWebhookPayloadFragmentDoc: BaseWebhookPayloadFragmentDoc,
        CustomerNeedChildWebhookPayloadFragmentDoc: CustomerNeedChildWebhookPayloadFragmentDoc,
        OauthClientChildWebhookPayloadFragmentDoc: OauthClientChildWebhookPayloadFragmentDoc,
        IntegrationChildWebhookPayloadFragmentDoc: IntegrationChildWebhookPayloadFragmentDoc,
        IdentityProviderFragmentDoc: IdentityProviderFragmentDoc,
        OrganizationDomainFragmentDoc: OrganizationDomainFragmentDoc,
        AuthorizingUserFragmentDoc: AuthorizingUserFragmentDoc,
        WebhookFailureEventFragmentDoc: WebhookFailureEventFragmentDoc,
        UserChildWebhookPayloadFragmentDoc: UserChildWebhookPayloadFragmentDoc,
        CommentChildWebhookPayloadFragmentDoc: CommentChildWebhookPayloadFragmentDoc,
        InitiativeChildWebhookPayloadFragmentDoc: InitiativeChildWebhookPayloadFragmentDoc,
        ProjectChildWebhookPayloadFragmentDoc: ProjectChildWebhookPayloadFragmentDoc,
        DocumentChildWebhookPayloadFragmentDoc: DocumentChildWebhookPayloadFragmentDoc,
        TeamChildWebhookPayloadFragmentDoc: TeamChildWebhookPayloadFragmentDoc,
        IssueWithDescriptionChildWebhookPayloadFragmentDoc: IssueWithDescriptionChildWebhookPayloadFragmentDoc,
        ProjectUpdateChildWebhookPayloadFragmentDoc: ProjectUpdateChildWebhookPayloadFragmentDoc,
        OtherNotificationWebhookPayloadFragmentDoc: OtherNotificationWebhookPayloadFragmentDoc,
        IntegrationActorWebhookPayloadFragmentDoc: IntegrationActorWebhookPayloadFragmentDoc,
        OauthClientActorWebhookPayloadFragmentDoc: OauthClientActorWebhookPayloadFragmentDoc,
        OrganizationOriginWebhookPayloadFragmentDoc: OrganizationOriginWebhookPayloadFragmentDoc,
        OAuthAppWebhookPayloadFragmentDoc: OAuthAppWebhookPayloadFragmentDoc,
        DocumentContentChildWebhookPayloadFragmentDoc: DocumentContentChildWebhookPayloadFragmentDoc,
        ExternalUserChildWebhookPayloadFragmentDoc: ExternalUserChildWebhookPayloadFragmentDoc,
        InitiativeUpdateChildWebhookPayloadFragmentDoc: InitiativeUpdateChildWebhookPayloadFragmentDoc,
        IssueChildWebhookPayloadFragmentDoc: IssueChildWebhookPayloadFragmentDoc,
        CommentWebhookPayloadFragmentDoc: CommentWebhookPayloadFragmentDoc,
        AttachmentWebhookPayloadFragmentDoc: AttachmentWebhookPayloadFragmentDoc,
        CustomerChildWebhookPayloadFragmentDoc: CustomerChildWebhookPayloadFragmentDoc,
        CustomerNeedWebhookPayloadFragmentDoc: CustomerNeedWebhookPayloadFragmentDoc,
        CustomerStatusChildWebhookPayloadFragmentDoc: CustomerStatusChildWebhookPayloadFragmentDoc,
        CustomerTierChildWebhookPayloadFragmentDoc: CustomerTierChildWebhookPayloadFragmentDoc,
        CustomerWebhookPayloadFragmentDoc: CustomerWebhookPayloadFragmentDoc,
        CycleWebhookPayloadFragmentDoc: CycleWebhookPayloadFragmentDoc,
        DocumentWebhookPayloadFragmentDoc: DocumentWebhookPayloadFragmentDoc,
        ProjectUpdateWebhookPayloadFragmentDoc: ProjectUpdateWebhookPayloadFragmentDoc,
        ProjectMilestoneChildWebhookPayloadFragmentDoc: ProjectMilestoneChildWebhookPayloadFragmentDoc,
        ProjectStatusChildWebhookPayloadFragmentDoc: ProjectStatusChildWebhookPayloadFragmentDoc,
        ProjectWebhookPayloadFragmentDoc: ProjectWebhookPayloadFragmentDoc,
        ReactionWebhookPayloadFragmentDoc: ReactionWebhookPayloadFragmentDoc,
        IssueStatusChangedNotificationWebhookPayloadFragmentDoc: IssueStatusChangedNotificationWebhookPayloadFragmentDoc,
        UserWebhookPayloadFragmentDoc: UserWebhookPayloadFragmentDoc,
        GuidanceRuleWebhookPayloadFragmentDoc: GuidanceRuleWebhookPayloadFragmentDoc,
        AgentActivityWebhookPayloadFragmentDoc: AgentActivityWebhookPayloadFragmentDoc,
        AgentSessionWebhookPayloadFragmentDoc: AgentSessionWebhookPayloadFragmentDoc,
        AgentSessionEventWebhookPayloadFragmentDoc: AgentSessionEventWebhookPayloadFragmentDoc,
        AuditEntryWebhookPayloadFragmentDoc: AuditEntryWebhookPayloadFragmentDoc,
        InitiativeUpdateWebhookPayloadFragmentDoc: InitiativeUpdateWebhookPayloadFragmentDoc,
        InitiativeWebhookPayloadFragmentDoc: InitiativeWebhookPayloadFragmentDoc,
        IssueAssignedToYouNotificationWebhookPayloadFragmentDoc: IssueAssignedToYouNotificationWebhookPayloadFragmentDoc,
        IssueCommentMentionNotificationWebhookPayloadFragmentDoc: IssueCommentMentionNotificationWebhookPayloadFragmentDoc,
        IssueCommentReactionNotificationWebhookPayloadFragmentDoc: IssueCommentReactionNotificationWebhookPayloadFragmentDoc,
        IssueEmojiReactionNotificationWebhookPayloadFragmentDoc: IssueEmojiReactionNotificationWebhookPayloadFragmentDoc,
        IssueLabelWebhookPayloadFragmentDoc: IssueLabelWebhookPayloadFragmentDoc,
        IssueMentionNotificationWebhookPayloadFragmentDoc: IssueMentionNotificationWebhookPayloadFragmentDoc,
        IssueNewCommentNotificationWebhookPayloadFragmentDoc: IssueNewCommentNotificationWebhookPayloadFragmentDoc,
        IssueUnassignedFromYouNotificationWebhookPayloadFragmentDoc: IssueUnassignedFromYouNotificationWebhookPayloadFragmentDoc,
        AppUserNotificationWebhookPayloadFragmentDoc: AppUserNotificationWebhookPayloadFragmentDoc,
        AppUserTeamAccessChangedWebhookPayloadFragmentDoc: AppUserTeamAccessChangedWebhookPayloadFragmentDoc,
        CustomResourceWebhookPayloadFragmentDoc: CustomResourceWebhookPayloadFragmentDoc,
        EntityWebhookPayloadFragmentDoc: EntityWebhookPayloadFragmentDoc,
        CycleChildWebhookPayloadFragmentDoc: CycleChildWebhookPayloadFragmentDoc,
        WorkflowStateChildWebhookPayloadFragmentDoc: WorkflowStateChildWebhookPayloadFragmentDoc,
        IssueLabelChildWebhookPayloadFragmentDoc: IssueLabelChildWebhookPayloadFragmentDoc,
        IssueWebhookPayloadFragmentDoc: IssueWebhookPayloadFragmentDoc,
        IssueSlaWebhookPayloadFragmentDoc: IssueSlaWebhookPayloadFragmentDoc,
        SemanticSearchResultFragmentDoc: SemanticSearchResultFragmentDoc,
        SemanticSearchPayloadFragmentDoc: SemanticSearchPayloadFragmentDoc,
        UserAuthorizedApplicationFragmentDoc: UserAuthorizedApplicationFragmentDoc,
        ApplicationFragmentDoc: ApplicationFragmentDoc,
        TeamWithParentWebhookPayloadFragmentDoc: TeamWithParentWebhookPayloadFragmentDoc,
        TeamOriginWebhookPayloadFragmentDoc: TeamOriginWebhookPayloadFragmentDoc,
        IntegrationsSettingsFragmentDoc: IntegrationsSettingsFragmentDoc,
        InitiativePayloadFragmentDoc: InitiativePayloadFragmentDoc,
        InitiativeToProjectPayloadFragmentDoc: InitiativeToProjectPayloadFragmentDoc,
        NotificationDeliveryPreferencesDayFragmentDoc: NotificationDeliveryPreferencesDayFragmentDoc,
        NotificationDeliveryPreferencesScheduleFragmentDoc: NotificationDeliveryPreferencesScheduleFragmentDoc,
        NotificationDeliveryPreferencesChannelFragmentDoc: NotificationDeliveryPreferencesChannelFragmentDoc,
        NotificationDeliveryPreferencesFragmentDoc: NotificationDeliveryPreferencesFragmentDoc,
        NotificationChannelPreferencesFragmentDoc: NotificationChannelPreferencesFragmentDoc,
        NotificationCategoryPreferencesFragmentDoc: NotificationCategoryPreferencesFragmentDoc,
        UserSettingsFragmentDoc: UserSettingsFragmentDoc,
        UserActorWebhookPayloadFragmentDoc: UserActorWebhookPayloadFragmentDoc,
        IssueImportJqlCheckPayloadFragmentDoc: IssueImportJqlCheckPayloadFragmentDoc,
        IssueImportSyncCheckPayloadFragmentDoc: IssueImportSyncCheckPayloadFragmentDoc,
        AgentActivityActionContentFragmentDoc: AgentActivityActionContentFragmentDoc,
        AgentActivityElicitationContentFragmentDoc: AgentActivityElicitationContentFragmentDoc,
        AgentActivityErrorContentFragmentDoc: AgentActivityErrorContentFragmentDoc,
        AgentActivityPromptContentFragmentDoc: AgentActivityPromptContentFragmentDoc,
        AgentActivityResponseContentFragmentDoc: AgentActivityResponseContentFragmentDoc,
        AgentActivityThoughtContentFragmentDoc: AgentActivityThoughtContentFragmentDoc,
        AgentActivityFragmentDoc: AgentActivityFragmentDoc,
        PageInfoFragmentDoc: PageInfoFragmentDoc,
        AgentActivityConnectionFragmentDoc: AgentActivityConnectionFragmentDoc,
        AgentActivityPayloadFragmentDoc: AgentActivityPayloadFragmentDoc,
        AgentSessionFragmentDoc: AgentSessionFragmentDoc,
        AgentSessionConnectionFragmentDoc: AgentSessionConnectionFragmentDoc,
        AgentSessionPayloadFragmentDoc: AgentSessionPayloadFragmentDoc,
        ApiKeyFragmentDoc: ApiKeyFragmentDoc,
        ApiKeyConnectionFragmentDoc: ApiKeyConnectionFragmentDoc,
        ApiKeyPayloadFragmentDoc: ApiKeyPayloadFragmentDoc,
        SlackAsksTeamSettingsFragmentDoc: SlackAsksTeamSettingsFragmentDoc,
        SlackChannelNameMappingFragmentDoc: SlackChannelNameMappingFragmentDoc,
        AsksChannelConnectPayloadFragmentDoc: AsksChannelConnectPayloadFragmentDoc,
        AttachmentFragmentDoc: AttachmentFragmentDoc,
        AttachmentConnectionFragmentDoc: AttachmentConnectionFragmentDoc,
        AttachmentPayloadFragmentDoc: AttachmentPayloadFragmentDoc,
        AttachmentSourcesPayloadFragmentDoc: AttachmentSourcesPayloadFragmentDoc,
        AuditEntryFragmentDoc: AuditEntryFragmentDoc,
        AuditEntryConnectionFragmentDoc: AuditEntryConnectionFragmentDoc,
        AuditEntryTypeFragmentDoc: AuditEntryTypeFragmentDoc,
        AuthOrganizationFragmentDoc: AuthOrganizationFragmentDoc,
        AuthUserFragmentDoc: AuthUserFragmentDoc,
        AuthResolverResponseFragmentDoc: AuthResolverResponseFragmentDoc,
        ReactionFragmentDoc: ReactionFragmentDoc,
        DocumentContentFragmentDoc: DocumentContentFragmentDoc,
        ExternalEntityInfoGithubMetadataFragmentDoc: ExternalEntityInfoGithubMetadataFragmentDoc,
        ExternalEntityInfoJiraMetadataFragmentDoc: ExternalEntityInfoJiraMetadataFragmentDoc,
        ExternalEntitySlackMetadataFragmentDoc: ExternalEntitySlackMetadataFragmentDoc,
        ExternalEntityInfoFragmentDoc: ExternalEntityInfoFragmentDoc,
        SyncedExternalThreadFragmentDoc: SyncedExternalThreadFragmentDoc,
        CommentFragmentDoc: CommentFragmentDoc,
        CommentConnectionFragmentDoc: CommentConnectionFragmentDoc,
        CommentPayloadFragmentDoc: CommentPayloadFragmentDoc,
        ContactPayloadFragmentDoc: ContactPayloadFragmentDoc,
        CreateCsvExportReportPayloadFragmentDoc: CreateCsvExportReportPayloadFragmentDoc,
        CreateOrJoinOrganizationResponseFragmentDoc: CreateOrJoinOrganizationResponseFragmentDoc,
        ViewPreferencesValuesFragmentDoc: ViewPreferencesValuesFragmentDoc,
        ViewPreferencesFragmentDoc: ViewPreferencesFragmentDoc,
        CustomViewFragmentDoc: CustomViewFragmentDoc,
        CustomViewConnectionFragmentDoc: CustomViewConnectionFragmentDoc,
        CustomViewHasSubscribersPayloadFragmentDoc: CustomViewHasSubscribersPayloadFragmentDoc,
        CustomViewPayloadFragmentDoc: CustomViewPayloadFragmentDoc,
        CustomViewSuggestionPayloadFragmentDoc: CustomViewSuggestionPayloadFragmentDoc,
        CustomerFragmentDoc: CustomerFragmentDoc,
        CustomerConnectionFragmentDoc: CustomerConnectionFragmentDoc,
        ProjectAttachmentFragmentDoc: ProjectAttachmentFragmentDoc,
        CustomerNeedFragmentDoc: CustomerNeedFragmentDoc,
        CustomerNeedConnectionFragmentDoc: CustomerNeedConnectionFragmentDoc,
        CustomerNeedPayloadFragmentDoc: CustomerNeedPayloadFragmentDoc,
        CustomerNeedUpdatePayloadFragmentDoc: CustomerNeedUpdatePayloadFragmentDoc,
        CustomerPayloadFragmentDoc: CustomerPayloadFragmentDoc,
        CustomerStatusFragmentDoc: CustomerStatusFragmentDoc,
        CustomerStatusConnectionFragmentDoc: CustomerStatusConnectionFragmentDoc,
        CustomerStatusPayloadFragmentDoc: CustomerStatusPayloadFragmentDoc,
        CustomerTierFragmentDoc: CustomerTierFragmentDoc,
        CustomerTierConnectionFragmentDoc: CustomerTierConnectionFragmentDoc,
        CustomerTierPayloadFragmentDoc: CustomerTierPayloadFragmentDoc,
        CycleFragmentDoc: CycleFragmentDoc,
        CycleConnectionFragmentDoc: CycleConnectionFragmentDoc,
        CyclePayloadFragmentDoc: CyclePayloadFragmentDoc,
        DocumentFragmentDoc: DocumentFragmentDoc,
        DocumentConnectionFragmentDoc: DocumentConnectionFragmentDoc,
        DocumentContentHistoryTypeFragmentDoc: DocumentContentHistoryTypeFragmentDoc,
        DocumentContentHistoryPayloadFragmentDoc: DocumentContentHistoryPayloadFragmentDoc,
        DocumentPayloadFragmentDoc: DocumentPayloadFragmentDoc,
        ArchiveResponseFragmentDoc: ArchiveResponseFragmentDoc,
        DocumentSearchResultFragmentDoc: DocumentSearchResultFragmentDoc,
        DocumentSearchPayloadFragmentDoc: DocumentSearchPayloadFragmentDoc,
        DraftFragmentDoc: DraftFragmentDoc,
        DraftConnectionFragmentDoc: DraftConnectionFragmentDoc,
        EmailIntakeAddressPayloadFragmentDoc: EmailIntakeAddressPayloadFragmentDoc,
        EmailUnsubscribePayloadFragmentDoc: EmailUnsubscribePayloadFragmentDoc,
        EmailUserAccountAuthChallengeResponseFragmentDoc: EmailUserAccountAuthChallengeResponseFragmentDoc,
        EmojiFragmentDoc: EmojiFragmentDoc,
        EmojiConnectionFragmentDoc: EmojiConnectionFragmentDoc,
        EmojiPayloadFragmentDoc: EmojiPayloadFragmentDoc,
        EntityExternalLinkFragmentDoc: EntityExternalLinkFragmentDoc,
        EntityExternalLinkConnectionFragmentDoc: EntityExternalLinkConnectionFragmentDoc,
        EntityExternalLinkPayloadFragmentDoc: EntityExternalLinkPayloadFragmentDoc,
        ExternalUserFragmentDoc: ExternalUserFragmentDoc,
        ExternalUserConnectionFragmentDoc: ExternalUserConnectionFragmentDoc,
        FavoriteFragmentDoc: FavoriteFragmentDoc,
        FavoriteConnectionFragmentDoc: FavoriteConnectionFragmentDoc,
        FavoritePayloadFragmentDoc: FavoritePayloadFragmentDoc,
        FetchDataPayloadFragmentDoc: FetchDataPayloadFragmentDoc,
        FileUploadDeletePayloadFragmentDoc: FileUploadDeletePayloadFragmentDoc,
        FrontAttachmentPayloadFragmentDoc: FrontAttachmentPayloadFragmentDoc,
        GitAutomationTargetBranchFragmentDoc: GitAutomationTargetBranchFragmentDoc,
        GitAutomationStateFragmentDoc: GitAutomationStateFragmentDoc,
        GitAutomationStateConnectionFragmentDoc: GitAutomationStateConnectionFragmentDoc,
        GitAutomationStatePayloadFragmentDoc: GitAutomationStatePayloadFragmentDoc,
        GitAutomationTargetBranchPayloadFragmentDoc: GitAutomationTargetBranchPayloadFragmentDoc,
        GitHubCommitIntegrationPayloadFragmentDoc: GitHubCommitIntegrationPayloadFragmentDoc,
        GitHubEnterpriseServerInstallVerificationPayloadFragmentDoc: GitHubEnterpriseServerInstallVerificationPayloadFragmentDoc,
        GitHubEnterpriseServerPayloadFragmentDoc: GitHubEnterpriseServerPayloadFragmentDoc,
        GitLabIntegrationCreatePayloadFragmentDoc: GitLabIntegrationCreatePayloadFragmentDoc,
        ImageUploadFromUrlPayloadFragmentDoc: ImageUploadFromUrlPayloadFragmentDoc,
        InitiativeFragmentDoc: InitiativeFragmentDoc,
        InitiativeConnectionFragmentDoc: InitiativeConnectionFragmentDoc,
        InitiativeHistoryFragmentDoc: InitiativeHistoryFragmentDoc,
        InitiativeHistoryConnectionFragmentDoc: InitiativeHistoryConnectionFragmentDoc,
        InitiativeRelationFragmentDoc: InitiativeRelationFragmentDoc,
        InitiativeRelationConnectionFragmentDoc: InitiativeRelationConnectionFragmentDoc,
        InitiativeRelationPayloadFragmentDoc: InitiativeRelationPayloadFragmentDoc,
        InitiativeToProjectFragmentDoc: InitiativeToProjectFragmentDoc,
        InitiativeToProjectConnectionFragmentDoc: InitiativeToProjectConnectionFragmentDoc,
        InitiativeUpdateFragmentDoc: InitiativeUpdateFragmentDoc,
        InitiativeUpdateConnectionFragmentDoc: InitiativeUpdateConnectionFragmentDoc,
        InitiativeUpdatePayloadFragmentDoc: InitiativeUpdatePayloadFragmentDoc,
        InitiativeUpdateReminderPayloadFragmentDoc: InitiativeUpdateReminderPayloadFragmentDoc,
        IntegrationFragmentDoc: IntegrationFragmentDoc,
        IntegrationConnectionFragmentDoc: IntegrationConnectionFragmentDoc,
        IntegrationHasScopesPayloadFragmentDoc: IntegrationHasScopesPayloadFragmentDoc,
        IntegrationPayloadFragmentDoc: IntegrationPayloadFragmentDoc,
        IntegrationRequestPayloadFragmentDoc: IntegrationRequestPayloadFragmentDoc,
        IntegrationSlackWorkspaceNamePayloadFragmentDoc: IntegrationSlackWorkspaceNamePayloadFragmentDoc,
        IntegrationTemplateFragmentDoc: IntegrationTemplateFragmentDoc,
        IntegrationTemplateConnectionFragmentDoc: IntegrationTemplateConnectionFragmentDoc,
        IntegrationTemplatePayloadFragmentDoc: IntegrationTemplatePayloadFragmentDoc,
        IntegrationsSettingsPayloadFragmentDoc: IntegrationsSettingsPayloadFragmentDoc,
        IssueFragmentDoc: IssueFragmentDoc,
        IssueBatchPayloadFragmentDoc: IssueBatchPayloadFragmentDoc,
        IssueConnectionFragmentDoc: IssueConnectionFragmentDoc,
        IssueFilterSuggestionPayloadFragmentDoc: IssueFilterSuggestionPayloadFragmentDoc,
        IssueRelationHistoryPayloadFragmentDoc: IssueRelationHistoryPayloadFragmentDoc,
        UserFragmentDoc: UserFragmentDoc,
        IssueImportFragmentDoc: IssueImportFragmentDoc,
        IssueLabelFragmentDoc: IssueLabelFragmentDoc,
        IssueHistoryFragmentDoc: IssueHistoryFragmentDoc,
        IssueHistoryConnectionFragmentDoc: IssueHistoryConnectionFragmentDoc,
        IssueImportCheckPayloadFragmentDoc: IssueImportCheckPayloadFragmentDoc,
        IssueImportDeletePayloadFragmentDoc: IssueImportDeletePayloadFragmentDoc,
        IssueImportPayloadFragmentDoc: IssueImportPayloadFragmentDoc,
        IssueLabelConnectionFragmentDoc: IssueLabelConnectionFragmentDoc,
        IssueLabelPayloadFragmentDoc: IssueLabelPayloadFragmentDoc,
        IssuePayloadFragmentDoc: IssuePayloadFragmentDoc,
        IssuePriorityValueFragmentDoc: IssuePriorityValueFragmentDoc,
        IssueRelationFragmentDoc: IssueRelationFragmentDoc,
        IssueRelationConnectionFragmentDoc: IssueRelationConnectionFragmentDoc,
        IssueRelationPayloadFragmentDoc: IssueRelationPayloadFragmentDoc,
        IssueSearchResultFragmentDoc: IssueSearchResultFragmentDoc,
        IssueSearchPayloadFragmentDoc: IssueSearchPayloadFragmentDoc,
        IssueSuggestionMetadataFragmentDoc: IssueSuggestionMetadataFragmentDoc,
        IssueSuggestionFragmentDoc: IssueSuggestionFragmentDoc,
        IssueSuggestionConnectionFragmentDoc: IssueSuggestionConnectionFragmentDoc,
        IssueTitleSuggestionFromCustomerRequestPayloadFragmentDoc: IssueTitleSuggestionFromCustomerRequestPayloadFragmentDoc,
        LogoutResponseFragmentDoc: LogoutResponseFragmentDoc,
        NodeFragmentDoc: NodeFragmentDoc,
        NotificationBatchActionPayloadFragmentDoc: NotificationBatchActionPayloadFragmentDoc,
        NotificationConnectionFragmentDoc: NotificationConnectionFragmentDoc,
        NotificationPayloadFragmentDoc: NotificationPayloadFragmentDoc,
        NotificationSubscriptionConnectionFragmentDoc: NotificationSubscriptionConnectionFragmentDoc,
        NotificationSubscriptionPayloadFragmentDoc: NotificationSubscriptionPayloadFragmentDoc,
        OrganizationAcceptedOrExpiredInviteDetailsPayloadFragmentDoc: OrganizationAcceptedOrExpiredInviteDetailsPayloadFragmentDoc,
        OrganizationCancelDeletePayloadFragmentDoc: OrganizationCancelDeletePayloadFragmentDoc,
        OrganizationDeletePayloadFragmentDoc: OrganizationDeletePayloadFragmentDoc,
        OrganizationExistsPayloadFragmentDoc: OrganizationExistsPayloadFragmentDoc,
        OrganizationInviteFragmentDoc: OrganizationInviteFragmentDoc,
        OrganizationInviteConnectionFragmentDoc: OrganizationInviteConnectionFragmentDoc,
        OrganizationInviteFullDetailsPayloadFragmentDoc: OrganizationInviteFullDetailsPayloadFragmentDoc,
        OrganizationInvitePayloadFragmentDoc: OrganizationInvitePayloadFragmentDoc,
        OrganizationMetaFragmentDoc: OrganizationMetaFragmentDoc,
        OrganizationPayloadFragmentDoc: OrganizationPayloadFragmentDoc,
        OrganizationStartTrialPayloadFragmentDoc: OrganizationStartTrialPayloadFragmentDoc,
        PasskeyLoginStartResponseFragmentDoc: PasskeyLoginStartResponseFragmentDoc,
        ProjectFragmentDoc: ProjectFragmentDoc,
        ProjectConnectionFragmentDoc: ProjectConnectionFragmentDoc,
        ProjectFilterSuggestionPayloadFragmentDoc: ProjectFilterSuggestionPayloadFragmentDoc,
        ProjectHistoryFragmentDoc: ProjectHistoryFragmentDoc,
        ProjectHistoryConnectionFragmentDoc: ProjectHistoryConnectionFragmentDoc,
        ProjectLabelFragmentDoc: ProjectLabelFragmentDoc,
        ProjectLabelConnectionFragmentDoc: ProjectLabelConnectionFragmentDoc,
        ProjectLabelPayloadFragmentDoc: ProjectLabelPayloadFragmentDoc,
        ProjectMilestoneFragmentDoc: ProjectMilestoneFragmentDoc,
        ProjectMilestoneConnectionFragmentDoc: ProjectMilestoneConnectionFragmentDoc,
        ProjectMilestoneMoveIssueToTeamFragmentDoc: ProjectMilestoneMoveIssueToTeamFragmentDoc,
        ProjectMilestoneMoveProjectTeamsFragmentDoc: ProjectMilestoneMoveProjectTeamsFragmentDoc,
        ProjectMilestoneMovePayloadFragmentDoc: ProjectMilestoneMovePayloadFragmentDoc,
        ProjectMilestonePayloadFragmentDoc: ProjectMilestonePayloadFragmentDoc,
        ProjectPayloadFragmentDoc: ProjectPayloadFragmentDoc,
        ProjectRelationFragmentDoc: ProjectRelationFragmentDoc,
        ProjectRelationConnectionFragmentDoc: ProjectRelationConnectionFragmentDoc,
        ProjectRelationPayloadFragmentDoc: ProjectRelationPayloadFragmentDoc,
        ProjectSearchResultFragmentDoc: ProjectSearchResultFragmentDoc,
        ProjectSearchPayloadFragmentDoc: ProjectSearchPayloadFragmentDoc,
        ProjectStatusConnectionFragmentDoc: ProjectStatusConnectionFragmentDoc,
        ProjectStatusCountPayloadFragmentDoc: ProjectStatusCountPayloadFragmentDoc,
        ProjectStatusPayloadFragmentDoc: ProjectStatusPayloadFragmentDoc,
        ProjectUpdateFragmentDoc: ProjectUpdateFragmentDoc,
        ProjectUpdateConnectionFragmentDoc: ProjectUpdateConnectionFragmentDoc,
        ProjectUpdatePayloadFragmentDoc: ProjectUpdatePayloadFragmentDoc,
        ProjectUpdateReminderPayloadFragmentDoc: ProjectUpdateReminderPayloadFragmentDoc,
        PushSubscriptionFragmentDoc: PushSubscriptionFragmentDoc,
        PushSubscriptionPayloadFragmentDoc: PushSubscriptionPayloadFragmentDoc,
        PushSubscriptionTestPayloadFragmentDoc: PushSubscriptionTestPayloadFragmentDoc,
        RateLimitResultPayloadFragmentDoc: RateLimitResultPayloadFragmentDoc,
        RateLimitPayloadFragmentDoc: RateLimitPayloadFragmentDoc,
        ReactionPayloadFragmentDoc: ReactionPayloadFragmentDoc,
        RoadmapFragmentDoc: RoadmapFragmentDoc,
        RoadmapConnectionFragmentDoc: RoadmapConnectionFragmentDoc,
        RoadmapPayloadFragmentDoc: RoadmapPayloadFragmentDoc,
        RoadmapToProjectFragmentDoc: RoadmapToProjectFragmentDoc,
        RoadmapToProjectConnectionFragmentDoc: RoadmapToProjectConnectionFragmentDoc,
        RoadmapToProjectPayloadFragmentDoc: RoadmapToProjectPayloadFragmentDoc,
        SlackChannelConnectPayloadFragmentDoc: SlackChannelConnectPayloadFragmentDoc,
        SsoUrlFromEmailResponseFragmentDoc: SsoUrlFromEmailResponseFragmentDoc,
        SuccessPayloadFragmentDoc: SuccessPayloadFragmentDoc,
        SummaryPayloadFragmentDoc: SummaryPayloadFragmentDoc,
        TeamFragmentDoc: TeamFragmentDoc,
        TeamConnectionFragmentDoc: TeamConnectionFragmentDoc,
        TeamMembershipFragmentDoc: TeamMembershipFragmentDoc,
        TeamMembershipConnectionFragmentDoc: TeamMembershipConnectionFragmentDoc,
        TeamMembershipPayloadFragmentDoc: TeamMembershipPayloadFragmentDoc,
        TeamPayloadFragmentDoc: TeamPayloadFragmentDoc,
        TemplateFragmentDoc: TemplateFragmentDoc,
        TemplateConnectionFragmentDoc: TemplateConnectionFragmentDoc,
        TemplatePayloadFragmentDoc: TemplatePayloadFragmentDoc,
        TimeScheduleEntryFragmentDoc: TimeScheduleEntryFragmentDoc,
        TimeScheduleFragmentDoc: TimeScheduleFragmentDoc,
        TimeScheduleConnectionFragmentDoc: TimeScheduleConnectionFragmentDoc,
        TimeSchedulePayloadFragmentDoc: TimeSchedulePayloadFragmentDoc,
        TriageResponsibilityManualSelectionFragmentDoc: TriageResponsibilityManualSelectionFragmentDoc,
        TriageResponsibilityFragmentDoc: TriageResponsibilityFragmentDoc,
        TriageResponsibilityConnectionFragmentDoc: TriageResponsibilityConnectionFragmentDoc,
        TriageResponsibilityPayloadFragmentDoc: TriageResponsibilityPayloadFragmentDoc,
        UploadFileHeaderFragmentDoc: UploadFileHeaderFragmentDoc,
        UploadFileFragmentDoc: UploadFileFragmentDoc,
        UploadPayloadFragmentDoc: UploadPayloadFragmentDoc,
        UserAdminPayloadFragmentDoc: UserAdminPayloadFragmentDoc,
        UserConnectionFragmentDoc: UserConnectionFragmentDoc,
        UserPayloadFragmentDoc: UserPayloadFragmentDoc,
        UserSettingsFlagPayloadFragmentDoc: UserSettingsFlagPayloadFragmentDoc,
        UserSettingsFlagsResetPayloadFragmentDoc: UserSettingsFlagsResetPayloadFragmentDoc,
        UserSettingsPayloadFragmentDoc: UserSettingsPayloadFragmentDoc,
        ViewPreferencesPayloadFragmentDoc: ViewPreferencesPayloadFragmentDoc,
        WebhookFragmentDoc: WebhookFragmentDoc,
        WebhookConnectionFragmentDoc: WebhookConnectionFragmentDoc,
        WebhookPayloadFragmentDoc: WebhookPayloadFragmentDoc,
        WorkflowStateFragmentDoc: WorkflowStateFragmentDoc,
        WorkflowStateConnectionFragmentDoc: WorkflowStateConnectionFragmentDoc,
        WorkflowStatePayloadFragmentDoc: WorkflowStatePayloadFragmentDoc,
        AdministrableTeamsDocument: AdministrableTeamsDocument,
        AgentActivitiesDocument: AgentActivitiesDocument,
        AgentActivityDocument: AgentActivityDocument,
        AgentSessionDocument: AgentSessionDocument,
        AgentSession_ActivitiesDocument: AgentSession_ActivitiesDocument,
        AgentSessionsDocument: AgentSessionsDocument,
        ApiKeysDocument: ApiKeysDocument,
        ApplicationInfoDocument: ApplicationInfoDocument,
        ApplicationWithAuthorizationDocument: ApplicationWithAuthorizationDocument,
        AttachmentDocument: AttachmentDocument,
        AttachmentIssueDocument: AttachmentIssueDocument,
        AttachmentIssue_AttachmentsDocument: AttachmentIssue_AttachmentsDocument,
        AttachmentIssue_BotActorDocument: AttachmentIssue_BotActorDocument,
        AttachmentIssue_ChildrenDocument: AttachmentIssue_ChildrenDocument,
        AttachmentIssue_CommentsDocument: AttachmentIssue_CommentsDocument,
        AttachmentIssue_FormerAttachmentsDocument: AttachmentIssue_FormerAttachmentsDocument,
        AttachmentIssue_FormerNeedsDocument: AttachmentIssue_FormerNeedsDocument,
        AttachmentIssue_HistoryDocument: AttachmentIssue_HistoryDocument,
        AttachmentIssue_InverseRelationsDocument: AttachmentIssue_InverseRelationsDocument,
        AttachmentIssue_LabelsDocument: AttachmentIssue_LabelsDocument,
        AttachmentIssue_NeedsDocument: AttachmentIssue_NeedsDocument,
        AttachmentIssue_RelationsDocument: AttachmentIssue_RelationsDocument,
        AttachmentIssue_SubscribersDocument: AttachmentIssue_SubscribersDocument,
        AttachmentsDocument: AttachmentsDocument,
        AttachmentsForUrlDocument: AttachmentsForUrlDocument,
        AuditEntriesDocument: AuditEntriesDocument,
        AuditEntryTypesDocument: AuditEntryTypesDocument,
        AuthenticationSessionsDocument: AuthenticationSessionsDocument,
        AvailableUsersDocument: AvailableUsersDocument,
        CommentDocument: CommentDocument,
        Comment_BotActorDocument: Comment_BotActorDocument,
        Comment_ChildrenDocument: Comment_ChildrenDocument,
        Comment_DocumentContentDocument: Comment_DocumentContentDocument,
        Comment_ExternalThreadDocument: Comment_ExternalThreadDocument,
        CommentsDocument: CommentsDocument,
        CustomViewDocument: CustomViewDocument,
        CustomView_InitiativesDocument: CustomView_InitiativesDocument,
        CustomView_IssuesDocument: CustomView_IssuesDocument,
        CustomView_OrganizationViewPreferencesDocument: CustomView_OrganizationViewPreferencesDocument,
        CustomView_OrganizationViewPreferences_PreferencesDocument: CustomView_OrganizationViewPreferences_PreferencesDocument,
        CustomView_ProjectsDocument: CustomView_ProjectsDocument,
        CustomView_UserViewPreferencesDocument: CustomView_UserViewPreferencesDocument,
        CustomView_UserViewPreferences_PreferencesDocument: CustomView_UserViewPreferences_PreferencesDocument,
        CustomView_ViewPreferencesValuesDocument: CustomView_ViewPreferencesValuesDocument,
        CustomViewHasSubscribersDocument: CustomViewHasSubscribersDocument,
        CustomViewsDocument: CustomViewsDocument,
        CustomerDocument: CustomerDocument,
        CustomerNeedDocument: CustomerNeedDocument,
        CustomerNeed_ProjectAttachmentDocument: CustomerNeed_ProjectAttachmentDocument,
        CustomerNeedsDocument: CustomerNeedsDocument,
        CustomerStatusDocument: CustomerStatusDocument,
        CustomerStatusesDocument: CustomerStatusesDocument,
        CustomerTierDocument: CustomerTierDocument,
        CustomerTiersDocument: CustomerTiersDocument,
        CustomersDocument: CustomersDocument,
        CycleDocument: CycleDocument,
        Cycle_IssuesDocument: Cycle_IssuesDocument,
        Cycle_UncompletedIssuesUponCloseDocument: Cycle_UncompletedIssuesUponCloseDocument,
        CyclesDocument: CyclesDocument,
        DocumentDocument: DocumentDocument,
        Document_CommentsDocument: Document_CommentsDocument,
        DocumentContentHistoryDocument: DocumentContentHistoryDocument,
        DocumentsDocument: DocumentsDocument,
        EmailIntakeAddressDocument: EmailIntakeAddressDocument,
        EmailIntakeAddress_SesDomainIdentityDocument: EmailIntakeAddress_SesDomainIdentityDocument,
        EmojiDocument: EmojiDocument,
        EmojisDocument: EmojisDocument,
        EntityExternalLinkDocument: EntityExternalLinkDocument,
        ExternalUserDocument: ExternalUserDocument,
        ExternalUsersDocument: ExternalUsersDocument,
        FavoriteDocument: FavoriteDocument,
        Favorite_ChildrenDocument: Favorite_ChildrenDocument,
        FavoritesDocument: FavoritesDocument,
        InitiativeDocument: InitiativeDocument,
        Initiative_DocumentContentDocument: Initiative_DocumentContentDocument,
        Initiative_DocumentsDocument: Initiative_DocumentsDocument,
        Initiative_HistoryDocument: Initiative_HistoryDocument,
        Initiative_LinksDocument: Initiative_LinksDocument,
        Initiative_ProjectsDocument: Initiative_ProjectsDocument,
        Initiative_SubInitiativesDocument: Initiative_SubInitiativesDocument,
        InitiativeRelationDocument: InitiativeRelationDocument,
        InitiativeRelationsDocument: InitiativeRelationsDocument,
        InitiativeToProjectDocument: InitiativeToProjectDocument,
        InitiativeToProjectsDocument: InitiativeToProjectsDocument,
        InitiativeUpdateDocument: InitiativeUpdateDocument,
        InitiativeUpdate_CommentsDocument: InitiativeUpdate_CommentsDocument,
        InitiativeUpdatesDocument: InitiativeUpdatesDocument,
        InitiativesDocument: InitiativesDocument,
        IntegrationDocument: IntegrationDocument,
        IntegrationHasScopesDocument: IntegrationHasScopesDocument,
        IntegrationTemplateDocument: IntegrationTemplateDocument,
        IntegrationTemplatesDocument: IntegrationTemplatesDocument,
        IntegrationsDocument: IntegrationsDocument,
        IntegrationsSettingsDocument: IntegrationsSettingsDocument,
        IssueDocument: IssueDocument,
        Issue_AttachmentsDocument: Issue_AttachmentsDocument,
        Issue_BotActorDocument: Issue_BotActorDocument,
        Issue_ChildrenDocument: Issue_ChildrenDocument,
        Issue_CommentsDocument: Issue_CommentsDocument,
        Issue_FormerAttachmentsDocument: Issue_FormerAttachmentsDocument,
        Issue_FormerNeedsDocument: Issue_FormerNeedsDocument,
        Issue_HistoryDocument: Issue_HistoryDocument,
        Issue_InverseRelationsDocument: Issue_InverseRelationsDocument,
        Issue_LabelsDocument: Issue_LabelsDocument,
        Issue_NeedsDocument: Issue_NeedsDocument,
        Issue_RelationsDocument: Issue_RelationsDocument,
        Issue_SubscribersDocument: Issue_SubscribersDocument,
        IssueFigmaFileKeySearchDocument: IssueFigmaFileKeySearchDocument,
        IssueFilterSuggestionDocument: IssueFilterSuggestionDocument,
        IssueImportCheckCsvDocument: IssueImportCheckCsvDocument,
        IssueImportCheckSyncDocument: IssueImportCheckSyncDocument,
        IssueImportJqlCheckDocument: IssueImportJqlCheckDocument,
        IssueLabelDocument: IssueLabelDocument,
        IssueLabel_ChildrenDocument: IssueLabel_ChildrenDocument,
        IssueLabel_IssuesDocument: IssueLabel_IssuesDocument,
        IssueLabelsDocument: IssueLabelsDocument,
        IssuePriorityValuesDocument: IssuePriorityValuesDocument,
        IssueRelationDocument: IssueRelationDocument,
        IssueRelationsDocument: IssueRelationsDocument,
        IssueSearchDocument: IssueSearchDocument,
        IssueTitleSuggestionFromCustomerRequestDocument: IssueTitleSuggestionFromCustomerRequestDocument,
        IssueVcsBranchSearchDocument: IssueVcsBranchSearchDocument,
        IssueVcsBranchSearch_AttachmentsDocument: IssueVcsBranchSearch_AttachmentsDocument,
        IssueVcsBranchSearch_BotActorDocument: IssueVcsBranchSearch_BotActorDocument,
        IssueVcsBranchSearch_ChildrenDocument: IssueVcsBranchSearch_ChildrenDocument,
        IssueVcsBranchSearch_CommentsDocument: IssueVcsBranchSearch_CommentsDocument,
        IssueVcsBranchSearch_FormerAttachmentsDocument: IssueVcsBranchSearch_FormerAttachmentsDocument,
        IssueVcsBranchSearch_FormerNeedsDocument: IssueVcsBranchSearch_FormerNeedsDocument,
        IssueVcsBranchSearch_HistoryDocument: IssueVcsBranchSearch_HistoryDocument,
        IssueVcsBranchSearch_InverseRelationsDocument: IssueVcsBranchSearch_InverseRelationsDocument,
        IssueVcsBranchSearch_LabelsDocument: IssueVcsBranchSearch_LabelsDocument,
        IssueVcsBranchSearch_NeedsDocument: IssueVcsBranchSearch_NeedsDocument,
        IssueVcsBranchSearch_RelationsDocument: IssueVcsBranchSearch_RelationsDocument,
        IssueVcsBranchSearch_SubscribersDocument: IssueVcsBranchSearch_SubscribersDocument,
        IssuesDocument: IssuesDocument,
        NotificationDocument: NotificationDocument,
        NotificationSubscriptionDocument: NotificationSubscriptionDocument,
        NotificationSubscriptionsDocument: NotificationSubscriptionsDocument,
        NotificationsDocument: NotificationsDocument,
        OrganizationDocument: OrganizationDocument,
        Organization_IntegrationsDocument: Organization_IntegrationsDocument,
        Organization_LabelsDocument: Organization_LabelsDocument,
        Organization_ProjectLabelsDocument: Organization_ProjectLabelsDocument,
        Organization_SubscriptionDocument: Organization_SubscriptionDocument,
        Organization_TeamsDocument: Organization_TeamsDocument,
        Organization_TemplatesDocument: Organization_TemplatesDocument,
        Organization_UsersDocument: Organization_UsersDocument,
        OrganizationExistsDocument: OrganizationExistsDocument,
        OrganizationInviteDocument: OrganizationInviteDocument,
        OrganizationInvitesDocument: OrganizationInvitesDocument,
        ProjectDocument: ProjectDocument,
        Project_CommentsDocument: Project_CommentsDocument,
        Project_DocumentContentDocument: Project_DocumentContentDocument,
        Project_DocumentsDocument: Project_DocumentsDocument,
        Project_ExternalLinksDocument: Project_ExternalLinksDocument,
        Project_HistoryDocument: Project_HistoryDocument,
        Project_InitiativesDocument: Project_InitiativesDocument,
        Project_InverseRelationsDocument: Project_InverseRelationsDocument,
        Project_IssuesDocument: Project_IssuesDocument,
        Project_LabelsDocument: Project_LabelsDocument,
        Project_MembersDocument: Project_MembersDocument,
        Project_NeedsDocument: Project_NeedsDocument,
        Project_ProjectMilestonesDocument: Project_ProjectMilestonesDocument,
        Project_ProjectUpdatesDocument: Project_ProjectUpdatesDocument,
        Project_RelationsDocument: Project_RelationsDocument,
        Project_TeamsDocument: Project_TeamsDocument,
        ProjectFilterSuggestionDocument: ProjectFilterSuggestionDocument,
        ProjectLabelDocument: ProjectLabelDocument,
        ProjectLabel_ChildrenDocument: ProjectLabel_ChildrenDocument,
        ProjectLabel_ProjectsDocument: ProjectLabel_ProjectsDocument,
        ProjectLabelsDocument: ProjectLabelsDocument,
        ProjectMilestoneDocument: ProjectMilestoneDocument,
        ProjectMilestone_DocumentContentDocument: ProjectMilestone_DocumentContentDocument,
        ProjectMilestone_IssuesDocument: ProjectMilestone_IssuesDocument,
        ProjectMilestonesDocument: ProjectMilestonesDocument,
        ProjectRelationDocument: ProjectRelationDocument,
        ProjectRelationsDocument: ProjectRelationsDocument,
        ProjectStatusDocument: ProjectStatusDocument,
        ProjectStatusesDocument: ProjectStatusesDocument,
        ProjectUpdateDocument: ProjectUpdateDocument,
        ProjectUpdate_CommentsDocument: ProjectUpdate_CommentsDocument,
        ProjectUpdatesDocument: ProjectUpdatesDocument,
        ProjectsDocument: ProjectsDocument,
        PushSubscriptionTestDocument: PushSubscriptionTestDocument,
        RateLimitStatusDocument: RateLimitStatusDocument,
        RoadmapDocument: RoadmapDocument,
        Roadmap_ProjectsDocument: Roadmap_ProjectsDocument,
        RoadmapToProjectDocument: RoadmapToProjectDocument,
        RoadmapToProjectsDocument: RoadmapToProjectsDocument,
        RoadmapsDocument: RoadmapsDocument,
        SearchDocumentsDocument: SearchDocumentsDocument,
        SearchDocuments_ArchivePayloadDocument: SearchDocuments_ArchivePayloadDocument,
        SearchIssuesDocument: SearchIssuesDocument,
        SearchIssues_ArchivePayloadDocument: SearchIssues_ArchivePayloadDocument,
        SearchProjectsDocument: SearchProjectsDocument,
        SearchProjects_ArchivePayloadDocument: SearchProjects_ArchivePayloadDocument,
        SemanticSearchDocument: SemanticSearchDocument,
        SsoUrlFromEmailDocument: SsoUrlFromEmailDocument,
        TeamDocument: TeamDocument,
        Team_CyclesDocument: Team_CyclesDocument,
        Team_GitAutomationStatesDocument: Team_GitAutomationStatesDocument,
        Team_IssuesDocument: Team_IssuesDocument,
        Team_LabelsDocument: Team_LabelsDocument,
        Team_MembersDocument: Team_MembersDocument,
        Team_MembershipsDocument: Team_MembershipsDocument,
        Team_ProjectsDocument: Team_ProjectsDocument,
        Team_StatesDocument: Team_StatesDocument,
        Team_TemplatesDocument: Team_TemplatesDocument,
        Team_WebhooksDocument: Team_WebhooksDocument,
        TeamMembershipDocument: TeamMembershipDocument,
        TeamMembershipsDocument: TeamMembershipsDocument,
        TeamsDocument: TeamsDocument,
        TemplateDocument: TemplateDocument,
        TemplatesDocument: TemplatesDocument,
        TemplatesForIntegrationDocument: TemplatesForIntegrationDocument,
        TimeScheduleDocument: TimeScheduleDocument,
        TimeSchedulesDocument: TimeSchedulesDocument,
        TriageResponsibilitiesDocument: TriageResponsibilitiesDocument,
        TriageResponsibilityDocument: TriageResponsibilityDocument,
        TriageResponsibility_ManualSelectionDocument: TriageResponsibility_ManualSelectionDocument,
        UserDocument: UserDocument,
        User_AssignedIssuesDocument: User_AssignedIssuesDocument,
        User_CreatedIssuesDocument: User_CreatedIssuesDocument,
        User_DelegatedIssuesDocument: User_DelegatedIssuesDocument,
        User_DraftsDocument: User_DraftsDocument,
        User_TeamMembershipsDocument: User_TeamMembershipsDocument,
        User_TeamsDocument: User_TeamsDocument,
        UserSettingsDocument: UserSettingsDocument,
        UserSettings_NotificationCategoryPreferencesDocument: UserSettings_NotificationCategoryPreferencesDocument,
        UserSettings_NotificationCategoryPreferences_AppsAndIntegrationsDocument: UserSettings_NotificationCategoryPreferences_AppsAndIntegrationsDocument,
        UserSettings_NotificationCategoryPreferences_AssignmentsDocument: UserSettings_NotificationCategoryPreferences_AssignmentsDocument,
        UserSettings_NotificationCategoryPreferences_CommentsAndRepliesDocument: UserSettings_NotificationCategoryPreferences_CommentsAndRepliesDocument,
        UserSettings_NotificationCategoryPreferences_CustomersDocument: UserSettings_NotificationCategoryPreferences_CustomersDocument,
        UserSettings_NotificationCategoryPreferences_DocumentChangesDocument: UserSettings_NotificationCategoryPreferences_DocumentChangesDocument,
        UserSettings_NotificationCategoryPreferences_FeedDocument: UserSettings_NotificationCategoryPreferences_FeedDocument,
        UserSettings_NotificationCategoryPreferences_MentionsDocument: UserSettings_NotificationCategoryPreferences_MentionsDocument,
        UserSettings_NotificationCategoryPreferences_PostsAndUpdatesDocument: UserSettings_NotificationCategoryPreferences_PostsAndUpdatesDocument,
        UserSettings_NotificationCategoryPreferences_ReactionsDocument: UserSettings_NotificationCategoryPreferences_ReactionsDocument,
        UserSettings_NotificationCategoryPreferences_RemindersDocument: UserSettings_NotificationCategoryPreferences_RemindersDocument,
        UserSettings_NotificationCategoryPreferences_ReviewsDocument: UserSettings_NotificationCategoryPreferences_ReviewsDocument,
        UserSettings_NotificationCategoryPreferences_StatusChangesDocument: UserSettings_NotificationCategoryPreferences_StatusChangesDocument,
        UserSettings_NotificationCategoryPreferences_SubscriptionsDocument: UserSettings_NotificationCategoryPreferences_SubscriptionsDocument,
        UserSettings_NotificationCategoryPreferences_SystemDocument: UserSettings_NotificationCategoryPreferences_SystemDocument,
        UserSettings_NotificationCategoryPreferences_TriageDocument: UserSettings_NotificationCategoryPreferences_TriageDocument,
        UserSettings_NotificationChannelPreferencesDocument: UserSettings_NotificationChannelPreferencesDocument,
        UserSettings_NotificationDeliveryPreferencesDocument: UserSettings_NotificationDeliveryPreferencesDocument,
        UserSettings_NotificationDeliveryPreferences_MobileDocument: UserSettings_NotificationDeliveryPreferences_MobileDocument,
        UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleDocument: UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleDocument,
        UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayDocument: UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayDocument,
        UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayDocument: UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayDocument,
        UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayDocument: UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayDocument,
        UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayDocument: UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayDocument,
        UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayDocument: UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayDocument,
        UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayDocument: UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayDocument,
        UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayDocument: UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayDocument,
        UsersDocument: UsersDocument,
        VerifyGitHubEnterpriseServerInstallationDocument: VerifyGitHubEnterpriseServerInstallationDocument,
        ViewerDocument: ViewerDocument,
        Viewer_AssignedIssuesDocument: Viewer_AssignedIssuesDocument,
        Viewer_CreatedIssuesDocument: Viewer_CreatedIssuesDocument,
        Viewer_DelegatedIssuesDocument: Viewer_DelegatedIssuesDocument,
        Viewer_DraftsDocument: Viewer_DraftsDocument,
        Viewer_TeamMembershipsDocument: Viewer_TeamMembershipsDocument,
        Viewer_TeamsDocument: Viewer_TeamsDocument,
        WebhookDocument: WebhookDocument,
        WebhooksDocument: WebhooksDocument,
        WorkflowStateDocument: WorkflowStateDocument,
        WorkflowState_IssuesDocument: WorkflowState_IssuesDocument,
        WorkflowStatesDocument: WorkflowStatesDocument,
        CreateAgentActivityDocument: CreateAgentActivityDocument,
        AgentSessionCreateOnCommentDocument: AgentSessionCreateOnCommentDocument,
        AgentSessionCreateOnIssueDocument: AgentSessionCreateOnIssueDocument,
        AgentSessionUpdateExternalUrlDocument: AgentSessionUpdateExternalUrlDocument,
        AirbyteIntegrationConnectDocument: AirbyteIntegrationConnectDocument,
        CreateAttachmentDocument: CreateAttachmentDocument,
        DeleteAttachmentDocument: DeleteAttachmentDocument,
        AttachmentLinkDiscordDocument: AttachmentLinkDiscordDocument,
        AttachmentLinkFrontDocument: AttachmentLinkFrontDocument,
        AttachmentLinkGitHubIssueDocument: AttachmentLinkGitHubIssueDocument,
        AttachmentLinkGitHubPrDocument: AttachmentLinkGitHubPrDocument,
        AttachmentLinkGitLabMrDocument: AttachmentLinkGitLabMrDocument,
        AttachmentLinkIntercomDocument: AttachmentLinkIntercomDocument,
        AttachmentLinkJiraIssueDocument: AttachmentLinkJiraIssueDocument,
        AttachmentLinkSalesforceDocument: AttachmentLinkSalesforceDocument,
        AttachmentLinkSlackDocument: AttachmentLinkSlackDocument,
        AttachmentLinkUrlDocument: AttachmentLinkUrlDocument,
        AttachmentLinkZendeskDocument: AttachmentLinkZendeskDocument,
        AttachmentSyncToSlackDocument: AttachmentSyncToSlackDocument,
        UpdateAttachmentDocument: UpdateAttachmentDocument,
        CreateCommentDocument: CreateCommentDocument,
        DeleteCommentDocument: DeleteCommentDocument,
        CommentResolveDocument: CommentResolveDocument,
        CommentUnresolveDocument: CommentUnresolveDocument,
        UpdateCommentDocument: UpdateCommentDocument,
        CreateContactDocument: CreateContactDocument,
        CreateCsvExportReportDocument: CreateCsvExportReportDocument,
        CreateInitiativeUpdateReminderDocument: CreateInitiativeUpdateReminderDocument,
        CreateOrganizationFromOnboardingDocument: CreateOrganizationFromOnboardingDocument,
        CreateProjectUpdateReminderDocument: CreateProjectUpdateReminderDocument,
        CreateCustomViewDocument: CreateCustomViewDocument,
        DeleteCustomViewDocument: DeleteCustomViewDocument,
        UpdateCustomViewDocument: UpdateCustomViewDocument,
        CreateCustomerDocument: CreateCustomerDocument,
        DeleteCustomerDocument: DeleteCustomerDocument,
        CustomerMergeDocument: CustomerMergeDocument,
        ArchiveCustomerNeedDocument: ArchiveCustomerNeedDocument,
        CreateCustomerNeedDocument: CreateCustomerNeedDocument,
        CustomerNeedCreateFromAttachmentDocument: CustomerNeedCreateFromAttachmentDocument,
        DeleteCustomerNeedDocument: DeleteCustomerNeedDocument,
        UnarchiveCustomerNeedDocument: UnarchiveCustomerNeedDocument,
        UpdateCustomerNeedDocument: UpdateCustomerNeedDocument,
        CreateCustomerStatusDocument: CreateCustomerStatusDocument,
        DeleteCustomerStatusDocument: DeleteCustomerStatusDocument,
        UpdateCustomerStatusDocument: UpdateCustomerStatusDocument,
        CreateCustomerTierDocument: CreateCustomerTierDocument,
        DeleteCustomerTierDocument: DeleteCustomerTierDocument,
        UpdateCustomerTierDocument: UpdateCustomerTierDocument,
        UpdateCustomerDocument: UpdateCustomerDocument,
        CustomerUpsertDocument: CustomerUpsertDocument,
        ArchiveCycleDocument: ArchiveCycleDocument,
        CreateCycleDocument: CreateCycleDocument,
        CycleShiftAllDocument: CycleShiftAllDocument,
        CycleStartUpcomingCycleTodayDocument: CycleStartUpcomingCycleTodayDocument,
        UpdateCycleDocument: UpdateCycleDocument,
        CreateDocumentDocument: CreateDocumentDocument,
        DeleteDocumentDocument: DeleteDocumentDocument,
        UnarchiveDocumentDocument: UnarchiveDocumentDocument,
        UpdateDocumentDocument: UpdateDocumentDocument,
        CreateEmailIntakeAddressDocument: CreateEmailIntakeAddressDocument,
        DeleteEmailIntakeAddressDocument: DeleteEmailIntakeAddressDocument,
        EmailIntakeAddressRotateDocument: EmailIntakeAddressRotateDocument,
        UpdateEmailIntakeAddressDocument: UpdateEmailIntakeAddressDocument,
        EmailTokenUserAccountAuthDocument: EmailTokenUserAccountAuthDocument,
        EmailUnsubscribeDocument: EmailUnsubscribeDocument,
        EmailUserAccountAuthChallengeDocument: EmailUserAccountAuthChallengeDocument,
        CreateEmojiDocument: CreateEmojiDocument,
        DeleteEmojiDocument: DeleteEmojiDocument,
        CreateEntityExternalLinkDocument: CreateEntityExternalLinkDocument,
        DeleteEntityExternalLinkDocument: DeleteEntityExternalLinkDocument,
        UpdateEntityExternalLinkDocument: UpdateEntityExternalLinkDocument,
        CreateFavoriteDocument: CreateFavoriteDocument,
        DeleteFavoriteDocument: DeleteFavoriteDocument,
        UpdateFavoriteDocument: UpdateFavoriteDocument,
        FileUploadDocument: FileUploadDocument,
        CreateGitAutomationStateDocument: CreateGitAutomationStateDocument,
        DeleteGitAutomationStateDocument: DeleteGitAutomationStateDocument,
        UpdateGitAutomationStateDocument: UpdateGitAutomationStateDocument,
        CreateGitAutomationTargetBranchDocument: CreateGitAutomationTargetBranchDocument,
        DeleteGitAutomationTargetBranchDocument: DeleteGitAutomationTargetBranchDocument,
        UpdateGitAutomationTargetBranchDocument: UpdateGitAutomationTargetBranchDocument,
        GoogleUserAccountAuthDocument: GoogleUserAccountAuthDocument,
        ImageUploadFromUrlDocument: ImageUploadFromUrlDocument,
        ImportFileUploadDocument: ImportFileUploadDocument,
        ArchiveInitiativeDocument: ArchiveInitiativeDocument,
        CreateInitiativeDocument: CreateInitiativeDocument,
        DeleteInitiativeDocument: DeleteInitiativeDocument,
        CreateInitiativeRelationDocument: CreateInitiativeRelationDocument,
        DeleteInitiativeRelationDocument: DeleteInitiativeRelationDocument,
        UpdateInitiativeRelationDocument: UpdateInitiativeRelationDocument,
        CreateInitiativeToProjectDocument: CreateInitiativeToProjectDocument,
        DeleteInitiativeToProjectDocument: DeleteInitiativeToProjectDocument,
        UpdateInitiativeToProjectDocument: UpdateInitiativeToProjectDocument,
        UnarchiveInitiativeDocument: UnarchiveInitiativeDocument,
        UpdateInitiativeDocument: UpdateInitiativeDocument,
        ArchiveInitiativeUpdateDocument: ArchiveInitiativeUpdateDocument,
        CreateInitiativeUpdateDocument: CreateInitiativeUpdateDocument,
        UnarchiveInitiativeUpdateDocument: UnarchiveInitiativeUpdateDocument,
        UpdateInitiativeUpdateDocument: UpdateInitiativeUpdateDocument,
        ArchiveIntegrationDocument: ArchiveIntegrationDocument,
        IntegrationAsksConnectChannelDocument: IntegrationAsksConnectChannelDocument,
        DeleteIntegrationDocument: DeleteIntegrationDocument,
        IntegrationDiscordDocument: IntegrationDiscordDocument,
        IntegrationFigmaDocument: IntegrationFigmaDocument,
        IntegrationFrontDocument: IntegrationFrontDocument,
        IntegrationGitHubEnterpriseServerConnectDocument: IntegrationGitHubEnterpriseServerConnectDocument,
        IntegrationGitHubPersonalDocument: IntegrationGitHubPersonalDocument,
        CreateIntegrationGithubCommitDocument: CreateIntegrationGithubCommitDocument,
        IntegrationGithubConnectDocument: IntegrationGithubConnectDocument,
        IntegrationGithubImportConnectDocument: IntegrationGithubImportConnectDocument,
        IntegrationGithubImportRefreshDocument: IntegrationGithubImportRefreshDocument,
        IntegrationGitlabConnectDocument: IntegrationGitlabConnectDocument,
        IntegrationGongDocument: IntegrationGongDocument,
        IntegrationGoogleSheetsDocument: IntegrationGoogleSheetsDocument,
        IntegrationIntercomDocument: IntegrationIntercomDocument,
        DeleteIntegrationIntercomDocument: DeleteIntegrationIntercomDocument,
        UpdateIntegrationIntercomSettingsDocument: UpdateIntegrationIntercomSettingsDocument,
        IntegrationJiraPersonalDocument: IntegrationJiraPersonalDocument,
        IntegrationLoomDocument: IntegrationLoomDocument,
        IntegrationRequestDocument: IntegrationRequestDocument,
        IntegrationSalesforceDocument: IntegrationSalesforceDocument,
        IntegrationSentryConnectDocument: IntegrationSentryConnectDocument,
        IntegrationSlackDocument: IntegrationSlackDocument,
        IntegrationSlackAsksDocument: IntegrationSlackAsksDocument,
        IntegrationSlackCustomViewNotificationsDocument: IntegrationSlackCustomViewNotificationsDocument,
        IntegrationSlackCustomerChannelLinkDocument: IntegrationSlackCustomerChannelLinkDocument,
        IntegrationSlackImportEmojisDocument: IntegrationSlackImportEmojisDocument,
        IntegrationSlackOrAsksUpdateSlackTeamNameDocument: IntegrationSlackOrAsksUpdateSlackTeamNameDocument,
        IntegrationSlackOrgProjectUpdatesPostDocument: IntegrationSlackOrgProjectUpdatesPostDocument,
        IntegrationSlackPersonalDocument: IntegrationSlackPersonalDocument,
        IntegrationSlackPostDocument: IntegrationSlackPostDocument,
        IntegrationSlackProjectPostDocument: IntegrationSlackProjectPostDocument,
        CreateIntegrationTemplateDocument: CreateIntegrationTemplateDocument,
        DeleteIntegrationTemplateDocument: DeleteIntegrationTemplateDocument,
        IntegrationZendeskDocument: IntegrationZendeskDocument,
        CreateIntegrationsSettingsDocument: CreateIntegrationsSettingsDocument,
        UpdateIntegrationsSettingsDocument: UpdateIntegrationsSettingsDocument,
        IssueAddLabelDocument: IssueAddLabelDocument,
        ArchiveIssueDocument: ArchiveIssueDocument,
        CreateIssueBatchDocument: CreateIssueBatchDocument,
        UpdateIssueBatchDocument: UpdateIssueBatchDocument,
        CreateIssueDocument: CreateIssueDocument,
        DeleteIssueDocument: DeleteIssueDocument,
        IssueExternalSyncDisableDocument: IssueExternalSyncDisableDocument,
        IssueImportCreateAsanaDocument: IssueImportCreateAsanaDocument,
        IssueImportCreateCsvJiraDocument: IssueImportCreateCsvJiraDocument,
        IssueImportCreateClubhouseDocument: IssueImportCreateClubhouseDocument,
        IssueImportCreateGithubDocument: IssueImportCreateGithubDocument,
        IssueImportCreateJiraDocument: IssueImportCreateJiraDocument,
        DeleteIssueImportDocument: DeleteIssueImportDocument,
        IssueImportProcessDocument: IssueImportProcessDocument,
        UpdateIssueImportDocument: UpdateIssueImportDocument,
        CreateIssueLabelDocument: CreateIssueLabelDocument,
        DeleteIssueLabelDocument: DeleteIssueLabelDocument,
        UpdateIssueLabelDocument: UpdateIssueLabelDocument,
        CreateIssueRelationDocument: CreateIssueRelationDocument,
        DeleteIssueRelationDocument: DeleteIssueRelationDocument,
        UpdateIssueRelationDocument: UpdateIssueRelationDocument,
        IssueReminderDocument: IssueReminderDocument,
        IssueRemoveLabelDocument: IssueRemoveLabelDocument,
        IssueSubscribeDocument: IssueSubscribeDocument,
        UnarchiveIssueDocument: UnarchiveIssueDocument,
        IssueUnsubscribeDocument: IssueUnsubscribeDocument,
        UpdateIssueDocument: UpdateIssueDocument,
        JoinOrganizationFromOnboardingDocument: JoinOrganizationFromOnboardingDocument,
        LeaveOrganizationDocument: LeaveOrganizationDocument,
        LogoutDocument: LogoutDocument,
        LogoutAllSessionsDocument: LogoutAllSessionsDocument,
        LogoutOtherSessionsDocument: LogoutOtherSessionsDocument,
        LogoutSessionDocument: LogoutSessionDocument,
        ArchiveNotificationDocument: ArchiveNotificationDocument,
        NotificationArchiveAllDocument: NotificationArchiveAllDocument,
        UpdateNotificationCategoryChannelSubscriptionDocument: UpdateNotificationCategoryChannelSubscriptionDocument,
        NotificationMarkReadAllDocument: NotificationMarkReadAllDocument,
        NotificationMarkUnreadAllDocument: NotificationMarkUnreadAllDocument,
        NotificationSnoozeAllDocument: NotificationSnoozeAllDocument,
        CreateNotificationSubscriptionDocument: CreateNotificationSubscriptionDocument,
        DeleteNotificationSubscriptionDocument: DeleteNotificationSubscriptionDocument,
        UpdateNotificationSubscriptionDocument: UpdateNotificationSubscriptionDocument,
        UnarchiveNotificationDocument: UnarchiveNotificationDocument,
        NotificationUnsnoozeAllDocument: NotificationUnsnoozeAllDocument,
        UpdateNotificationDocument: UpdateNotificationDocument,
        DeleteOrganizationCancelDocument: DeleteOrganizationCancelDocument,
        DeleteOrganizationDocument: DeleteOrganizationDocument,
        OrganizationDeleteChallengeDocument: OrganizationDeleteChallengeDocument,
        DeleteOrganizationDomainDocument: DeleteOrganizationDomainDocument,
        CreateOrganizationInviteDocument: CreateOrganizationInviteDocument,
        DeleteOrganizationInviteDocument: DeleteOrganizationInviteDocument,
        UpdateOrganizationInviteDocument: UpdateOrganizationInviteDocument,
        OrganizationStartTrialDocument: OrganizationStartTrialDocument,
        OrganizationStartTrialForPlanDocument: OrganizationStartTrialForPlanDocument,
        UpdateOrganizationDocument: UpdateOrganizationDocument,
        ProjectAddLabelDocument: ProjectAddLabelDocument,
        ArchiveProjectDocument: ArchiveProjectDocument,
        CreateProjectDocument: CreateProjectDocument,
        DeleteProjectDocument: DeleteProjectDocument,
        CreateProjectLabelDocument: CreateProjectLabelDocument,
        DeleteProjectLabelDocument: DeleteProjectLabelDocument,
        UpdateProjectLabelDocument: UpdateProjectLabelDocument,
        CreateProjectMilestoneDocument: CreateProjectMilestoneDocument,
        DeleteProjectMilestoneDocument: DeleteProjectMilestoneDocument,
        UpdateProjectMilestoneDocument: UpdateProjectMilestoneDocument,
        CreateProjectRelationDocument: CreateProjectRelationDocument,
        DeleteProjectRelationDocument: DeleteProjectRelationDocument,
        UpdateProjectRelationDocument: UpdateProjectRelationDocument,
        ProjectRemoveLabelDocument: ProjectRemoveLabelDocument,
        ArchiveProjectStatusDocument: ArchiveProjectStatusDocument,
        CreateProjectStatusDocument: CreateProjectStatusDocument,
        UnarchiveProjectStatusDocument: UnarchiveProjectStatusDocument,
        UpdateProjectStatusDocument: UpdateProjectStatusDocument,
        UnarchiveProjectDocument: UnarchiveProjectDocument,
        UpdateProjectDocument: UpdateProjectDocument,
        ArchiveProjectUpdateDocument: ArchiveProjectUpdateDocument,
        CreateProjectUpdateDocument: CreateProjectUpdateDocument,
        DeleteProjectUpdateDocument: DeleteProjectUpdateDocument,
        UnarchiveProjectUpdateDocument: UnarchiveProjectUpdateDocument,
        UpdateProjectUpdateDocument: UpdateProjectUpdateDocument,
        CreatePushSubscriptionDocument: CreatePushSubscriptionDocument,
        DeletePushSubscriptionDocument: DeletePushSubscriptionDocument,
        CreateReactionDocument: CreateReactionDocument,
        DeleteReactionDocument: DeleteReactionDocument,
        RefreshGoogleSheetsDataDocument: RefreshGoogleSheetsDataDocument,
        ResendOrganizationInviteDocument: ResendOrganizationInviteDocument,
        ResendOrganizationInviteByEmailDocument: ResendOrganizationInviteByEmailDocument,
        ArchiveRoadmapDocument: ArchiveRoadmapDocument,
        CreateRoadmapDocument: CreateRoadmapDocument,
        DeleteRoadmapDocument: DeleteRoadmapDocument,
        CreateRoadmapToProjectDocument: CreateRoadmapToProjectDocument,
        DeleteRoadmapToProjectDocument: DeleteRoadmapToProjectDocument,
        UpdateRoadmapToProjectDocument: UpdateRoadmapToProjectDocument,
        UnarchiveRoadmapDocument: UnarchiveRoadmapDocument,
        UpdateRoadmapDocument: UpdateRoadmapDocument,
        SamlTokenUserAccountAuthDocument: SamlTokenUserAccountAuthDocument,
        CreateTeamDocument: CreateTeamDocument,
        DeleteTeamCyclesDocument: DeleteTeamCyclesDocument,
        DeleteTeamDocument: DeleteTeamDocument,
        DeleteTeamKeyDocument: DeleteTeamKeyDocument,
        CreateTeamMembershipDocument: CreateTeamMembershipDocument,
        DeleteTeamMembershipDocument: DeleteTeamMembershipDocument,
        UpdateTeamMembershipDocument: UpdateTeamMembershipDocument,
        UnarchiveTeamDocument: UnarchiveTeamDocument,
        UpdateTeamDocument: UpdateTeamDocument,
        CreateTemplateDocument: CreateTemplateDocument,
        DeleteTemplateDocument: DeleteTemplateDocument,
        UpdateTemplateDocument: UpdateTemplateDocument,
        CreateTimeScheduleDocument: CreateTimeScheduleDocument,
        DeleteTimeScheduleDocument: DeleteTimeScheduleDocument,
        TimeScheduleRefreshIntegrationScheduleDocument: TimeScheduleRefreshIntegrationScheduleDocument,
        UpdateTimeScheduleDocument: UpdateTimeScheduleDocument,
        TimeScheduleUpsertExternalDocument: TimeScheduleUpsertExternalDocument,
        CreateTriageResponsibilityDocument: CreateTriageResponsibilityDocument,
        DeleteTriageResponsibilityDocument: DeleteTriageResponsibilityDocument,
        UpdateTriageResponsibilityDocument: UpdateTriageResponsibilityDocument,
        UserDemoteAdminDocument: UserDemoteAdminDocument,
        UserDemoteMemberDocument: UserDemoteMemberDocument,
        UserDiscordConnectDocument: UserDiscordConnectDocument,
        UserExternalUserDisconnectDocument: UserExternalUserDisconnectDocument,
        UpdateUserFlagDocument: UpdateUserFlagDocument,
        UserPromoteAdminDocument: UserPromoteAdminDocument,
        UserPromoteMemberDocument: UserPromoteMemberDocument,
        UserSettingsFlagsResetDocument: UserSettingsFlagsResetDocument,
        UpdateUserSettingsDocument: UpdateUserSettingsDocument,
        SuspendUserDocument: SuspendUserDocument,
        UserUnlinkFromIdentityProviderDocument: UserUnlinkFromIdentityProviderDocument,
        UnsuspendUserDocument: UnsuspendUserDocument,
        UpdateUserDocument: UpdateUserDocument,
        CreateViewPreferencesDocument: CreateViewPreferencesDocument,
        DeleteViewPreferencesDocument: DeleteViewPreferencesDocument,
        UpdateViewPreferencesDocument: UpdateViewPreferencesDocument,
        CreateWebhookDocument: CreateWebhookDocument,
        DeleteWebhookDocument: DeleteWebhookDocument,
        UpdateWebhookDocument: UpdateWebhookDocument,
        ArchiveWorkflowStateDocument: ArchiveWorkflowStateDocument,
        CreateWorkflowStateDocument: CreateWorkflowStateDocument,
        UpdateWorkflowStateDocument: UpdateWorkflowStateDocument
    });

    /**
     * Base class to provide a request function
     *
     * @param request - function to call the graphql client
     */
    class Request {
        constructor(request) {
            this._request = request;
        }
        /**
         * Helper to paginate over all pages of a given connection query.
         * @param fn The query to paginate
         * @param args The arguments to pass to the query
         */
        paginate(fn, args) {
            return __awaiter(this, void 0, void 0, function* () {
                const boundFn = fn.bind(this);
                let connection = yield boundFn(args);
                const nodes = connection.nodes;
                while (connection.pageInfo.hasNextPage) {
                    connection = yield boundFn(Object.assign(Object.assign({ first: 50 }, args), { after: connection.pageInfo.endCursor }));
                    nodes.push(...connection.nodes);
                }
                return nodes;
            });
        }
    }
    /**
     * Default connection variables required for pagination
     * Defaults to 50 as per the Linear API
     */
    function defaultConnection(variables) {
        var _a, _b;
        return Object.assign(Object.assign({}, variables), { first: (_a = variables.first) !== null && _a !== void 0 ? _a : (variables.after ? 50 : undefined), last: (_b = variables.last) !== null && _b !== void 0 ? _b : (variables.before ? 50 : undefined) });
    }
    /**
     * Connection models containing a list of nodes and pagination information
     * Follows the Relay spec
     */
    class LinearConnection extends Request {
        constructor(request) {
            super(request);
            this.pageInfo = new PageInfo(request, { hasNextPage: false, hasPreviousPage: false, __typename: "PageInfo" });
            this.nodes = [];
        }
    }
    /**
     * The base connection class to provide pagination
     * Follows the Relay spec
     *
     * @param request - function to call the graphql client
     * @param fetch - Function to refetch the connection given different pagination variables
     * @param nodes - The list of models to initialize the connection
     * @param pageInfo - The pagination information to initialize the connection
     */
    class Connection extends LinearConnection {
        constructor(request, fetch, nodes, pageInfo) {
            super(request);
            this._fetch = fetch;
            this.nodes = nodes;
            this.pageInfo = pageInfo;
        }
        /** Add nodes to the end of the existing nodes */
        _appendNodes(nodes) {
            var _a;
            this.nodes = nodes ? [...((_a = this.nodes) !== null && _a !== void 0 ? _a : []), ...nodes] : this.nodes;
        }
        /** Add nodes to the start of the existing nodes */
        _prependNodes(nodes) {
            var _a;
            this.nodes = nodes ? [...nodes, ...((_a = this.nodes) !== null && _a !== void 0 ? _a : [])] : this.nodes;
        }
        /** Update the pagination end cursor */
        _appendPageInfo(pageInfo) {
            var _a, _b;
            if (this.pageInfo) {
                this.pageInfo.endCursor = (_a = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.endCursor) !== null && _a !== void 0 ? _a : this.pageInfo.startCursor;
                this.pageInfo.hasNextPage = (_b = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.hasNextPage) !== null && _b !== void 0 ? _b : this.pageInfo.hasNextPage;
            }
        }
        /** Update the pagination start cursor */
        _prependPageInfo(pageInfo) {
            var _a, _b;
            if (this.pageInfo) {
                this.pageInfo.startCursor = (_a = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.startCursor) !== null && _a !== void 0 ? _a : this.pageInfo.startCursor;
                this.pageInfo.hasPreviousPage = (_b = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.hasPreviousPage) !== null && _b !== void 0 ? _b : this.pageInfo.hasPreviousPage;
            }
        }
        /** Fetch the next page of results and append to nodes */
        fetchNext() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                if ((_a = this.pageInfo) === null || _a === void 0 ? void 0 : _a.hasNextPage) {
                    const response = yield this._fetch({
                        after: (_b = this.pageInfo) === null || _b === void 0 ? void 0 : _b.endCursor,
                    });
                    this._appendNodes(response === null || response === void 0 ? void 0 : response.nodes);
                    this._appendPageInfo(response === null || response === void 0 ? void 0 : response.pageInfo);
                }
                return Promise.resolve(this);
            });
        }
        /** Fetch the previous page of results and prepend to nodes */
        fetchPrevious() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                if ((_a = this.pageInfo) === null || _a === void 0 ? void 0 : _a.hasPreviousPage) {
                    const response = yield this._fetch({
                        before: (_b = this.pageInfo) === null || _b === void 0 ? void 0 : _b.startCursor,
                    });
                    this._prependNodes(response === null || response === void 0 ? void 0 : response.nodes);
                    this._prependPageInfo(response === null || response === void 0 ? void 0 : response.pageInfo);
                }
                return Promise.resolve(this);
            });
        }
    }
    /**
     * Function to parse custom scalars into Date types
     *
     * @param value - value to parse
     */
    function parseDate(value) {
        try {
            return value ? new Date(value) : undefined;
        }
        catch (e) {
            return undefined;
        }
    }
    /**
     * Function to parse custom scalars into JSON objects
     *
     * @param value - value to parse
     */
    function parseJson(value) {
        try {
            return value ? JSON.parse(value) : undefined;
        }
        catch (e) {
            return undefined;
        }
    }
    /**
     * A bot actor is an actor that is not a user, but an application or integration.
     *
     * @param request - function to call the graphql client
     * @param data - L.ActorBotFragment response data
     */
    class ActorBot extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.avatarUrl = (_a = data.avatarUrl) !== null && _a !== void 0 ? _a : undefined;
            this.id = (_b = data.id) !== null && _b !== void 0 ? _b : undefined;
            this.name = (_c = data.name) !== null && _c !== void 0 ? _c : undefined;
            this.subType = (_d = data.subType) !== null && _d !== void 0 ? _d : undefined;
            this.type = data.type;
            this.userDisplayName = (_e = data.userDisplayName) !== null && _e !== void 0 ? _e : undefined;
        }
    }
    /**
     * An activity within an agent context.
     *
     * @param request - function to call the graphql client
     * @param data - L.AgentActivityFragment response data
     */
    class AgentActivity extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.ephemeral = data.ephemeral;
            this.id = data.id;
            this.signalMetadata = (_c = parseJson(data.signalMetadata)) !== null && _c !== void 0 ? _c : undefined;
            this.sourceMetadata = (_d = parseJson(data.sourceMetadata)) !== null && _d !== void 0 ? _d : undefined;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this.signal = (_f = data.signal) !== null && _f !== void 0 ? _f : undefined;
            this.content = data.content;
            this._agentSession = data.agentSession;
            this._sourceComment = (_g = data.sourceComment) !== null && _g !== void 0 ? _g : undefined;
            this._user = data.user;
        }
        /** The agent session this activity belongs to. */
        get agentSession() {
            return new AgentSessionQuery(this._request).fetch(this._agentSession.id);
        }
        /** The ID of agent session this activity belongs to. */
        get agentSessionId() {
            var _a;
            return (_a = this._agentSession) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The comment this activity is linked to. */
        get sourceComment() {
            var _a, _b;
            return ((_a = this._sourceComment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._sourceComment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The ID of comment this activity is linked to. */
        get sourceCommentId() {
            var _a;
            return (_a = this._sourceComment) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user who created this agent activity. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** The ID of user who created this agent activity. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates an agent activity. */
        create(input) {
            return new CreateAgentActivityMutation(this._request).fetch(input);
        }
    }
    /**
     * Content for an action activity (tool call or action).
     *
     * @param request - function to call the graphql client
     * @param data - L.AgentActivityActionContentFragment response data
     */
    class AgentActivityActionContent extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.action = data.action;
            this.parameter = data.parameter;
            this.result = (_a = data.result) !== null && _a !== void 0 ? _a : undefined;
            this.type = data.type;
        }
    }
    /**
     * AgentActivityConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this AgentActivityConnection model
     * @param data - AgentActivityConnection response data
     */
    class AgentActivityConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new AgentActivity(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * Content for an elicitation activity.
     *
     * @param request - function to call the graphql client
     * @param data - L.AgentActivityElicitationContentFragment response data
     */
    class AgentActivityElicitationContent extends Request {
        constructor(request, data) {
            super(request);
            this.body = data.body;
            this.type = data.type;
        }
    }
    /**
     * Content for an error activity.
     *
     * @param request - function to call the graphql client
     * @param data - L.AgentActivityErrorContentFragment response data
     */
    class AgentActivityErrorContent extends Request {
        constructor(request, data) {
            super(request);
            this.body = data.body;
            this.type = data.type;
        }
    }
    /**
     * AgentActivityPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.AgentActivityPayloadFragment response data
     */
    class AgentActivityPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._agentActivity = data.agentActivity;
        }
        /** The agent activity that was created or updated. */
        get agentActivity() {
            return new AgentActivityQuery(this._request).fetch(this._agentActivity.id);
        }
        /** The ID of agent activity that was created or updated. */
        get agentActivityId() {
            var _a;
            return (_a = this._agentActivity) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Content for a prompt activity.
     *
     * @param request - function to call the graphql client
     * @param data - L.AgentActivityPromptContentFragment response data
     */
    class AgentActivityPromptContent extends Request {
        constructor(request, data) {
            super(request);
            this.body = data.body;
            this.type = data.type;
        }
    }
    /**
     * Content for a response activity.
     *
     * @param request - function to call the graphql client
     * @param data - L.AgentActivityResponseContentFragment response data
     */
    class AgentActivityResponseContent extends Request {
        constructor(request, data) {
            super(request);
            this.body = data.body;
            this.type = data.type;
        }
    }
    /**
     * Content for a thought activity.
     *
     * @param request - function to call the graphql client
     * @param data - L.AgentActivityThoughtContentFragment response data
     */
    class AgentActivityThoughtContent extends Request {
        constructor(request, data) {
            super(request);
            this.body = data.body;
            this.type = data.type;
        }
    }
    /**
     * Payload for an agent activity webhook.
     *
     * @param data - L.AgentActivityWebhookPayloadFragment response data
     */
    class AgentActivityWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d, _e;
            this.agentSessionId = data.agentSessionId;
            this.archivedAt = (_a = data.archivedAt) !== null && _a !== void 0 ? _a : undefined;
            this.content = data.content;
            this.createdAt = data.createdAt;
            this.id = data.id;
            this.signal = (_b = data.signal) !== null && _b !== void 0 ? _b : undefined;
            this.signalMetadata = (_c = data.signalMetadata) !== null && _c !== void 0 ? _c : undefined;
            this.sourceCommentId = (_d = data.sourceCommentId) !== null && _d !== void 0 ? _d : undefined;
            this.updatedAt = data.updatedAt;
            this.userId = (_e = data.userId) !== null && _e !== void 0 ? _e : undefined;
        }
    }
    /**
     * A session for agent activities and state management.
     *
     * @param request - function to call the graphql client
     * @param data - L.AgentSessionFragment response data
     */
    class AgentSession extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.endedAt = (_c = parseDate(data.endedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.externalLink = (_d = data.externalLink) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.sourceMetadata = (_e = parseJson(data.sourceMetadata)) !== null && _e !== void 0 ? _e : undefined;
            this.startedAt = (_f = parseDate(data.startedAt)) !== null && _f !== void 0 ? _f : undefined;
            this.summary = (_g = data.summary) !== null && _g !== void 0 ? _g : undefined;
            this.updatedAt = (_h = parseDate(data.updatedAt)) !== null && _h !== void 0 ? _h : new Date();
            this.status = data.status;
            this.type = data.type;
            this._appUser = data.appUser;
            this._comment = (_j = data.comment) !== null && _j !== void 0 ? _j : undefined;
            this._creator = (_k = data.creator) !== null && _k !== void 0 ? _k : undefined;
            this._issue = (_l = data.issue) !== null && _l !== void 0 ? _l : undefined;
        }
        /** The agent user that is associated with this agent session. */
        get appUser() {
            return new UserQuery(this._request).fetch(this._appUser.id);
        }
        /** The ID of agent user that is associated with this agent session. */
        get appUserId() {
            var _a;
            return (_a = this._appUser) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The comment this agent session is associated with. */
        get comment() {
            var _a, _b;
            return ((_a = this._comment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._comment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The ID of comment this agent session is associated with. */
        get commentId() {
            var _a;
            return (_a = this._comment) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that created this agent session. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user that created this agent session. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The issue this agent session is associated with. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of issue this agent session is associated with. */
        get issueId() {
            var _a;
            return (_a = this._issue) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Activities associated with this agent session. */
        activities(variables) {
            return new AgentSession_ActivitiesQuery(this._request, this.id, variables).fetch(variables);
        }
    }
    /**
     * AgentSessionConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this AgentSessionConnection model
     * @param data - AgentSessionConnection response data
     */
    class AgentSessionConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new AgentSession(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * Payload for agent session webhook events.
     *
     * @param data - L.AgentSessionEventWebhookPayloadFragment response data
     */
    class AgentSessionEventWebhookPayload {
        constructor(data) {
            var _a;
            this.action = data.action;
            this.appUserId = data.appUserId;
            this.createdAt = (_a = parseDate(data.createdAt)) !== null && _a !== void 0 ? _a : new Date();
            this.oauthClientId = data.oauthClientId;
            this.organizationId = data.organizationId;
            this.type = data.type;
            this.agentActivity = data.agentActivity ? new AgentActivityWebhookPayload(data.agentActivity) : undefined;
            this.agentSession = new AgentSessionWebhookPayload(data.agentSession);
            this.guidance = data.guidance ? data.guidance.map(node => new GuidanceRuleWebhookPayload(node)) : undefined;
            this.previousComments = data.previousComments
                ? data.previousComments.map(node => new CommentChildWebhookPayload(node))
                : undefined;
        }
    }
    /**
     * AgentSessionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.AgentSessionPayloadFragment response data
     */
    class AgentSessionPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._agentSession = data.agentSession;
        }
        /** The agent session that was created or updated. */
        get agentSession() {
            return new AgentSessionQuery(this._request).fetch(this._agentSession.id);
        }
        /** The ID of agent session that was created or updated. */
        get agentSessionId() {
            var _a;
            return (_a = this._agentSession) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Payload for an agent session webhook.
     *
     * @param data - L.AgentSessionWebhookPayloadFragment response data
     */
    class AgentSessionWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            this.appUserId = data.appUserId;
            this.archivedAt = (_a = data.archivedAt) !== null && _a !== void 0 ? _a : undefined;
            this.commentId = (_b = data.commentId) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = data.createdAt;
            this.creatorId = (_c = data.creatorId) !== null && _c !== void 0 ? _c : undefined;
            this.endedAt = (_d = data.endedAt) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.issueId = (_e = data.issueId) !== null && _e !== void 0 ? _e : undefined;
            this.organizationId = data.organizationId;
            this.sourceMetadata = (_f = data.sourceMetadata) !== null && _f !== void 0 ? _f : undefined;
            this.startedAt = (_g = data.startedAt) !== null && _g !== void 0 ? _g : undefined;
            this.status = data.status;
            this.summary = (_h = data.summary) !== null && _h !== void 0 ? _h : undefined;
            this.type = data.type;
            this.updatedAt = data.updatedAt;
            this.comment = data.comment ? new CommentChildWebhookPayload(data.comment) : undefined;
            this.creator = data.creator ? new UserChildWebhookPayload(data.creator) : undefined;
            this.issue = data.issue ? new IssueWithDescriptionChildWebhookPayload(data.issue) : undefined;
        }
    }
    /**
     * An API key. Grants access to the user's resources.
     *
     * @param request - function to call the graphql client
     * @param data - L.ApiKeyFragment response data
     */
    class ApiKey extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.label = data.label;
            this.lastActiveAt = (_c = parseDate(data.lastActiveAt)) !== null && _c !== void 0 ? _c : undefined;
            this.requestedSyncGroups = (_d = data.requestedSyncGroups) !== null && _d !== void 0 ? _d : undefined;
            this.scope = (_e = data.scope) !== null && _e !== void 0 ? _e : undefined;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
        }
        /** Organization the API key belongs to. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
    }
    /**
     * ApiKeyConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ApiKeyConnection model
     * @param data - ApiKeyConnection response data
     */
    class ApiKeyConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new ApiKey(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * ApiKeyPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ApiKeyPayloadFragment response data
     */
    class ApiKeyPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.apiKey = new ApiKey(request, data.apiKey);
        }
    }
    /**
     * Payload for app user notification webhook events.
     *
     * @param data - L.AppUserNotificationWebhookPayloadFragment response data
     */
    class AppUserNotificationWebhookPayload {
        constructor(data) {
            var _a;
            this.action = data.action;
            this.appUserId = data.appUserId;
            this.createdAt = (_a = parseDate(data.createdAt)) !== null && _a !== void 0 ? _a : new Date();
            this.oauthClientId = data.oauthClientId;
            this.organizationId = data.organizationId;
            this.type = data.type;
        }
    }
    /**
     * Payload for app user team access change webhook events.
     *
     * @param data - L.AppUserTeamAccessChangedWebhookPayloadFragment response data
     */
    class AppUserTeamAccessChangedWebhookPayload {
        constructor(data) {
            var _a;
            this.action = data.action;
            this.addedTeamIds = data.addedTeamIds;
            this.appUserId = data.appUserId;
            this.canAccessAllPublicTeams = data.canAccessAllPublicTeams;
            this.createdAt = (_a = parseDate(data.createdAt)) !== null && _a !== void 0 ? _a : new Date();
            this.oauthClientId = data.oauthClientId;
            this.organizationId = data.organizationId;
            this.removedTeamIds = data.removedTeamIds;
            this.type = data.type;
        }
    }
    /**
     * Public information of the OAuth application.
     *
     * @param request - function to call the graphql client
     * @param data - L.ApplicationFragment response data
     */
    class Application extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.clientId = data.clientId;
            this.description = (_a = data.description) !== null && _a !== void 0 ? _a : undefined;
            this.developer = data.developer;
            this.developerUrl = data.developerUrl;
            this.id = data.id;
            this.imageUrl = (_b = data.imageUrl) !== null && _b !== void 0 ? _b : undefined;
            this.name = data.name;
        }
    }
    /**
     * A generic payload return from entity archive or deletion mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.ArchivePayloadFragment response data
     */
    class ArchivePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * Contains requested archived model objects.
     *
     * @param request - function to call the graphql client
     * @param data - L.ArchiveResponseFragment response data
     */
    class ArchiveResponse extends Request {
        constructor(request, data) {
            super(request);
            this.archive = data.archive;
            this.databaseVersion = data.databaseVersion;
            this.includesDependencies = data.includesDependencies;
            this.totalCount = data.totalCount;
        }
    }
    /**
     * AsksChannelConnectPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.AsksChannelConnectPayloadFragment response data
     */
    class AsksChannelConnectPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.addBot = data.addBot;
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.mapping = new SlackChannelNameMapping(request, data.mapping);
            this._integration = (_a = data.integration) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The integration that was created or updated. */
        get integration() {
            var _a, _b;
            return ((_a = this._integration) === null || _a === void 0 ? void 0 : _a.id) ? new IntegrationQuery(this._request).fetch((_b = this._integration) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of integration that was created or updated. */
        get integrationId() {
            var _a;
            return (_a = this._integration) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Issue attachment (e.g. support ticket, pull request).
     *
     * @param request - function to call the graphql client
     * @param data - L.AttachmentFragment response data
     */
    class Attachment extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.bodyData = (_b = data.bodyData) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.groupBySource = data.groupBySource;
            this.id = data.id;
            this.metadata = data.metadata;
            this.source = (_d = data.source) !== null && _d !== void 0 ? _d : undefined;
            this.sourceType = (_e = data.sourceType) !== null && _e !== void 0 ? _e : undefined;
            this.subtitle = (_f = data.subtitle) !== null && _f !== void 0 ? _f : undefined;
            this.title = data.title;
            this.updatedAt = (_g = parseDate(data.updatedAt)) !== null && _g !== void 0 ? _g : new Date();
            this.url = data.url;
            this._creator = (_h = data.creator) !== null && _h !== void 0 ? _h : undefined;
            this._externalUserCreator = (_j = data.externalUserCreator) !== null && _j !== void 0 ? _j : undefined;
            this._issue = data.issue;
            this._originalIssue = (_k = data.originalIssue) !== null && _k !== void 0 ? _k : undefined;
        }
        /** The creator of the attachment. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of creator of the attachment. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The non-Linear user who created the attachment. */
        get externalUserCreator() {
            var _a, _b;
            return ((_a = this._externalUserCreator) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserCreator) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of non-linear user who created the attachment. */
        get externalUserCreatorId() {
            var _a;
            return (_a = this._externalUserCreator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The issue this attachment belongs to. */
        get issue() {
            return new IssueQuery(this._request).fetch(this._issue.id);
        }
        /** The ID of issue this attachment belongs to. */
        get issueId() {
            var _a;
            return (_a = this._issue) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The issue this attachment was originally created on. Will be undefined if the attachment hasn't been moved. */
        get originalIssue() {
            var _a, _b;
            return ((_a = this._originalIssue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._originalIssue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of issue this attachment was originally created on. will be undefined if the attachment hasn't been moved. */
        get originalIssueId() {
            var _a;
            return (_a = this._originalIssue) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates a new attachment, or updates existing if the same `url` and `issueId` is used. */
        create(input) {
            return new CreateAttachmentMutation(this._request).fetch(input);
        }
        /** Deletes an issue attachment. */
        delete() {
            return new DeleteAttachmentMutation(this._request).fetch(this.id);
        }
        /** Updates an existing issue attachment. */
        update(input) {
            return new UpdateAttachmentMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * AttachmentConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this AttachmentConnection model
     * @param data - AttachmentConnection response data
     */
    class AttachmentConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Attachment(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * AttachmentPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.AttachmentPayloadFragment response data
     */
    class AttachmentPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._attachment = data.attachment;
        }
        /** The issue attachment that was created. */
        get attachment() {
            return new AttachmentQuery(this._request).fetch(this._attachment.id);
        }
        /** The ID of issue attachment that was created. */
        get attachmentId() {
            var _a;
            return (_a = this._attachment) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * AttachmentSourcesPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.AttachmentSourcesPayloadFragment response data
     */
    class AttachmentSourcesPayload extends Request {
        constructor(request, data) {
            super(request);
            this.sources = data.sources;
        }
    }
    /**
     * Payload for an attachment webhook.
     *
     * @param data - L.AttachmentWebhookPayloadFragment response data
     */
    class AttachmentWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d, _e, _f, _g;
            this.archivedAt = (_a = data.archivedAt) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = data.createdAt;
            this.creatorId = (_b = data.creatorId) !== null && _b !== void 0 ? _b : undefined;
            this.externalUserCreatorId = (_c = data.externalUserCreatorId) !== null && _c !== void 0 ? _c : undefined;
            this.groupBySource = data.groupBySource;
            this.id = data.id;
            this.issueId = data.issueId;
            this.metadata = data.metadata;
            this.originalIssueId = (_d = data.originalIssueId) !== null && _d !== void 0 ? _d : undefined;
            this.source = (_e = data.source) !== null && _e !== void 0 ? _e : undefined;
            this.sourceType = (_f = data.sourceType) !== null && _f !== void 0 ? _f : undefined;
            this.subtitle = (_g = data.subtitle) !== null && _g !== void 0 ? _g : undefined;
            this.title = data.title;
            this.updatedAt = data.updatedAt;
            this.url = data.url;
        }
    }
    /**
     * Workspace audit log entry object.
     *
     * @param request - function to call the graphql client
     * @param data - L.AuditEntryFragment response data
     */
    class AuditEntry extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.actorId = (_a = data.actorId) !== null && _a !== void 0 ? _a : undefined;
            this.archivedAt = (_b = parseDate(data.archivedAt)) !== null && _b !== void 0 ? _b : undefined;
            this.countryCode = (_c = data.countryCode) !== null && _c !== void 0 ? _c : undefined;
            this.createdAt = (_d = parseDate(data.createdAt)) !== null && _d !== void 0 ? _d : new Date();
            this.id = data.id;
            this.ip = (_e = data.ip) !== null && _e !== void 0 ? _e : undefined;
            this.metadata = (_f = data.metadata) !== null && _f !== void 0 ? _f : undefined;
            this.requestInformation = (_g = data.requestInformation) !== null && _g !== void 0 ? _g : undefined;
            this.type = data.type;
            this.updatedAt = (_h = parseDate(data.updatedAt)) !== null && _h !== void 0 ? _h : new Date();
            this._actor = (_j = data.actor) !== null && _j !== void 0 ? _j : undefined;
        }
        /** The user that caused the audit entry to be created. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The organization the audit log belongs to. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
    }
    /**
     * AuditEntryConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this AuditEntryConnection model
     * @param data - AuditEntryConnection response data
     */
    class AuditEntryConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new AuditEntry(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * AuditEntryType model
     *
     * @param request - function to call the graphql client
     * @param data - L.AuditEntryTypeFragment response data
     */
    class AuditEntryType extends Request {
        constructor(request, data) {
            super(request);
            this.description = data.description;
            this.type = data.type;
        }
    }
    /**
     * Payload for an audit entry webhook.
     *
     * @param data - L.AuditEntryWebhookPayloadFragment response data
     */
    class AuditEntryWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d, _e, _f;
            this.actorId = (_a = data.actorId) !== null && _a !== void 0 ? _a : undefined;
            this.archivedAt = (_b = data.archivedAt) !== null && _b !== void 0 ? _b : undefined;
            this.countryCode = (_c = data.countryCode) !== null && _c !== void 0 ? _c : undefined;
            this.createdAt = data.createdAt;
            this.id = data.id;
            this.ip = (_d = data.ip) !== null && _d !== void 0 ? _d : undefined;
            this.metadata = (_e = data.metadata) !== null && _e !== void 0 ? _e : undefined;
            this.organizationId = data.organizationId;
            this.requestInformation = (_f = data.requestInformation) !== null && _f !== void 0 ? _f : undefined;
            this.type = data.type;
            this.updatedAt = data.updatedAt;
        }
    }
    /**
     * An identity provider.
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthIdentityProviderFragment response data
     */
    class AuthIdentityProvider extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.createdAt = (_a = parseDate(data.createdAt)) !== null && _a !== void 0 ? _a : new Date();
            this.defaultMigrated = data.defaultMigrated;
            this.id = data.id;
            this.issuerEntityId = (_b = data.issuerEntityId) !== null && _b !== void 0 ? _b : undefined;
            this.priority = (_c = data.priority) !== null && _c !== void 0 ? _c : undefined;
            this.samlEnabled = data.samlEnabled;
            this.scimEnabled = data.scimEnabled;
            this.ssoBinding = (_d = data.ssoBinding) !== null && _d !== void 0 ? _d : undefined;
            this.ssoEndpoint = (_e = data.ssoEndpoint) !== null && _e !== void 0 ? _e : undefined;
            this.ssoSignAlgo = (_f = data.ssoSignAlgo) !== null && _f !== void 0 ? _f : undefined;
            this.ssoSigningCert = (_g = data.ssoSigningCert) !== null && _g !== void 0 ? _g : undefined;
        }
    }
    /**
     * An organization. Organizations are root-level objects that contain users and teams.
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthOrganizationFragment response data
     */
    class AuthOrganization extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.allowedAuthServices = data.allowedAuthServices;
            this.createdAt = (_a = parseDate(data.createdAt)) !== null && _a !== void 0 ? _a : new Date();
            this.deletionRequestedAt = (_b = parseDate(data.deletionRequestedAt)) !== null && _b !== void 0 ? _b : undefined;
            this.enabled = data.enabled;
            this.id = data.id;
            this.logoUrl = (_c = data.logoUrl) !== null && _c !== void 0 ? _c : undefined;
            this.name = data.name;
            this.previousUrlKeys = data.previousUrlKeys;
            this.region = data.region;
            this.samlEnabled = data.samlEnabled;
            this.scimEnabled = data.scimEnabled;
            this.serviceId = data.serviceId;
            this.urlKey = data.urlKey;
            this.userCount = data.userCount;
            this.releaseChannel = data.releaseChannel;
        }
    }
    /**
     * AuthResolverResponse model
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthResolverResponseFragment response data
     */
    class AuthResolverResponse extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.allowDomainAccess = (_a = data.allowDomainAccess) !== null && _a !== void 0 ? _a : undefined;
            this.email = data.email;
            this.id = data.id;
            this.lastUsedOrganizationId = (_b = data.lastUsedOrganizationId) !== null && _b !== void 0 ? _b : undefined;
            this.token = (_c = data.token) !== null && _c !== void 0 ? _c : undefined;
            this.availableOrganizations = data.availableOrganizations
                ? data.availableOrganizations.map(node => new AuthOrganization(request, node))
                : undefined;
            this.lockedOrganizations = data.lockedOrganizations
                ? data.lockedOrganizations.map(node => new AuthOrganization(request, node))
                : undefined;
            this.lockedUsers = data.lockedUsers.map(node => new AuthUser(request, node));
            this.users = data.users.map(node => new AuthUser(request, node));
        }
    }
    /**
     * A user that has access to the the resources of an organization.
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthUserFragment response data
     */
    class AuthUser extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.active = data.active;
            this.avatarUrl = (_a = data.avatarUrl) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.displayName = data.displayName;
            this.email = data.email;
            this.id = data.id;
            this.name = data.name;
            this.userAccountId = data.userAccountId;
            this.organization = new AuthOrganization(request, data.organization);
            this.role = data.role;
        }
    }
    /**
     * Authentication session information.
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthenticationSessionResponseFragment response data
     */
    class AuthenticationSessionResponse extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
            super(request);
            this.browserType = (_a = data.browserType) !== null && _a !== void 0 ? _a : undefined;
            this.client = (_b = data.client) !== null && _b !== void 0 ? _b : undefined;
            this.countryCodes = data.countryCodes;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.id = data.id;
            this.ip = (_d = data.ip) !== null && _d !== void 0 ? _d : undefined;
            this.isCurrentSession = data.isCurrentSession;
            this.lastActiveAt = (_e = parseDate(data.lastActiveAt)) !== null && _e !== void 0 ? _e : undefined;
            this.location = (_f = data.location) !== null && _f !== void 0 ? _f : undefined;
            this.locationCity = (_g = data.locationCity) !== null && _g !== void 0 ? _g : undefined;
            this.locationCountry = (_h = data.locationCountry) !== null && _h !== void 0 ? _h : undefined;
            this.locationCountryCode = (_j = data.locationCountryCode) !== null && _j !== void 0 ? _j : undefined;
            this.locationRegionCode = (_k = data.locationRegionCode) !== null && _k !== void 0 ? _k : undefined;
            this.name = data.name;
            this.operatingSystem = (_l = data.operatingSystem) !== null && _l !== void 0 ? _l : undefined;
            this.service = (_m = data.service) !== null && _m !== void 0 ? _m : undefined;
            this.updatedAt = (_o = parseDate(data.updatedAt)) !== null && _o !== void 0 ? _o : new Date();
            this.userAgent = (_p = data.userAgent) !== null && _p !== void 0 ? _p : undefined;
            this.type = data.type;
        }
    }
    /**
     * Details of the app user's authorizing user.
     *
     * @param request - function to call the graphql client
     * @param data - L.AuthorizingUserFragment response data
     */
    class AuthorizingUser extends Request {
        constructor(request, data) {
            super(request);
            this.displayName = data.displayName;
            this.name = data.name;
        }
    }
    /**
     * Base fields for all webhook payloads.
     *
     * @param data - L.BaseWebhookPayloadFragment response data
     */
    class BaseWebhookPayload {
        constructor(data) {
            var _a;
            this.createdAt = (_a = parseDate(data.createdAt)) !== null && _a !== void 0 ? _a : new Date();
            this.organizationId = data.organizationId;
        }
    }
    /**
     * A comment associated with an issue.
     *
     * @param request - function to call the graphql client
     * @param data - L.CommentFragment response data
     */
    class Comment extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.body = data.body;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.editedAt = (_c = parseDate(data.editedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.quotedText = (_d = data.quotedText) !== null && _d !== void 0 ? _d : undefined;
            this.reactionData = data.reactionData;
            this.resolvedAt = (_e = parseDate(data.resolvedAt)) !== null && _e !== void 0 ? _e : undefined;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
            this.url = data.url;
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.documentContent = data.documentContent ? new DocumentContent(request, data.documentContent) : undefined;
            this.externalThread = data.externalThread ? new SyncedExternalThread(request, data.externalThread) : undefined;
            this.reactions = data.reactions.map(node => new Reaction(request, node));
            this.syncedWith = data.syncedWith ? data.syncedWith.map(node => new ExternalEntityInfo(request, node)) : undefined;
            this._agentSession = (_g = data.agentSession) !== null && _g !== void 0 ? _g : undefined;
            this._externalUser = (_h = data.externalUser) !== null && _h !== void 0 ? _h : undefined;
            this._initiativeUpdate = (_j = data.initiativeUpdate) !== null && _j !== void 0 ? _j : undefined;
            this._issue = (_k = data.issue) !== null && _k !== void 0 ? _k : undefined;
            this._parent = (_l = data.parent) !== null && _l !== void 0 ? _l : undefined;
            this._projectUpdate = (_m = data.projectUpdate) !== null && _m !== void 0 ? _m : undefined;
            this._resolvingComment = (_o = data.resolvingComment) !== null && _o !== void 0 ? _o : undefined;
            this._resolvingUser = (_p = data.resolvingUser) !== null && _p !== void 0 ? _p : undefined;
            this._user = (_q = data.user) !== null && _q !== void 0 ? _q : undefined;
        }
        /** Agent session associated with this comment. */
        get agentSession() {
            var _a, _b;
            return ((_a = this._agentSession) === null || _a === void 0 ? void 0 : _a.id) ? new AgentSessionQuery(this._request).fetch((_b = this._agentSession) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of agent session associated with this comment. */
        get agentSessionId() {
            var _a;
            return (_a = this._agentSession) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The external user who wrote the comment. */
        get externalUser() {
            var _a, _b;
            return ((_a = this._externalUser) === null || _a === void 0 ? void 0 : _a.id) ? new ExternalUserQuery(this._request).fetch((_b = this._externalUser) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of external user who wrote the comment. */
        get externalUserId() {
            var _a;
            return (_a = this._externalUser) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The initiative update that the comment is associated with. */
        get initiativeUpdate() {
            var _a, _b;
            return ((_a = this._initiativeUpdate) === null || _a === void 0 ? void 0 : _a.id)
                ? new InitiativeUpdateQuery(this._request).fetch((_b = this._initiativeUpdate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of initiative update that the comment is associated with. */
        get initiativeUpdateId() {
            var _a;
            return (_a = this._initiativeUpdate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The issue that the comment is associated with. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of issue that the comment is associated with. */
        get issueId() {
            var _a;
            return (_a = this._issue) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The parent comment under which the current comment is nested. */
        get parent() {
            var _a, _b;
            return ((_a = this._parent) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._parent) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The ID of parent comment under which the current comment is nested. */
        get parentId() {
            var _a;
            return (_a = this._parent) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The project update that the comment is associated with. */
        get projectUpdate() {
            var _a, _b;
            return ((_a = this._projectUpdate) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectUpdateQuery(this._request).fetch((_b = this._projectUpdate) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of project update that the comment is associated with. */
        get projectUpdateId() {
            var _a;
            return (_a = this._projectUpdate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The comment that resolved the thread. */
        get resolvingComment() {
            var _a, _b;
            return ((_a = this._resolvingComment) === null || _a === void 0 ? void 0 : _a.id)
                ? new CommentQuery(this._request).fetch({ id: (_b = this._resolvingComment) === null || _b === void 0 ? void 0 : _b.id })
                : undefined;
        }
        /** The ID of comment that resolved the thread. */
        get resolvingCommentId() {
            var _a;
            return (_a = this._resolvingComment) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that resolved the thread. */
        get resolvingUser() {
            var _a, _b;
            return ((_a = this._resolvingUser) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._resolvingUser) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user that resolved the thread. */
        get resolvingUserId() {
            var _a;
            return (_a = this._resolvingUser) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user who wrote the comment. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who wrote the comment. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The children of the comment. */
        children(variables) {
            return new Comment_ChildrenQuery(this._request, variables).fetch(variables);
        }
        /** Creates a new comment. */
        create(input) {
            return new CreateCommentMutation(this._request).fetch(input);
        }
        /** Deletes a comment. */
        delete() {
            return new DeleteCommentMutation(this._request).fetch(this.id);
        }
        /** Updates a comment. */
        update(input) {
            return new UpdateCommentMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * Certain properties of a comment.
     *
     * @param data - L.CommentChildWebhookPayloadFragment response data
     */
    class CommentChildWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d, _e;
            this.body = data.body;
            this.documentContentId = (_a = data.documentContentId) !== null && _a !== void 0 ? _a : undefined;
            this.id = data.id;
            this.initiativeUpdateId = (_b = data.initiativeUpdateId) !== null && _b !== void 0 ? _b : undefined;
            this.issueId = (_c = data.issueId) !== null && _c !== void 0 ? _c : undefined;
            this.projectUpdateId = (_d = data.projectUpdateId) !== null && _d !== void 0 ? _d : undefined;
            this.userId = (_e = data.userId) !== null && _e !== void 0 ? _e : undefined;
        }
    }
    /**
     * CommentConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this CommentConnection model
     * @param data - CommentConnection response data
     */
    class CommentConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Comment(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * CommentPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CommentPayloadFragment response data
     */
    class CommentPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._comment = data.comment;
        }
        /** The comment that was created or updated. */
        get comment() {
            return new CommentQuery(this._request).fetch({ id: this._comment.id });
        }
        /** The ID of comment that was created or updated. */
        get commentId() {
            var _a;
            return (_a = this._comment) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Payload for a comment webhook.
     *
     * @param data - L.CommentWebhookPayloadFragment response data
     */
    class CommentWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
            this.archivedAt = (_a = data.archivedAt) !== null && _a !== void 0 ? _a : undefined;
            this.body = data.body;
            this.botActor = (_b = data.botActor) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = data.createdAt;
            this.documentContentId = (_c = data.documentContentId) !== null && _c !== void 0 ? _c : undefined;
            this.editedAt = (_d = data.editedAt) !== null && _d !== void 0 ? _d : undefined;
            this.externalUserId = (_e = data.externalUserId) !== null && _e !== void 0 ? _e : undefined;
            this.id = data.id;
            this.initiativeUpdateId = (_f = data.initiativeUpdateId) !== null && _f !== void 0 ? _f : undefined;
            this.issueId = (_g = data.issueId) !== null && _g !== void 0 ? _g : undefined;
            this.parentId = (_h = data.parentId) !== null && _h !== void 0 ? _h : undefined;
            this.postId = (_j = data.postId) !== null && _j !== void 0 ? _j : undefined;
            this.projectUpdateId = (_k = data.projectUpdateId) !== null && _k !== void 0 ? _k : undefined;
            this.quotedText = (_l = data.quotedText) !== null && _l !== void 0 ? _l : undefined;
            this.reactionData = data.reactionData;
            this.resolvedAt = (_m = data.resolvedAt) !== null && _m !== void 0 ? _m : undefined;
            this.resolvingCommentId = (_o = data.resolvingCommentId) !== null && _o !== void 0 ? _o : undefined;
            this.resolvingUserId = (_p = data.resolvingUserId) !== null && _p !== void 0 ? _p : undefined;
            this.syncedWith = (_q = data.syncedWith) !== null && _q !== void 0 ? _q : undefined;
            this.updatedAt = data.updatedAt;
            this.userId = (_r = data.userId) !== null && _r !== void 0 ? _r : undefined;
            this.documentContent = data.documentContent
                ? new DocumentContentChildWebhookPayload(data.documentContent)
                : undefined;
            this.externalUser = data.externalUser ? new ExternalUserChildWebhookPayload(data.externalUser) : undefined;
            this.initiativeUpdate = data.initiativeUpdate
                ? new InitiativeUpdateChildWebhookPayload(data.initiativeUpdate)
                : undefined;
            this.issue = data.issue ? new IssueChildWebhookPayload(data.issue) : undefined;
            this.parent = data.parent ? new CommentChildWebhookPayload(data.parent) : undefined;
            this.projectUpdate = data.projectUpdate ? new ProjectUpdateChildWebhookPayload(data.projectUpdate) : undefined;
            this.user = data.user ? new UserChildWebhookPayload(data.user) : undefined;
        }
    }
    /**
     * ContactPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ContactPayloadFragment response data
     */
    class ContactPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * CreateCsvExportReportPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CreateCsvExportReportPayloadFragment response data
     */
    class CreateCsvExportReportPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * CreateOrJoinOrganizationResponse model
     *
     * @param request - function to call the graphql client
     * @param data - L.CreateOrJoinOrganizationResponseFragment response data
     */
    class CreateOrJoinOrganizationResponse extends Request {
        constructor(request, data) {
            super(request);
            this.organization = new AuthOrganization(request, data.organization);
            this.user = new AuthUser(request, data.user);
        }
    }
    /**
     * Payload for custom webhook resource events.
     *
     * @param data - L.CustomResourceWebhookPayloadFragment response data
     */
    class CustomResourceWebhookPayload {
        constructor(data) {
            var _a;
            this.action = data.action;
            this.createdAt = (_a = parseDate(data.createdAt)) !== null && _a !== void 0 ? _a : new Date();
            this.organizationId = data.organizationId;
            this.type = data.type;
        }
    }
    /**
     * A custom view that has been saved by a user.
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomViewFragment response data
     */
    class CustomView extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = (_b = data.color) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.description = (_d = data.description) !== null && _d !== void 0 ? _d : undefined;
            this.feedItemFilterData = (_e = data.feedItemFilterData) !== null && _e !== void 0 ? _e : undefined;
            this.filterData = data.filterData;
            this.filters = data.filters;
            this.icon = (_f = data.icon) !== null && _f !== void 0 ? _f : undefined;
            this.id = data.id;
            this.initiativeFilterData = (_g = data.initiativeFilterData) !== null && _g !== void 0 ? _g : undefined;
            this.modelName = data.modelName;
            this.name = data.name;
            this.projectFilterData = (_h = data.projectFilterData) !== null && _h !== void 0 ? _h : undefined;
            this.shared = data.shared;
            this.slugId = data.slugId;
            this.updatedAt = (_j = parseDate(data.updatedAt)) !== null && _j !== void 0 ? _j : new Date();
            this.organizationViewPreferences = data.organizationViewPreferences
                ? new ViewPreferences(request, data.organizationViewPreferences)
                : undefined;
            this.userViewPreferences = data.userViewPreferences
                ? new ViewPreferences(request, data.userViewPreferences)
                : undefined;
            this.viewPreferencesValues = data.viewPreferencesValues
                ? new ViewPreferencesValues(request, data.viewPreferencesValues)
                : undefined;
            this._creator = data.creator;
            this._owner = data.owner;
            this._team = (_k = data.team) !== null && _k !== void 0 ? _k : undefined;
            this._updatedBy = (_l = data.updatedBy) !== null && _l !== void 0 ? _l : undefined;
        }
        /** The user who created the custom view. */
        get creator() {
            return new UserQuery(this._request).fetch(this._creator.id);
        }
        /** The ID of user who created the custom view. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The organization of the custom view. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The user who owns the custom view. */
        get owner() {
            return new UserQuery(this._request).fetch(this._owner.id);
        }
        /** The ID of user who owns the custom view. */
        get ownerId() {
            var _a;
            return (_a = this._owner) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team associated with the custom view. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of team associated with the custom view. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user who last updated the custom view. */
        get updatedBy() {
            var _a, _b;
            return ((_a = this._updatedBy) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._updatedBy) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who last updated the custom view. */
        get updatedById() {
            var _a;
            return (_a = this._updatedBy) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Initiatives associated with the custom view. */
        initiatives(variables) {
            return new CustomView_InitiativesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Issues associated with the custom view. */
        issues(variables) {
            return new CustomView_IssuesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Projects associated with the custom view. */
        projects(variables) {
            return new CustomView_ProjectsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Creates a new custom view. */
        create(input) {
            return new CreateCustomViewMutation(this._request).fetch(input);
        }
        /** Deletes a custom view. */
        delete() {
            return new DeleteCustomViewMutation(this._request).fetch(this.id);
        }
        /** Updates a custom view. */
        update(input) {
            return new UpdateCustomViewMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * CustomViewConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this CustomViewConnection model
     * @param data - CustomViewConnection response data
     */
    class CustomViewConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new CustomView(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * CustomViewHasSubscribersPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomViewHasSubscribersPayloadFragment response data
     */
    class CustomViewHasSubscribersPayload extends Request {
        constructor(request, data) {
            super(request);
            this.hasSubscribers = data.hasSubscribers;
        }
    }
    /**
     * A custom view notification subscription.
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomViewNotificationSubscriptionFragment response data
     */
    class CustomViewNotificationSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            super(request);
            this.active = data.active;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.notificationSubscriptionTypes = data.notificationSubscriptionTypes;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.contextViewType = (_d = data.contextViewType) !== null && _d !== void 0 ? _d : undefined;
            this.userContextViewType = (_e = data.userContextViewType) !== null && _e !== void 0 ? _e : undefined;
            this._customView = data.customView;
            this._customer = (_f = data.customer) !== null && _f !== void 0 ? _f : undefined;
            this._cycle = (_g = data.cycle) !== null && _g !== void 0 ? _g : undefined;
            this._initiative = (_h = data.initiative) !== null && _h !== void 0 ? _h : undefined;
            this._label = (_j = data.label) !== null && _j !== void 0 ? _j : undefined;
            this._project = (_k = data.project) !== null && _k !== void 0 ? _k : undefined;
            this._subscriber = data.subscriber;
            this._team = (_l = data.team) !== null && _l !== void 0 ? _l : undefined;
            this._user = (_m = data.user) !== null && _m !== void 0 ? _m : undefined;
        }
        /** The custom view subscribed to. */
        get customView() {
            return new CustomViewQuery(this._request).fetch(this._customView.id);
        }
        /** The ID of custom view subscribed to. */
        get customViewId() {
            var _a;
            return (_a = this._customView) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The customer associated with the notification subscription. */
        get customer() {
            var _a, _b;
            return ((_a = this._customer) === null || _a === void 0 ? void 0 : _a.id) ? new CustomerQuery(this._request).fetch((_b = this._customer) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of customer associated with the notification subscription. */
        get customerId() {
            var _a;
            return (_a = this._customer) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual cycle view associated with the notification subscription. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual cycle view associated with the notification subscription. */
        get cycleId() {
            var _a;
            return (_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual initiative view associated with the notification subscription. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual initiative view associated with the notification subscription. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual label view associated with the notification subscription. */
        get label() {
            var _a, _b;
            return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual label view associated with the notification subscription. */
        get labelId() {
            var _a;
            return (_a = this._label) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual project view associated with the notification subscription. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual project view associated with the notification subscription. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that subscribed to receive notifications. */
        get subscriber() {
            return new UserQuery(this._request).fetch(this._subscriber.id);
        }
        /** The ID of user that subscribed to receive notifications. */
        get subscriberId() {
            var _a;
            return (_a = this._subscriber) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team associated with the notification subscription. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of team associated with the notification subscription. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user view associated with the notification subscription. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user view associated with the notification subscription. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * CustomViewPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomViewPayloadFragment response data
     */
    class CustomViewPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._customView = data.customView;
        }
        /** The custom view that was created or updated. */
        get customView() {
            return new CustomViewQuery(this._request).fetch(this._customView.id);
        }
        /** The ID of custom view that was created or updated. */
        get customViewId() {
            var _a;
            return (_a = this._customView) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * CustomViewSuggestionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomViewSuggestionPayloadFragment response data
     */
    class CustomViewSuggestionPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.description = (_a = data.description) !== null && _a !== void 0 ? _a : undefined;
            this.icon = (_b = data.icon) !== null && _b !== void 0 ? _b : undefined;
            this.name = (_c = data.name) !== null && _c !== void 0 ? _c : undefined;
        }
    }
    /**
     * A customer whose needs will be tied to issues or projects.
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomerFragment response data
     */
    class Customer extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.approximateNeedCount = data.approximateNeedCount;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.domains = data.domains;
            this.externalIds = data.externalIds;
            this.id = data.id;
            this.logoUrl = (_c = data.logoUrl) !== null && _c !== void 0 ? _c : undefined;
            this.mainSourceId = (_d = data.mainSourceId) !== null && _d !== void 0 ? _d : undefined;
            this.name = data.name;
            this.revenue = (_e = data.revenue) !== null && _e !== void 0 ? _e : undefined;
            this.size = (_f = data.size) !== null && _f !== void 0 ? _f : undefined;
            this.slackChannelId = (_g = data.slackChannelId) !== null && _g !== void 0 ? _g : undefined;
            this.slugId = data.slugId;
            this.updatedAt = (_h = parseDate(data.updatedAt)) !== null && _h !== void 0 ? _h : new Date();
            this._integration = (_j = data.integration) !== null && _j !== void 0 ? _j : undefined;
            this._owner = (_k = data.owner) !== null && _k !== void 0 ? _k : undefined;
            this._status = data.status;
            this._tier = (_l = data.tier) !== null && _l !== void 0 ? _l : undefined;
        }
        /** The integration that manages the Customer. */
        get integration() {
            var _a, _b;
            return ((_a = this._integration) === null || _a === void 0 ? void 0 : _a.id) ? new IntegrationQuery(this._request).fetch((_b = this._integration) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of integration that manages the customer. */
        get integrationId() {
            var _a;
            return (_a = this._integration) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user who owns the customer. */
        get owner() {
            var _a, _b;
            return ((_a = this._owner) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._owner) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who owns the customer. */
        get ownerId() {
            var _a;
            return (_a = this._owner) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The current status of the customer. */
        get status() {
            return new CustomerStatusQuery(this._request).fetch(this._status.id);
        }
        /** The ID of current status of the customer. */
        get statusId() {
            var _a;
            return (_a = this._status) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The tier of the customer. */
        get tier() {
            var _a, _b;
            return ((_a = this._tier) === null || _a === void 0 ? void 0 : _a.id) ? new CustomerTierQuery(this._request).fetch((_b = this._tier) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of tier of the customer. */
        get tierId() {
            var _a;
            return (_a = this._tier) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates a new customer. */
        create(input) {
            return new CreateCustomerMutation(this._request).fetch(input);
        }
        /** Deletes a customer. */
        delete() {
            return new DeleteCustomerMutation(this._request).fetch(this.id);
        }
        /** Updates a customer */
        update(input) {
            return new UpdateCustomerMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * Certain properties of a customer.
     *
     * @param data - L.CustomerChildWebhookPayloadFragment response data
     */
    class CustomerChildWebhookPayload {
        constructor(data) {
            this.domains = data.domains;
            this.externalIds = data.externalIds;
            this.id = data.id;
            this.name = data.name;
        }
    }
    /**
     * CustomerConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this CustomerConnection model
     * @param data - CustomerConnection response data
     */
    class CustomerConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Customer(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A customer need, expressed through a reference to an issue, project, or comment.
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomerNeedFragment response data
     */
    class CustomerNeed extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.body = (_b = data.body) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.id = data.id;
            this.priority = data.priority;
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
            this.url = (_e = data.url) !== null && _e !== void 0 ? _e : undefined;
            this.projectAttachment = data.projectAttachment
                ? new ProjectAttachment(request, data.projectAttachment)
                : undefined;
            this._attachment = (_f = data.attachment) !== null && _f !== void 0 ? _f : undefined;
            this._comment = (_g = data.comment) !== null && _g !== void 0 ? _g : undefined;
            this._creator = (_h = data.creator) !== null && _h !== void 0 ? _h : undefined;
            this._customer = (_j = data.customer) !== null && _j !== void 0 ? _j : undefined;
            this._issue = (_k = data.issue) !== null && _k !== void 0 ? _k : undefined;
            this._originalIssue = (_l = data.originalIssue) !== null && _l !== void 0 ? _l : undefined;
            this._project = (_m = data.project) !== null && _m !== void 0 ? _m : undefined;
        }
        /** The attachment this need is referencing. */
        get attachment() {
            var _a, _b;
            return ((_a = this._attachment) === null || _a === void 0 ? void 0 : _a.id) ? new AttachmentQuery(this._request).fetch((_b = this._attachment) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of attachment this need is referencing. */
        get attachmentId() {
            var _a;
            return (_a = this._attachment) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The comment this need is referencing. */
        get comment() {
            var _a, _b;
            return ((_a = this._comment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._comment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The ID of comment this need is referencing. */
        get commentId() {
            var _a;
            return (_a = this._comment) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The creator of the customer need. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of creator of the customer need. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The customer that this need is attached to. */
        get customer() {
            var _a, _b;
            return ((_a = this._customer) === null || _a === void 0 ? void 0 : _a.id) ? new CustomerQuery(this._request).fetch((_b = this._customer) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of customer that this need is attached to. */
        get customerId() {
            var _a;
            return (_a = this._customer) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The issue this need is referencing. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of issue this need is referencing. */
        get issueId() {
            var _a;
            return (_a = this._issue) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The issue this customer need was originally created on. Will be undefined if the customer need hasn't been moved. */
        get originalIssue() {
            var _a, _b;
            return ((_a = this._originalIssue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._originalIssue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of issue this customer need was originally created on. will be undefined if the customer need hasn't been moved. */
        get originalIssueId() {
            var _a;
            return (_a = this._originalIssue) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The project this need is referencing. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of project this need is referencing. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Archives a customer need. */
        archive() {
            return new ArchiveCustomerNeedMutation(this._request).fetch(this.id);
        }
        /** Creates a new customer need. */
        create(input) {
            return new CreateCustomerNeedMutation(this._request).fetch(input);
        }
        /** Deletes a customer need. */
        delete(variables) {
            return new DeleteCustomerNeedMutation(this._request).fetch(this.id, variables);
        }
        /** Unarchives a customer need. */
        unarchive() {
            return new UnarchiveCustomerNeedMutation(this._request).fetch(this.id);
        }
        /** Updates a customer need */
        update(input) {
            return new UpdateCustomerNeedMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomerNeedArchivePayloadFragment response data
     */
    class CustomerNeedArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new CustomerNeedQuery(this._request).fetch({ id: (_b = this._entity) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The ID of archived/unarchived entity. null if entity was deleted. */
        get entityId() {
            var _a;
            return (_a = this._entity) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Certain properties of a customer need.
     *
     * @param data - L.CustomerNeedChildWebhookPayloadFragment response data
     */
    class CustomerNeedChildWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d;
            this.attachmentId = (_a = data.attachmentId) !== null && _a !== void 0 ? _a : undefined;
            this.customerId = (_b = data.customerId) !== null && _b !== void 0 ? _b : undefined;
            this.id = data.id;
            this.issueId = (_c = data.issueId) !== null && _c !== void 0 ? _c : undefined;
            this.projectId = (_d = data.projectId) !== null && _d !== void 0 ? _d : undefined;
        }
    }
    /**
     * CustomerNeedConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this CustomerNeedConnection model
     * @param data - CustomerNeedConnection response data
     */
    class CustomerNeedConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new CustomerNeed(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A customer need related notification.
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomerNeedNotificationFragment response data
     */
    class CustomerNeedNotification extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.customerNeedId = data.customerNeedId;
            this.emailedAt = (_c = parseDate(data.emailedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.readAt = (_d = parseDate(data.readAt)) !== null && _d !== void 0 ? _d : undefined;
            this.snoozedUntilAt = (_e = parseDate(data.snoozedUntilAt)) !== null && _e !== void 0 ? _e : undefined;
            this.type = data.type;
            this.unsnoozedAt = (_f = parseDate(data.unsnoozedAt)) !== null && _f !== void 0 ? _f : undefined;
            this.updatedAt = (_g = parseDate(data.updatedAt)) !== null && _g !== void 0 ? _g : new Date();
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.category = data.category;
            this._actor = (_h = data.actor) !== null && _h !== void 0 ? _h : undefined;
            this._customerNeed = data.customerNeed;
            this._externalUserActor = (_j = data.externalUserActor) !== null && _j !== void 0 ? _j : undefined;
            this._relatedIssue = (_k = data.relatedIssue) !== null && _k !== void 0 ? _k : undefined;
            this._relatedProject = (_l = data.relatedProject) !== null && _l !== void 0 ? _l : undefined;
            this._user = data.user;
        }
        /** The user that caused the notification. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user that caused the notification. */
        get actorId() {
            var _a;
            return (_a = this._actor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The customer need related to the notification. */
        get customerNeed() {
            return new CustomerNeedQuery(this._request).fetch({ id: this._customerNeed.id });
        }
        /** The external user that caused the notification. */
        get externalUserActor() {
            var _a, _b;
            return ((_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserActor) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of external user that caused the notification. */
        get externalUserActorId() {
            var _a;
            return (_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The issue related to the notification. */
        get relatedIssue() {
            var _a, _b;
            return ((_a = this._relatedIssue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._relatedIssue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of issue related to the notification. */
        get relatedIssueId() {
            var _a;
            return (_a = this._relatedIssue) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The project related to the notification. */
        get relatedProject() {
            var _a, _b;
            return ((_a = this._relatedProject) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._relatedProject) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of project related to the notification. */
        get relatedProjectId() {
            var _a;
            return (_a = this._relatedProject) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that received the notification. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** The ID of user that received the notification. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * CustomerNeedPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomerNeedPayloadFragment response data
     */
    class CustomerNeedPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._need = data.need;
        }
        /** The customer need that was created or updated. */
        get need() {
            return new CustomerNeedQuery(this._request).fetch({ id: this._need.id });
        }
        /** The ID of customer need that was created or updated. */
        get needId() {
            var _a;
            return (_a = this._need) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * CustomerNeedUpdatePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomerNeedUpdatePayloadFragment response data
     */
    class CustomerNeedUpdatePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.updatedRelatedNeeds = data.updatedRelatedNeeds.map(node => new CustomerNeed(request, node));
            this._need = data.need;
        }
        /** The customer need that was created or updated. */
        get need() {
            return new CustomerNeedQuery(this._request).fetch({ id: this._need.id });
        }
        /** The ID of customer need that was created or updated. */
        get needId() {
            var _a;
            return (_a = this._need) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Payload for a customer need webhook.
     *
     * @param data - L.CustomerNeedWebhookPayloadFragment response data
     */
    class CustomerNeedWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            this.archivedAt = (_a = data.archivedAt) !== null && _a !== void 0 ? _a : undefined;
            this.attachmentId = (_b = data.attachmentId) !== null && _b !== void 0 ? _b : undefined;
            this.body = (_c = data.body) !== null && _c !== void 0 ? _c : undefined;
            this.commentId = (_d = data.commentId) !== null && _d !== void 0 ? _d : undefined;
            this.createdAt = data.createdAt;
            this.creatorId = (_e = data.creatorId) !== null && _e !== void 0 ? _e : undefined;
            this.customerId = (_f = data.customerId) !== null && _f !== void 0 ? _f : undefined;
            this.id = data.id;
            this.issueId = (_g = data.issueId) !== null && _g !== void 0 ? _g : undefined;
            this.originalIssueId = (_h = data.originalIssueId) !== null && _h !== void 0 ? _h : undefined;
            this.priority = data.priority;
            this.projectAttachmentId = (_j = data.projectAttachmentId) !== null && _j !== void 0 ? _j : undefined;
            this.projectId = (_k = data.projectId) !== null && _k !== void 0 ? _k : undefined;
            this.updatedAt = data.updatedAt;
            this.attachment = data.attachment ? new AttachmentWebhookPayload(data.attachment) : undefined;
            this.customer = data.customer ? new CustomerChildWebhookPayload(data.customer) : undefined;
            this.issue = data.issue ? new IssueChildWebhookPayload(data.issue) : undefined;
            this.project = data.project ? new ProjectChildWebhookPayload(data.project) : undefined;
        }
    }
    /**
     * A customer related notification.
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomerNotificationFragment response data
     */
    class CustomerNotification extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.customerId = data.customerId;
            this.emailedAt = (_c = parseDate(data.emailedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.readAt = (_d = parseDate(data.readAt)) !== null && _d !== void 0 ? _d : undefined;
            this.snoozedUntilAt = (_e = parseDate(data.snoozedUntilAt)) !== null && _e !== void 0 ? _e : undefined;
            this.type = data.type;
            this.unsnoozedAt = (_f = parseDate(data.unsnoozedAt)) !== null && _f !== void 0 ? _f : undefined;
            this.updatedAt = (_g = parseDate(data.updatedAt)) !== null && _g !== void 0 ? _g : new Date();
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.category = data.category;
            this._actor = (_h = data.actor) !== null && _h !== void 0 ? _h : undefined;
            this._customer = data.customer;
            this._externalUserActor = (_j = data.externalUserActor) !== null && _j !== void 0 ? _j : undefined;
            this._user = data.user;
        }
        /** The user that caused the notification. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user that caused the notification. */
        get actorId() {
            var _a;
            return (_a = this._actor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The customer related to the notification. */
        get customer() {
            return new CustomerQuery(this._request).fetch(this._customer.id);
        }
        /** The external user that caused the notification. */
        get externalUserActor() {
            var _a, _b;
            return ((_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserActor) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of external user that caused the notification. */
        get externalUserActorId() {
            var _a;
            return (_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that received the notification. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** The ID of user that received the notification. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * A customer notification subscription.
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomerNotificationSubscriptionFragment response data
     */
    class CustomerNotificationSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            super(request);
            this.active = data.active;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.notificationSubscriptionTypes = data.notificationSubscriptionTypes;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.contextViewType = (_d = data.contextViewType) !== null && _d !== void 0 ? _d : undefined;
            this.userContextViewType = (_e = data.userContextViewType) !== null && _e !== void 0 ? _e : undefined;
            this._customView = (_f = data.customView) !== null && _f !== void 0 ? _f : undefined;
            this._customer = data.customer;
            this._cycle = (_g = data.cycle) !== null && _g !== void 0 ? _g : undefined;
            this._initiative = (_h = data.initiative) !== null && _h !== void 0 ? _h : undefined;
            this._label = (_j = data.label) !== null && _j !== void 0 ? _j : undefined;
            this._project = (_k = data.project) !== null && _k !== void 0 ? _k : undefined;
            this._subscriber = data.subscriber;
            this._team = (_l = data.team) !== null && _l !== void 0 ? _l : undefined;
            this._user = (_m = data.user) !== null && _m !== void 0 ? _m : undefined;
        }
        /** The contextual custom view associated with the notification subscription. */
        get customView() {
            var _a, _b;
            return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual custom view associated with the notification subscription. */
        get customViewId() {
            var _a;
            return (_a = this._customView) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The customer subscribed to. */
        get customer() {
            return new CustomerQuery(this._request).fetch(this._customer.id);
        }
        /** The ID of customer subscribed to. */
        get customerId() {
            var _a;
            return (_a = this._customer) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual cycle view associated with the notification subscription. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual cycle view associated with the notification subscription. */
        get cycleId() {
            var _a;
            return (_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual initiative view associated with the notification subscription. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual initiative view associated with the notification subscription. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual label view associated with the notification subscription. */
        get label() {
            var _a, _b;
            return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual label view associated with the notification subscription. */
        get labelId() {
            var _a;
            return (_a = this._label) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual project view associated with the notification subscription. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual project view associated with the notification subscription. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that subscribed to receive notifications. */
        get subscriber() {
            return new UserQuery(this._request).fetch(this._subscriber.id);
        }
        /** The ID of user that subscribed to receive notifications. */
        get subscriberId() {
            var _a;
            return (_a = this._subscriber) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team associated with the notification subscription. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of team associated with the notification subscription. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user view associated with the notification subscription. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user view associated with the notification subscription. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * CustomerPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomerPayloadFragment response data
     */
    class CustomerPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._customer = data.customer;
        }
        /** The customer that was created or updated. */
        get customer() {
            return new CustomerQuery(this._request).fetch(this._customer.id);
        }
        /** The ID of customer that was created or updated. */
        get customerId() {
            var _a;
            return (_a = this._customer) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * A customer status.
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomerStatusFragment response data
     */
    class CustomerStatus extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = data.color;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.displayName = data.displayName;
            this.id = data.id;
            this.name = data.name;
            this.position = data.position;
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
            this.type = (_e = data.type) !== null && _e !== void 0 ? _e : undefined;
        }
        /** Creates a new customer status. */
        create(input) {
            return new CreateCustomerStatusMutation(this._request).fetch(input);
        }
        /** Deletes a customer status. */
        delete() {
            return new DeleteCustomerStatusMutation(this._request).fetch(this.id);
        }
        /** Updates a customer status. */
        update(input) {
            return new UpdateCustomerStatusMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * Certain properties of a customer status.
     *
     * @param data - L.CustomerStatusChildWebhookPayloadFragment response data
     */
    class CustomerStatusChildWebhookPayload {
        constructor(data) {
            var _a, _b;
            this.color = data.color;
            this.description = (_a = data.description) !== null && _a !== void 0 ? _a : undefined;
            this.displayName = data.displayName;
            this.id = data.id;
            this.name = data.name;
            this.type = (_b = data.type) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * CustomerStatusConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this CustomerStatusConnection model
     * @param data - CustomerStatusConnection response data
     */
    class CustomerStatusConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new CustomerStatus(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * CustomerStatusPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomerStatusPayloadFragment response data
     */
    class CustomerStatusPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._status = data.status;
        }
        /** The customer status that was created or updated. */
        get status() {
            return new CustomerStatusQuery(this._request).fetch(this._status.id);
        }
        /** The ID of customer status that was created or updated. */
        get statusId() {
            var _a;
            return (_a = this._status) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * A customer tier.
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomerTierFragment response data
     */
    class CustomerTier extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = data.color;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.displayName = data.displayName;
            this.id = data.id;
            this.name = data.name;
            this.position = data.position;
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
        }
        /** Creates a new customer tier. */
        create(input) {
            return new CreateCustomerTierMutation(this._request).fetch(input);
        }
        /** Deletes a customer tier. */
        delete() {
            return new DeleteCustomerTierMutation(this._request).fetch(this.id);
        }
        /** Updates a customer tier. */
        update(input) {
            return new UpdateCustomerTierMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * Certain properties of a customer tier.
     *
     * @param data - L.CustomerTierChildWebhookPayloadFragment response data
     */
    class CustomerTierChildWebhookPayload {
        constructor(data) {
            var _a;
            this.color = data.color;
            this.description = (_a = data.description) !== null && _a !== void 0 ? _a : undefined;
            this.displayName = data.displayName;
            this.id = data.id;
            this.name = data.name;
        }
    }
    /**
     * CustomerTierConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this CustomerTierConnection model
     * @param data - CustomerTierConnection response data
     */
    class CustomerTierConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new CustomerTier(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * CustomerTierPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CustomerTierPayloadFragment response data
     */
    class CustomerTierPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._tier = data.tier;
        }
        /** The customer tier that was created or updated. */
        get tier() {
            return new CustomerTierQuery(this._request).fetch(this._tier.id);
        }
        /** The ID of customer tier that was created or updated. */
        get tierId() {
            var _a;
            return (_a = this._tier) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Payload for a customer webhook.
     *
     * @param data - L.CustomerWebhookPayloadFragment response data
     */
    class CustomerWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            this.approximateNeedCount = data.approximateNeedCount;
            this.archivedAt = (_a = data.archivedAt) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = data.createdAt;
            this.domains = data.domains;
            this.externalIds = data.externalIds;
            this.id = data.id;
            this.logoUrl = (_b = data.logoUrl) !== null && _b !== void 0 ? _b : undefined;
            this.mainSourceId = (_c = data.mainSourceId) !== null && _c !== void 0 ? _c : undefined;
            this.name = data.name;
            this.ownerId = (_d = data.ownerId) !== null && _d !== void 0 ? _d : undefined;
            this.revenue = (_e = data.revenue) !== null && _e !== void 0 ? _e : undefined;
            this.size = (_f = data.size) !== null && _f !== void 0 ? _f : undefined;
            this.slackChannelId = (_g = data.slackChannelId) !== null && _g !== void 0 ? _g : undefined;
            this.slugId = data.slugId;
            this.statusId = (_h = data.statusId) !== null && _h !== void 0 ? _h : undefined;
            this.tierId = (_j = data.tierId) !== null && _j !== void 0 ? _j : undefined;
            this.updatedAt = data.updatedAt;
            this.status = data.status ? new CustomerStatusChildWebhookPayload(data.status) : undefined;
            this.tier = data.tier ? new CustomerTierChildWebhookPayload(data.tier) : undefined;
        }
    }
    /**
     * A set of issues to be resolved in a specified amount of time.
     *
     * @param request - function to call the graphql client
     * @param data - L.CycleFragment response data
     */
    class Cycle extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.autoArchivedAt = (_b = parseDate(data.autoArchivedAt)) !== null && _b !== void 0 ? _b : undefined;
            this.completedAt = (_c = parseDate(data.completedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.completedIssueCountHistory = data.completedIssueCountHistory;
            this.completedScopeHistory = data.completedScopeHistory;
            this.createdAt = (_d = parseDate(data.createdAt)) !== null && _d !== void 0 ? _d : new Date();
            this.description = (_e = data.description) !== null && _e !== void 0 ? _e : undefined;
            this.endsAt = (_f = parseDate(data.endsAt)) !== null && _f !== void 0 ? _f : new Date();
            this.id = data.id;
            this.inProgressScopeHistory = data.inProgressScopeHistory;
            this.isActive = data.isActive;
            this.isFuture = data.isFuture;
            this.isNext = data.isNext;
            this.isPast = data.isPast;
            this.isPrevious = data.isPrevious;
            this.issueCountHistory = data.issueCountHistory;
            this.name = (_g = data.name) !== null && _g !== void 0 ? _g : undefined;
            this.number = data.number;
            this.progress = data.progress;
            this.scopeHistory = data.scopeHistory;
            this.startsAt = (_h = parseDate(data.startsAt)) !== null && _h !== void 0 ? _h : new Date();
            this.updatedAt = (_j = parseDate(data.updatedAt)) !== null && _j !== void 0 ? _j : new Date();
            this._inheritedFrom = (_k = data.inheritedFrom) !== null && _k !== void 0 ? _k : undefined;
            this._team = data.team;
        }
        /** The cycle inherited from. */
        get inheritedFrom() {
            var _a, _b;
            return ((_a = this._inheritedFrom) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._inheritedFrom) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of cycle inherited from. */
        get inheritedFromId() {
            var _a;
            return (_a = this._inheritedFrom) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team that the cycle is associated with. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
        /** The ID of team that the cycle is associated with. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Issues associated with the cycle. */
        issues(variables) {
            return new Cycle_IssuesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Issues that weren't completed when the cycle was closed. */
        uncompletedIssuesUponClose(variables) {
            return new Cycle_UncompletedIssuesUponCloseQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Archives a cycle. */
        archive() {
            return new ArchiveCycleMutation(this._request).fetch(this.id);
        }
        /** Creates a new cycle. */
        create(input) {
            return new CreateCycleMutation(this._request).fetch(input);
        }
        /** Updates a cycle. */
        update(input) {
            return new UpdateCycleMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.CycleArchivePayloadFragment response data
     */
    class CycleArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of archived/unarchived entity. null if entity was deleted. */
        get entityId() {
            var _a;
            return (_a = this._entity) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Certain properties of a cycle.
     *
     * @param data - L.CycleChildWebhookPayloadFragment response data
     */
    class CycleChildWebhookPayload {
        constructor(data) {
            var _a;
            this.endsAt = data.endsAt;
            this.id = data.id;
            this.name = (_a = data.name) !== null && _a !== void 0 ? _a : undefined;
            this.number = data.number;
            this.startsAt = data.startsAt;
        }
    }
    /**
     * CycleConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this CycleConnection model
     * @param data - CycleConnection response data
     */
    class CycleConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Cycle(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A cycle notification subscription.
     *
     * @param request - function to call the graphql client
     * @param data - L.CycleNotificationSubscriptionFragment response data
     */
    class CycleNotificationSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            super(request);
            this.active = data.active;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.notificationSubscriptionTypes = data.notificationSubscriptionTypes;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.contextViewType = (_d = data.contextViewType) !== null && _d !== void 0 ? _d : undefined;
            this.userContextViewType = (_e = data.userContextViewType) !== null && _e !== void 0 ? _e : undefined;
            this._customView = (_f = data.customView) !== null && _f !== void 0 ? _f : undefined;
            this._customer = (_g = data.customer) !== null && _g !== void 0 ? _g : undefined;
            this._cycle = data.cycle;
            this._initiative = (_h = data.initiative) !== null && _h !== void 0 ? _h : undefined;
            this._label = (_j = data.label) !== null && _j !== void 0 ? _j : undefined;
            this._project = (_k = data.project) !== null && _k !== void 0 ? _k : undefined;
            this._subscriber = data.subscriber;
            this._team = (_l = data.team) !== null && _l !== void 0 ? _l : undefined;
            this._user = (_m = data.user) !== null && _m !== void 0 ? _m : undefined;
        }
        /** The contextual custom view associated with the notification subscription. */
        get customView() {
            var _a, _b;
            return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual custom view associated with the notification subscription. */
        get customViewId() {
            var _a;
            return (_a = this._customView) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The customer associated with the notification subscription. */
        get customer() {
            var _a, _b;
            return ((_a = this._customer) === null || _a === void 0 ? void 0 : _a.id) ? new CustomerQuery(this._request).fetch((_b = this._customer) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of customer associated with the notification subscription. */
        get customerId() {
            var _a;
            return (_a = this._customer) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The cycle subscribed to. */
        get cycle() {
            return new CycleQuery(this._request).fetch(this._cycle.id);
        }
        /** The ID of cycle subscribed to. */
        get cycleId() {
            var _a;
            return (_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual initiative view associated with the notification subscription. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual initiative view associated with the notification subscription. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual label view associated with the notification subscription. */
        get label() {
            var _a, _b;
            return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual label view associated with the notification subscription. */
        get labelId() {
            var _a;
            return (_a = this._label) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual project view associated with the notification subscription. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual project view associated with the notification subscription. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that subscribed to receive notifications. */
        get subscriber() {
            return new UserQuery(this._request).fetch(this._subscriber.id);
        }
        /** The ID of user that subscribed to receive notifications. */
        get subscriberId() {
            var _a;
            return (_a = this._subscriber) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team associated with the notification subscription. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of team associated with the notification subscription. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user view associated with the notification subscription. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user view associated with the notification subscription. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * CyclePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.CyclePayloadFragment response data
     */
    class CyclePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._cycle = (_a = data.cycle) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The Cycle that was created or updated. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of cycle that was created or updated. */
        get cycleId() {
            var _a;
            return (_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Payload for a cycle webhook.
     *
     * @param data - L.CycleWebhookPayloadFragment response data
     */
    class CycleWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d, _e, _f;
            this.archivedAt = (_a = data.archivedAt) !== null && _a !== void 0 ? _a : undefined;
            this.autoArchivedAt = (_b = data.autoArchivedAt) !== null && _b !== void 0 ? _b : undefined;
            this.completedAt = (_c = data.completedAt) !== null && _c !== void 0 ? _c : undefined;
            this.completedIssueCountHistory = data.completedIssueCountHistory;
            this.completedScopeHistory = data.completedScopeHistory;
            this.createdAt = data.createdAt;
            this.description = (_d = data.description) !== null && _d !== void 0 ? _d : undefined;
            this.endsAt = data.endsAt;
            this.id = data.id;
            this.inProgressScopeHistory = data.inProgressScopeHistory;
            this.inheritedFromId = (_e = data.inheritedFromId) !== null && _e !== void 0 ? _e : undefined;
            this.issueCountHistory = data.issueCountHistory;
            this.name = (_f = data.name) !== null && _f !== void 0 ? _f : undefined;
            this.number = data.number;
            this.scopeHistory = data.scopeHistory;
            this.startsAt = data.startsAt;
            this.teamId = data.teamId;
            this.uncompletedIssuesUponCloseIds = data.uncompletedIssuesUponCloseIds;
            this.updatedAt = data.updatedAt;
        }
    }
    /**
     * A generic payload return from entity deletion mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.DeletePayloadFragment response data
     */
    class DeletePayload extends Request {
        constructor(request, data) {
            super(request);
            this.entityId = data.entityId;
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * A document that can be attached to different entities.
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentFragment response data
     */
    class Document extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = (_b = data.color) !== null && _b !== void 0 ? _b : undefined;
            this.content = (_c = data.content) !== null && _c !== void 0 ? _c : undefined;
            this.createdAt = (_d = parseDate(data.createdAt)) !== null && _d !== void 0 ? _d : new Date();
            this.documentContentId = (_e = data.documentContentId) !== null && _e !== void 0 ? _e : undefined;
            this.hiddenAt = (_f = parseDate(data.hiddenAt)) !== null && _f !== void 0 ? _f : undefined;
            this.icon = (_g = data.icon) !== null && _g !== void 0 ? _g : undefined;
            this.id = data.id;
            this.slugId = data.slugId;
            this.sortOrder = data.sortOrder;
            this.title = data.title;
            this.trashed = (_h = data.trashed) !== null && _h !== void 0 ? _h : undefined;
            this.updatedAt = (_j = parseDate(data.updatedAt)) !== null && _j !== void 0 ? _j : new Date();
            this.url = data.url;
            this._creator = (_k = data.creator) !== null && _k !== void 0 ? _k : undefined;
            this._initiative = (_l = data.initiative) !== null && _l !== void 0 ? _l : undefined;
            this._lastAppliedTemplate = (_m = data.lastAppliedTemplate) !== null && _m !== void 0 ? _m : undefined;
            this._project = (_o = data.project) !== null && _o !== void 0 ? _o : undefined;
            this._updatedBy = (_p = data.updatedBy) !== null && _p !== void 0 ? _p : undefined;
        }
        /** The user who created the document. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who created the document. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The initiative that the document is associated with. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of initiative that the document is associated with. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The last template that was applied to this document. */
        get lastAppliedTemplate() {
            var _a, _b;
            return ((_a = this._lastAppliedTemplate) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._lastAppliedTemplate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of last template that was applied to this document. */
        get lastAppliedTemplateId() {
            var _a;
            return (_a = this._lastAppliedTemplate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The project that the document is associated with. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of project that the document is associated with. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user who last updated the document. */
        get updatedBy() {
            var _a, _b;
            return ((_a = this._updatedBy) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._updatedBy) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who last updated the document. */
        get updatedById() {
            var _a;
            return (_a = this._updatedBy) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Comments associated with the document. */
        comments(variables) {
            return new Document_CommentsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Creates a new document. */
        create(input) {
            return new CreateDocumentMutation(this._request).fetch(input);
        }
        /** Deletes (trashes) a document. */
        delete() {
            return new DeleteDocumentMutation(this._request).fetch(this.id);
        }
        /** Restores a document. */
        unarchive() {
            return new UnarchiveDocumentMutation(this._request).fetch(this.id);
        }
        /** Updates a document. */
        update(input) {
            return new UpdateDocumentMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentArchivePayloadFragment response data
     */
    class DocumentArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new DocumentQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of archived/unarchived entity. null if entity was deleted. */
        get entityId() {
            var _a;
            return (_a = this._entity) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Certain properties of a document.
     *
     * @param data - L.DocumentChildWebhookPayloadFragment response data
     */
    class DocumentChildWebhookPayload {
        constructor(data) {
            var _a, _b;
            this.id = data.id;
            this.initiativeId = (_a = data.initiativeId) !== null && _a !== void 0 ? _a : undefined;
            this.projectId = (_b = data.projectId) !== null && _b !== void 0 ? _b : undefined;
            this.title = data.title;
            this.initiative = data.initiative ? new InitiativeChildWebhookPayload(data.initiative) : undefined;
            this.project = data.project ? new ProjectChildWebhookPayload(data.project) : undefined;
        }
    }
    /**
     * DocumentConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this DocumentConnection model
     * @param data - DocumentConnection response data
     */
    class DocumentConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Document(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A document content for a project.
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentContentFragment response data
     */
    class DocumentContent extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.content = (_b = data.content) !== null && _b !== void 0 ? _b : undefined;
            this.contentState = (_c = data.contentState) !== null && _c !== void 0 ? _c : undefined;
            this.createdAt = (_d = parseDate(data.createdAt)) !== null && _d !== void 0 ? _d : new Date();
            this.id = data.id;
            this.restoredAt = (_e = parseDate(data.restoredAt)) !== null && _e !== void 0 ? _e : undefined;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
            this._document = (_g = data.document) !== null && _g !== void 0 ? _g : undefined;
            this._initiative = (_h = data.initiative) !== null && _h !== void 0 ? _h : undefined;
            this._issue = (_j = data.issue) !== null && _j !== void 0 ? _j : undefined;
            this._project = (_k = data.project) !== null && _k !== void 0 ? _k : undefined;
            this._projectMilestone = (_l = data.projectMilestone) !== null && _l !== void 0 ? _l : undefined;
        }
        /** The document that the content is associated with. */
        get document() {
            var _a, _b;
            return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.id) ? new DocumentQuery(this._request).fetch((_b = this._document) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of document that the content is associated with. */
        get documentId() {
            var _a;
            return (_a = this._document) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The initiative that the content is associated with. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of initiative that the content is associated with. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The issue that the content is associated with. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of issue that the content is associated with. */
        get issueId() {
            var _a;
            return (_a = this._issue) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The project that the content is associated with. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of project that the content is associated with. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The project milestone that the content is associated with. */
        get projectMilestone() {
            var _a, _b;
            return ((_a = this._projectMilestone) === null || _a === void 0 ? void 0 : _a.id)
                ? new ProjectMilestoneQuery(this._request).fetch((_b = this._projectMilestone) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of project milestone that the content is associated with. */
        get projectMilestoneId() {
            var _a;
            return (_a = this._projectMilestone) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Certain properties of a document content.
     *
     * @param data - L.DocumentContentChildWebhookPayloadFragment response data
     */
    class DocumentContentChildWebhookPayload {
        constructor(data) {
            this.document = data.document ? new DocumentChildWebhookPayload(data.document) : undefined;
            this.project = data.project ? new ProjectChildWebhookPayload(data.project) : undefined;
        }
    }
    /**
     * DocumentContentHistoryPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentContentHistoryPayloadFragment response data
     */
    class DocumentContentHistoryPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
            this.history = data.history.map(node => new DocumentContentHistoryType(request, node));
        }
    }
    /**
     * DocumentContentHistoryType model
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentContentHistoryTypeFragment response data
     */
    class DocumentContentHistoryType extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.actorIds = (_a = data.actorIds) !== null && _a !== void 0 ? _a : undefined;
            this.contentDataSnapshotAt = (_b = parseDate(data.contentDataSnapshotAt)) !== null && _b !== void 0 ? _b : new Date();
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.id = data.id;
        }
    }
    /**
     * A document related notification.
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentNotificationFragment response data
     */
    class DocumentNotification extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.commentId = (_b = data.commentId) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.documentId = data.documentId;
            this.emailedAt = (_d = parseDate(data.emailedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.parentCommentId = (_e = data.parentCommentId) !== null && _e !== void 0 ? _e : undefined;
            this.reactionEmoji = (_f = data.reactionEmoji) !== null && _f !== void 0 ? _f : undefined;
            this.readAt = (_g = parseDate(data.readAt)) !== null && _g !== void 0 ? _g : undefined;
            this.snoozedUntilAt = (_h = parseDate(data.snoozedUntilAt)) !== null && _h !== void 0 ? _h : undefined;
            this.type = data.type;
            this.unsnoozedAt = (_j = parseDate(data.unsnoozedAt)) !== null && _j !== void 0 ? _j : undefined;
            this.updatedAt = (_k = parseDate(data.updatedAt)) !== null && _k !== void 0 ? _k : new Date();
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.category = data.category;
            this._actor = (_l = data.actor) !== null && _l !== void 0 ? _l : undefined;
            this._externalUserActor = (_m = data.externalUserActor) !== null && _m !== void 0 ? _m : undefined;
            this._user = data.user;
        }
        /** The user that caused the notification. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user that caused the notification. */
        get actorId() {
            var _a;
            return (_a = this._actor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The external user that caused the notification. */
        get externalUserActor() {
            var _a, _b;
            return ((_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserActor) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of external user that caused the notification. */
        get externalUserActorId() {
            var _a;
            return (_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that received the notification. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** The ID of user that received the notification. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * DocumentPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentPayloadFragment response data
     */
    class DocumentPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._document = data.document;
        }
        /** The document that was created or updated. */
        get document() {
            return new DocumentQuery(this._request).fetch(this._document.id);
        }
        /** The ID of document that was created or updated. */
        get documentId() {
            var _a;
            return (_a = this._document) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * DocumentSearchPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentSearchPayloadFragment response data
     */
    class DocumentSearchPayload extends Request {
        constructor(request, data) {
            super(request);
            this.totalCount = data.totalCount;
            this.archivePayload = new ArchiveResponse(request, data.archivePayload);
            this.pageInfo = new PageInfo(request, data.pageInfo);
            this.nodes = data.nodes.map(node => new DocumentSearchResult(request, node));
        }
    }
    /**
     * DocumentSearchResult model
     *
     * @param request - function to call the graphql client
     * @param data - L.DocumentSearchResultFragment response data
     */
    class DocumentSearchResult extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = (_b = data.color) !== null && _b !== void 0 ? _b : undefined;
            this.content = (_c = data.content) !== null && _c !== void 0 ? _c : undefined;
            this.createdAt = (_d = parseDate(data.createdAt)) !== null && _d !== void 0 ? _d : new Date();
            this.documentContentId = (_e = data.documentContentId) !== null && _e !== void 0 ? _e : undefined;
            this.hiddenAt = (_f = parseDate(data.hiddenAt)) !== null && _f !== void 0 ? _f : undefined;
            this.icon = (_g = data.icon) !== null && _g !== void 0 ? _g : undefined;
            this.id = data.id;
            this.metadata = data.metadata;
            this.slugId = data.slugId;
            this.sortOrder = data.sortOrder;
            this.title = data.title;
            this.trashed = (_h = data.trashed) !== null && _h !== void 0 ? _h : undefined;
            this.updatedAt = (_j = parseDate(data.updatedAt)) !== null && _j !== void 0 ? _j : new Date();
            this.url = data.url;
            this._creator = (_k = data.creator) !== null && _k !== void 0 ? _k : undefined;
            this._initiative = (_l = data.initiative) !== null && _l !== void 0 ? _l : undefined;
            this._lastAppliedTemplate = (_m = data.lastAppliedTemplate) !== null && _m !== void 0 ? _m : undefined;
            this._project = (_o = data.project) !== null && _o !== void 0 ? _o : undefined;
            this._updatedBy = (_p = data.updatedBy) !== null && _p !== void 0 ? _p : undefined;
        }
        /** The user who created the document. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who created the document. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The initiative that the document is associated with. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of initiative that the document is associated with. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The last template that was applied to this document. */
        get lastAppliedTemplate() {
            var _a, _b;
            return ((_a = this._lastAppliedTemplate) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._lastAppliedTemplate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of last template that was applied to this document. */
        get lastAppliedTemplateId() {
            var _a;
            return (_a = this._lastAppliedTemplate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The project that the document is associated with. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of project that the document is associated with. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user who last updated the document. */
        get updatedBy() {
            var _a, _b;
            return ((_a = this._updatedBy) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._updatedBy) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who last updated the document. */
        get updatedById() {
            var _a;
            return (_a = this._updatedBy) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Payload for a document webhook.
     *
     * @param data - L.DocumentWebhookPayloadFragment response data
     */
    class DocumentWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
            this.archivedAt = (_a = data.archivedAt) !== null && _a !== void 0 ? _a : undefined;
            this.color = (_b = data.color) !== null && _b !== void 0 ? _b : undefined;
            this.content = (_c = data.content) !== null && _c !== void 0 ? _c : undefined;
            this.createdAt = data.createdAt;
            this.creatorId = (_d = data.creatorId) !== null && _d !== void 0 ? _d : undefined;
            this.description = (_e = data.description) !== null && _e !== void 0 ? _e : undefined;
            this.hiddenAt = (_f = data.hiddenAt) !== null && _f !== void 0 ? _f : undefined;
            this.icon = (_g = data.icon) !== null && _g !== void 0 ? _g : undefined;
            this.id = data.id;
            this.initiativeId = (_h = data.initiativeId) !== null && _h !== void 0 ? _h : undefined;
            this.lastAppliedTemplateId = (_j = data.lastAppliedTemplateId) !== null && _j !== void 0 ? _j : undefined;
            this.projectId = (_k = data.projectId) !== null && _k !== void 0 ? _k : undefined;
            this.resourceFolderId = (_l = data.resourceFolderId) !== null && _l !== void 0 ? _l : undefined;
            this.slugId = data.slugId;
            this.sortOrder = data.sortOrder;
            this.subscriberIds = (_m = data.subscriberIds) !== null && _m !== void 0 ? _m : undefined;
            this.title = data.title;
            this.trashed = (_o = data.trashed) !== null && _o !== void 0 ? _o : undefined;
            this.updatedAt = data.updatedAt;
            this.updatedById = (_p = data.updatedById) !== null && _p !== void 0 ? _p : undefined;
        }
    }
    /**
     * A general purpose draft. Used for comments, project updates, etc.
     *
     * @param request - function to call the graphql client
     * @param data - L.DraftFragment response data
     */
    class Draft extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.bodyData = (_b = parseJson(data.bodyData)) !== null && _b !== void 0 ? _b : {};
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.data = (_d = data.data) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.isAutogenerated = data.isAutogenerated;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this._customerNeed = (_f = data.customerNeed) !== null && _f !== void 0 ? _f : undefined;
            this._initiative = (_g = data.initiative) !== null && _g !== void 0 ? _g : undefined;
            this._initiativeUpdate = (_h = data.initiativeUpdate) !== null && _h !== void 0 ? _h : undefined;
            this._issue = (_j = data.issue) !== null && _j !== void 0 ? _j : undefined;
            this._parentComment = (_k = data.parentComment) !== null && _k !== void 0 ? _k : undefined;
            this._project = (_l = data.project) !== null && _l !== void 0 ? _l : undefined;
            this._projectUpdate = (_m = data.projectUpdate) !== null && _m !== void 0 ? _m : undefined;
            this._team = (_o = data.team) !== null && _o !== void 0 ? _o : undefined;
            this._user = data.user;
        }
        /** The customer need that this draft is referencing. */
        get customerNeed() {
            var _a, _b;
            return ((_a = this._customerNeed) === null || _a === void 0 ? void 0 : _a.id)
                ? new CustomerNeedQuery(this._request).fetch({ id: (_b = this._customerNeed) === null || _b === void 0 ? void 0 : _b.id })
                : undefined;
        }
        /** The ID of customer need that this draft is referencing. */
        get customerNeedId() {
            var _a;
            return (_a = this._customerNeed) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The initiative for which this is a draft initiative update. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of initiative for which this is a draft initiative update. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The initiative update for which this is a draft comment. */
        get initiativeUpdate() {
            var _a, _b;
            return ((_a = this._initiativeUpdate) === null || _a === void 0 ? void 0 : _a.id)
                ? new InitiativeUpdateQuery(this._request).fetch((_b = this._initiativeUpdate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of initiative update for which this is a draft comment. */
        get initiativeUpdateId() {
            var _a;
            return (_a = this._initiativeUpdate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The issue for which this is a draft comment. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of issue for which this is a draft comment. */
        get issueId() {
            var _a;
            return (_a = this._issue) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The comment for which this is a draft comment reply. */
        get parentComment() {
            var _a, _b;
            return ((_a = this._parentComment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._parentComment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The ID of comment for which this is a draft comment reply. */
        get parentCommentId() {
            var _a;
            return (_a = this._parentComment) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The project for which this is a draft project update. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of project for which this is a draft project update. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The project update for which this is a draft comment. */
        get projectUpdate() {
            var _a, _b;
            return ((_a = this._projectUpdate) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectUpdateQuery(this._request).fetch((_b = this._projectUpdate) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of project update for which this is a draft comment. */
        get projectUpdateId() {
            var _a;
            return (_a = this._projectUpdate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team for which this is a draft post. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of team for which this is a draft post. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user who created the draft. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** The ID of user who created the draft. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * DraftConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this DraftConnection model
     * @param data - DraftConnection response data
     */
    class DraftConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Draft(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * An email address that can be used for submitting issues.
     *
     * @param request - function to call the graphql client
     * @param data - L.EmailIntakeAddressFragment response data
     */
    class EmailIntakeAddress extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.address = data.address;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.customerRequestsEnabled = data.customerRequestsEnabled;
            this.enabled = data.enabled;
            this.forwardingEmailAddress = (_c = data.forwardingEmailAddress) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.issueCanceledAutoReply = (_d = data.issueCanceledAutoReply) !== null && _d !== void 0 ? _d : undefined;
            this.issueCanceledAutoReplyEnabled = data.issueCanceledAutoReplyEnabled;
            this.issueCompletedAutoReply = (_e = data.issueCompletedAutoReply) !== null && _e !== void 0 ? _e : undefined;
            this.issueCompletedAutoReplyEnabled = data.issueCompletedAutoReplyEnabled;
            this.issueCreatedAutoReply = (_f = data.issueCreatedAutoReply) !== null && _f !== void 0 ? _f : undefined;
            this.issueCreatedAutoReplyEnabled = data.issueCreatedAutoReplyEnabled;
            this.repliesEnabled = data.repliesEnabled;
            this.senderName = (_g = data.senderName) !== null && _g !== void 0 ? _g : undefined;
            this.updatedAt = (_h = parseDate(data.updatedAt)) !== null && _h !== void 0 ? _h : new Date();
            this.useUserNamesInReplies = data.useUserNamesInReplies;
            this.sesDomainIdentity = data.sesDomainIdentity
                ? new SesDomainIdentity(request, data.sesDomainIdentity)
                : undefined;
            this.type = data.type;
            this._creator = (_j = data.creator) !== null && _j !== void 0 ? _j : undefined;
            this._team = (_k = data.team) !== null && _k !== void 0 ? _k : undefined;
            this._template = (_l = data.template) !== null && _l !== void 0 ? _l : undefined;
        }
        /** The user who created the email intake address. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who created the email intake address. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The organization that the email address is associated with. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The team that the email address is associated with. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of team that the email address is associated with. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The template that the email address is associated with. */
        get template() {
            var _a, _b;
            return ((_a = this._template) === null || _a === void 0 ? void 0 : _a.id) ? new TemplateQuery(this._request).fetch((_b = this._template) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of template that the email address is associated with. */
        get templateId() {
            var _a;
            return (_a = this._template) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates a new email intake address. */
        create(input) {
            return new CreateEmailIntakeAddressMutation(this._request).fetch(input);
        }
        /** Deletes an email intake address object. */
        delete() {
            return new DeleteEmailIntakeAddressMutation(this._request).fetch(this.id);
        }
        /** Updates an existing email intake address. */
        update(input) {
            return new UpdateEmailIntakeAddressMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * EmailIntakeAddressPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.EmailIntakeAddressPayloadFragment response data
     */
    class EmailIntakeAddressPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._emailIntakeAddress = data.emailIntakeAddress;
        }
        /** The email address that was created or updated. */
        get emailIntakeAddress() {
            return new EmailIntakeAddressQuery(this._request).fetch(this._emailIntakeAddress.id);
        }
        /** The ID of email address that was created or updated. */
        get emailIntakeAddressId() {
            var _a;
            return (_a = this._emailIntakeAddress) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * EmailUnsubscribePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.EmailUnsubscribePayloadFragment response data
     */
    class EmailUnsubscribePayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * EmailUserAccountAuthChallengeResponse model
     *
     * @param request - function to call the graphql client
     * @param data - L.EmailUserAccountAuthChallengeResponseFragment response data
     */
    class EmailUserAccountAuthChallengeResponse extends Request {
        constructor(request, data) {
            super(request);
            this.authType = data.authType;
            this.success = data.success;
        }
    }
    /**
     * A custom emoji.
     *
     * @param request - function to call the graphql client
     * @param data - L.EmojiFragment response data
     */
    class Emoji extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.name = data.name;
            this.source = data.source;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.url = data.url;
            this._creator = (_d = data.creator) !== null && _d !== void 0 ? _d : undefined;
        }
        /** The user who created the emoji. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who created the emoji. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The organization that the emoji belongs to. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** Creates a custom emoji. */
        create(input) {
            return new CreateEmojiMutation(this._request).fetch(input);
        }
        /** Deletes an emoji. */
        delete() {
            return new DeleteEmojiMutation(this._request).fetch(this.id);
        }
    }
    /**
     * EmojiConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this EmojiConnection model
     * @param data - EmojiConnection response data
     */
    class EmojiConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Emoji(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * EmojiPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.EmojiPayloadFragment response data
     */
    class EmojiPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._emoji = data.emoji;
        }
        /** The emoji that was created. */
        get emoji() {
            return new EmojiQuery(this._request).fetch(this._emoji.id);
        }
        /** The ID of emoji that was created. */
        get emojiId() {
            var _a;
            return (_a = this._emoji) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * A basic entity.
     *
     * @param request - function to call the graphql client
     * @param data - L.EntityFragment response data
     */
    class Entity extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
        }
    }
    /**
     * An external link for an entity like initiative, etc...
     *
     * @param request - function to call the graphql client
     * @param data - L.EntityExternalLinkFragment response data
     */
    class EntityExternalLink extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.label = data.label;
            this.sortOrder = data.sortOrder;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.url = data.url;
            this._creator = data.creator;
            this._initiative = (_d = data.initiative) !== null && _d !== void 0 ? _d : undefined;
        }
        /** The user who created the link. */
        get creator() {
            return new UserQuery(this._request).fetch(this._creator.id);
        }
        /** The ID of user who created the link. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The initiative that the link is associated with. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of initiative that the link is associated with. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates a new entity link. */
        create(input) {
            return new CreateEntityExternalLinkMutation(this._request).fetch(input);
        }
        /** Deletes an entity link. */
        delete() {
            return new DeleteEntityExternalLinkMutation(this._request).fetch(this.id);
        }
        /** Updates an entity link. */
        update(input) {
            return new UpdateEntityExternalLinkMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * EntityExternalLinkConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this EntityExternalLinkConnection model
     * @param data - EntityExternalLinkConnection response data
     */
    class EntityExternalLinkConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new EntityExternalLink(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * EntityExternalLinkPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.EntityExternalLinkPayloadFragment response data
     */
    class EntityExternalLinkPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entityExternalLink = data.entityExternalLink;
        }
        /** The link that was created or updated. */
        get entityExternalLink() {
            return new EntityExternalLinkQuery(this._request).fetch(this._entityExternalLink.id);
        }
        /** The ID of link that was created or updated. */
        get entityExternalLinkId() {
            var _a;
            return (_a = this._entityExternalLink) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Payload for entity-related webhook events.
     *
     * @param data - L.EntityWebhookPayloadFragment response data
     */
    class EntityWebhookPayload {
        constructor(data) {
            var _a, _b, _c;
            this.action = data.action;
            this.createdAt = (_a = parseDate(data.createdAt)) !== null && _a !== void 0 ? _a : new Date();
            this.organizationId = data.organizationId;
            this.type = data.type;
            this.updatedFrom = (_b = data.updatedFrom) !== null && _b !== void 0 ? _b : undefined;
            this.url = (_c = data.url) !== null && _c !== void 0 ? _c : undefined;
        }
    }
    /**
     * Information about an external entity.
     *
     * @param request - function to call the graphql client
     * @param data - L.ExternalEntityInfoFragment response data
     */
    class ExternalEntityInfo extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.id = data.id;
            this.service = data.service;
            this.metadata = (_a = data.metadata) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * Metadata about the external GitHub entity.
     *
     * @param request - function to call the graphql client
     * @param data - L.ExternalEntityInfoGithubMetadataFragment response data
     */
    class ExternalEntityInfoGithubMetadata extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.number = (_a = data.number) !== null && _a !== void 0 ? _a : undefined;
            this.owner = (_b = data.owner) !== null && _b !== void 0 ? _b : undefined;
            this.repo = (_c = data.repo) !== null && _c !== void 0 ? _c : undefined;
        }
    }
    /**
     * Metadata about the external Jira entity.
     *
     * @param request - function to call the graphql client
     * @param data - L.ExternalEntityInfoJiraMetadataFragment response data
     */
    class ExternalEntityInfoJiraMetadata extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.issueKey = (_a = data.issueKey) !== null && _a !== void 0 ? _a : undefined;
            this.issueTypeId = (_b = data.issueTypeId) !== null && _b !== void 0 ? _b : undefined;
            this.projectId = (_c = data.projectId) !== null && _c !== void 0 ? _c : undefined;
        }
    }
    /**
     * Metadata about the external Slack entity.
     *
     * @param request - function to call the graphql client
     * @param data - L.ExternalEntitySlackMetadataFragment response data
     */
    class ExternalEntitySlackMetadata extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.channelId = (_a = data.channelId) !== null && _a !== void 0 ? _a : undefined;
            this.channelName = (_b = data.channelName) !== null && _b !== void 0 ? _b : undefined;
            this.isFromSlack = data.isFromSlack;
            this.messageUrl = (_c = data.messageUrl) !== null && _c !== void 0 ? _c : undefined;
        }
    }
    /**
     * An external authenticated (e.g., through Slack) user which doesn't have a Linear account, but can create and update entities in Linear from the external system that authenticated them.
     *
     * @param request - function to call the graphql client
     * @param data - L.ExternalUserFragment response data
     */
    class ExternalUser extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.avatarUrl = (_b = data.avatarUrl) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.displayName = data.displayName;
            this.email = (_d = data.email) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.lastSeen = (_e = parseDate(data.lastSeen)) !== null && _e !== void 0 ? _e : undefined;
            this.name = data.name;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
        }
        /** Organization the external user belongs to. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
    }
    /**
     * Certain properties of an external user.
     *
     * @param data - L.ExternalUserChildWebhookPayloadFragment response data
     */
    class ExternalUserChildWebhookPayload {
        constructor(data) {
            this.email = data.email;
            this.id = data.id;
            this.name = data.name;
        }
    }
    /**
     * ExternalUserConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ExternalUserConnection model
     * @param data - ExternalUserConnection response data
     */
    class ExternalUserConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new ExternalUser(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A facet. Facets are joins between entities. A facet can tie a custom view to a project, or a a project to a roadmap for example.
     *
     * @param request - function to call the graphql client
     * @param data - L.FacetFragment response data
     */
    class Facet extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.sortOrder = data.sortOrder;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.sourcePage = (_d = data.sourcePage) !== null && _d !== void 0 ? _d : undefined;
            this._sourceFeedUser = (_e = data.sourceFeedUser) !== null && _e !== void 0 ? _e : undefined;
            this._sourceInitiative = (_f = data.sourceInitiative) !== null && _f !== void 0 ? _f : undefined;
            this._sourceProject = (_g = data.sourceProject) !== null && _g !== void 0 ? _g : undefined;
            this._sourceTeam = (_h = data.sourceTeam) !== null && _h !== void 0 ? _h : undefined;
            this._targetCustomView = (_j = data.targetCustomView) !== null && _j !== void 0 ? _j : undefined;
        }
        /** The owning feed user. */
        get sourceFeedUser() {
            var _a, _b;
            return ((_a = this._sourceFeedUser) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._sourceFeedUser) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of owning feed user. */
        get sourceFeedUserId() {
            var _a;
            return (_a = this._sourceFeedUser) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The owning initiative. */
        get sourceInitiative() {
            var _a, _b;
            return ((_a = this._sourceInitiative) === null || _a === void 0 ? void 0 : _a.id)
                ? new InitiativeQuery(this._request).fetch((_b = this._sourceInitiative) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of owning initiative. */
        get sourceInitiativeId() {
            var _a;
            return (_a = this._sourceInitiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The owning organization. */
        get sourceOrganization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The owning project. */
        get sourceProject() {
            var _a, _b;
            return ((_a = this._sourceProject) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._sourceProject) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of owning project. */
        get sourceProjectId() {
            var _a;
            return (_a = this._sourceProject) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The owning team. */
        get sourceTeam() {
            var _a, _b;
            return ((_a = this._sourceTeam) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._sourceTeam) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of owning team. */
        get sourceTeamId() {
            var _a;
            return (_a = this._sourceTeam) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The targeted custom view. */
        get targetCustomView() {
            var _a, _b;
            return ((_a = this._targetCustomView) === null || _a === void 0 ? void 0 : _a.id)
                ? new CustomViewQuery(this._request).fetch((_b = this._targetCustomView) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of targeted custom view. */
        get targetCustomViewId() {
            var _a;
            return (_a = this._targetCustomView) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * User favorites presented in the sidebar.
     *
     * @param request - function to call the graphql client
     * @param data - L.FavoriteFragment response data
     */
    class Favorite extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.folderName = (_c = data.folderName) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.predefinedViewType = (_d = data.predefinedViewType) !== null && _d !== void 0 ? _d : undefined;
            this.sortOrder = data.sortOrder;
            this.type = data.type;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this.url = (_f = data.url) !== null && _f !== void 0 ? _f : undefined;
            this.initiativeTab = (_g = data.initiativeTab) !== null && _g !== void 0 ? _g : undefined;
            this.projectTab = (_h = data.projectTab) !== null && _h !== void 0 ? _h : undefined;
            this._customView = (_j = data.customView) !== null && _j !== void 0 ? _j : undefined;
            this._customer = (_k = data.customer) !== null && _k !== void 0 ? _k : undefined;
            this._cycle = (_l = data.cycle) !== null && _l !== void 0 ? _l : undefined;
            this._document = (_m = data.document) !== null && _m !== void 0 ? _m : undefined;
            this._initiative = (_o = data.initiative) !== null && _o !== void 0 ? _o : undefined;
            this._issue = (_p = data.issue) !== null && _p !== void 0 ? _p : undefined;
            this._label = (_q = data.label) !== null && _q !== void 0 ? _q : undefined;
            this._owner = data.owner;
            this._parent = (_r = data.parent) !== null && _r !== void 0 ? _r : undefined;
            this._predefinedViewTeam = (_s = data.predefinedViewTeam) !== null && _s !== void 0 ? _s : undefined;
            this._project = (_t = data.project) !== null && _t !== void 0 ? _t : undefined;
            this._projectLabel = (_u = data.projectLabel) !== null && _u !== void 0 ? _u : undefined;
            this._projectTeam = (_v = data.projectTeam) !== null && _v !== void 0 ? _v : undefined;
            this._user = (_w = data.user) !== null && _w !== void 0 ? _w : undefined;
        }
        /** The favorited custom view. */
        get customView() {
            var _a, _b;
            return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of favorited custom view. */
        get customViewId() {
            var _a;
            return (_a = this._customView) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The favorited customer. */
        get customer() {
            var _a, _b;
            return ((_a = this._customer) === null || _a === void 0 ? void 0 : _a.id) ? new CustomerQuery(this._request).fetch((_b = this._customer) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of favorited customer. */
        get customerId() {
            var _a;
            return (_a = this._customer) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The favorited cycle. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of favorited cycle. */
        get cycleId() {
            var _a;
            return (_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The favorited document. */
        get document() {
            var _a, _b;
            return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.id) ? new DocumentQuery(this._request).fetch((_b = this._document) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of favorited document. */
        get documentId() {
            var _a;
            return (_a = this._document) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The favorited initiative. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of favorited initiative. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The favorited issue. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of favorited issue. */
        get issueId() {
            var _a;
            return (_a = this._issue) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The favorited label. */
        get label() {
            var _a, _b;
            return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of favorited label. */
        get labelId() {
            var _a;
            return (_a = this._label) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The owner of the favorite. */
        get owner() {
            return new UserQuery(this._request).fetch(this._owner.id);
        }
        /** The ID of owner of the favorite. */
        get ownerId() {
            var _a;
            return (_a = this._owner) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The parent folder of the favorite. */
        get parent() {
            var _a, _b;
            return ((_a = this._parent) === null || _a === void 0 ? void 0 : _a.id) ? new FavoriteQuery(this._request).fetch((_b = this._parent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of parent folder of the favorite. */
        get parentId() {
            var _a;
            return (_a = this._parent) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team of the favorited predefined view. */
        get predefinedViewTeam() {
            var _a, _b;
            return ((_a = this._predefinedViewTeam) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._predefinedViewTeam) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of team of the favorited predefined view. */
        get predefinedViewTeamId() {
            var _a;
            return (_a = this._predefinedViewTeam) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The favorited project. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of favorited project. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The favorited project label. */
        get projectLabel() {
            var _a, _b;
            return ((_a = this._projectLabel) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectLabelQuery(this._request).fetch((_b = this._projectLabel) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of favorited project label. */
        get projectLabelId() {
            var _a;
            return (_a = this._projectLabel) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** [DEPRECATED] The favorited team of the project. */
        get projectTeam() {
            var _a, _b;
            return ((_a = this._projectTeam) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._projectTeam) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of [deprecated] the favorited team of the project. */
        get projectTeamId() {
            var _a;
            return (_a = this._projectTeam) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The favorited user. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of favorited user. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Children of the favorite. Only applies to favorites of type folder. */
        children(variables) {
            return new Favorite_ChildrenQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Creates a new favorite (project, cycle etc). */
        create(input) {
            return new CreateFavoriteMutation(this._request).fetch(input);
        }
        /** Deletes a favorite reference. */
        delete() {
            return new DeleteFavoriteMutation(this._request).fetch(this.id);
        }
        /** Updates a favorite. */
        update(input) {
            return new UpdateFavoriteMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * FavoriteConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this FavoriteConnection model
     * @param data - FavoriteConnection response data
     */
    class FavoriteConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Favorite(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * FavoritePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.FavoritePayloadFragment response data
     */
    class FavoritePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._favorite = data.favorite;
        }
        /** The object that was added as a favorite. */
        get favorite() {
            return new FavoriteQuery(this._request).fetch(this._favorite.id);
        }
        /** The ID of object that was added as a favorite. */
        get favoriteId() {
            var _a;
            return (_a = this._favorite) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * FetchDataPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.FetchDataPayloadFragment response data
     */
    class FetchDataPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.data = (_a = data.data) !== null && _a !== void 0 ? _a : undefined;
            this.filters = (_b = data.filters) !== null && _b !== void 0 ? _b : undefined;
            this.query = (_c = data.query) !== null && _c !== void 0 ? _c : undefined;
            this.success = data.success;
        }
    }
    /**
     * FileUploadDeletePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.FileUploadDeletePayloadFragment response data
     */
    class FileUploadDeletePayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * FrontAttachmentPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.FrontAttachmentPayloadFragment response data
     */
    class FrontAttachmentPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._attachment = data.attachment;
        }
        /** The issue attachment that was created. */
        get attachment() {
            return new AttachmentQuery(this._request).fetch(this._attachment.id);
        }
        /** The ID of issue attachment that was created. */
        get attachmentId() {
            var _a;
            return (_a = this._attachment) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * A trigger that updates the issue status according to Git automations.
     *
     * @param request - function to call the graphql client
     * @param data - L.GitAutomationStateFragment response data
     */
    class GitAutomationState extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.branchPattern = (_b = data.branchPattern) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.id = data.id;
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
            this.targetBranch = data.targetBranch ? new GitAutomationTargetBranch(request, data.targetBranch) : undefined;
            this.event = data.event;
            this._state = (_e = data.state) !== null && _e !== void 0 ? _e : undefined;
            this._team = data.team;
        }
        /** The associated workflow state. */
        get state() {
            var _a, _b;
            return ((_a = this._state) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._state) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of associated workflow state. */
        get stateId() {
            var _a;
            return (_a = this._state) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team to which this automation state belongs. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
        /** The ID of team to which this automation state belongs. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates a new automation state. */
        create(input) {
            return new CreateGitAutomationStateMutation(this._request).fetch(input);
        }
        /** Archives an automation state. */
        delete() {
            return new DeleteGitAutomationStateMutation(this._request).fetch(this.id);
        }
        /** Updates an existing state. */
        update(input) {
            return new UpdateGitAutomationStateMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * GitAutomationStateConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this GitAutomationStateConnection model
     * @param data - GitAutomationStateConnection response data
     */
    class GitAutomationStateConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new GitAutomationState(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * GitAutomationStatePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.GitAutomationStatePayloadFragment response data
     */
    class GitAutomationStatePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.gitAutomationState = new GitAutomationState(request, data.gitAutomationState);
        }
    }
    /**
     * A Git target branch for which there are automations (GitAutomationState).
     *
     * @param request - function to call the graphql client
     * @param data - L.GitAutomationTargetBranchFragment response data
     */
    class GitAutomationTargetBranch extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.branchPattern = data.branchPattern;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.isRegex = data.isRegex;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._team = data.team;
        }
        /** The team to which this Git target branch automation belongs. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
        /** The ID of team to which this git target branch automation belongs. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates a Git target branch automation. */
        create(input) {
            return new CreateGitAutomationTargetBranchMutation(this._request).fetch(input);
        }
        /** Archives a Git target branch automation. */
        delete() {
            return new DeleteGitAutomationTargetBranchMutation(this._request).fetch(this.id);
        }
        /** Updates an existing Git target branch automation. */
        update(input) {
            return new UpdateGitAutomationTargetBranchMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * GitAutomationTargetBranchPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.GitAutomationTargetBranchPayloadFragment response data
     */
    class GitAutomationTargetBranchPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.targetBranch = new GitAutomationTargetBranch(request, data.targetBranch);
        }
    }
    /**
     * GitHubCommitIntegrationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.GitHubCommitIntegrationPayloadFragment response data
     */
    class GitHubCommitIntegrationPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.webhookSecret = data.webhookSecret;
            this._integration = (_a = data.integration) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The integration that was created or updated. */
        get integration() {
            var _a, _b;
            return ((_a = this._integration) === null || _a === void 0 ? void 0 : _a.id) ? new IntegrationQuery(this._request).fetch((_b = this._integration) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of integration that was created or updated. */
        get integrationId() {
            var _a;
            return (_a = this._integration) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * GitHubEnterpriseServerInstallVerificationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.GitHubEnterpriseServerInstallVerificationPayloadFragment response data
     */
    class GitHubEnterpriseServerInstallVerificationPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * GitHubEnterpriseServerPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.GitHubEnterpriseServerPayloadFragment response data
     */
    class GitHubEnterpriseServerPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.installUrl = data.installUrl;
            this.lastSyncId = data.lastSyncId;
            this.setupUrl = data.setupUrl;
            this.success = data.success;
            this.webhookSecret = data.webhookSecret;
            this._integration = (_a = data.integration) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The integration that was created or updated. */
        get integration() {
            var _a, _b;
            return ((_a = this._integration) === null || _a === void 0 ? void 0 : _a.id) ? new IntegrationQuery(this._request).fetch((_b = this._integration) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of integration that was created or updated. */
        get integrationId() {
            var _a;
            return (_a = this._integration) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * GitLabIntegrationCreatePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.GitLabIntegrationCreatePayloadFragment response data
     */
    class GitLabIntegrationCreatePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.webhookSecret = data.webhookSecret;
            this._integration = (_a = data.integration) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The integration that was created or updated. */
        get integration() {
            var _a, _b;
            return ((_a = this._integration) === null || _a === void 0 ? void 0 : _a.id) ? new IntegrationQuery(this._request).fetch((_b = this._integration) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of integration that was created or updated. */
        get integrationId() {
            var _a;
            return (_a = this._integration) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Metadata for guidance that should be provided to an AI agent.
     *
     * @param data - L.GuidanceRuleWebhookPayloadFragment response data
     */
    class GuidanceRuleWebhookPayload {
        constructor(data) {
            this.body = data.body;
        }
    }
    /**
     * An identity provider.
     *
     * @param request - function to call the graphql client
     * @param data - L.IdentityProviderFragment response data
     */
    class IdentityProvider extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.defaultMigrated = data.defaultMigrated;
            this.id = data.id;
            this.issuerEntityId = (_c = data.issuerEntityId) !== null && _c !== void 0 ? _c : undefined;
            this.priority = (_d = data.priority) !== null && _d !== void 0 ? _d : undefined;
            this.samlEnabled = data.samlEnabled;
            this.scimEnabled = data.scimEnabled;
            this.ssoBinding = (_e = data.ssoBinding) !== null && _e !== void 0 ? _e : undefined;
            this.ssoEndpoint = (_f = data.ssoEndpoint) !== null && _f !== void 0 ? _f : undefined;
            this.ssoSignAlgo = (_g = data.ssoSignAlgo) !== null && _g !== void 0 ? _g : undefined;
            this.ssoSigningCert = (_h = data.ssoSigningCert) !== null && _h !== void 0 ? _h : undefined;
            this.updatedAt = (_j = parseDate(data.updatedAt)) !== null && _j !== void 0 ? _j : new Date();
        }
    }
    /**
     * ImageUploadFromUrlPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ImageUploadFromUrlPayloadFragment response data
     */
    class ImageUploadFromUrlPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.url = (_a = data.url) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * An initiative to group projects.
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativeFragment response data
     */
    class Initiative extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = (_b = data.color) !== null && _b !== void 0 ? _b : undefined;
            this.completedAt = (_c = parseDate(data.completedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.content = (_d = data.content) !== null && _d !== void 0 ? _d : undefined;
            this.createdAt = (_e = parseDate(data.createdAt)) !== null && _e !== void 0 ? _e : new Date();
            this.description = (_f = data.description) !== null && _f !== void 0 ? _f : undefined;
            this.healthUpdatedAt = (_g = parseDate(data.healthUpdatedAt)) !== null && _g !== void 0 ? _g : undefined;
            this.icon = (_h = data.icon) !== null && _h !== void 0 ? _h : undefined;
            this.id = data.id;
            this.name = data.name;
            this.slugId = data.slugId;
            this.sortOrder = data.sortOrder;
            this.startedAt = (_j = parseDate(data.startedAt)) !== null && _j !== void 0 ? _j : undefined;
            this.targetDate = (_k = data.targetDate) !== null && _k !== void 0 ? _k : undefined;
            this.trashed = (_l = data.trashed) !== null && _l !== void 0 ? _l : undefined;
            this.updateReminderFrequency = (_m = data.updateReminderFrequency) !== null && _m !== void 0 ? _m : undefined;
            this.updateReminderFrequencyInWeeks = (_o = data.updateReminderFrequencyInWeeks) !== null && _o !== void 0 ? _o : undefined;
            this.updateRemindersHour = (_p = data.updateRemindersHour) !== null && _p !== void 0 ? _p : undefined;
            this.updatedAt = (_q = parseDate(data.updatedAt)) !== null && _q !== void 0 ? _q : new Date();
            this.url = data.url;
            this.documentContent = data.documentContent ? new DocumentContent(request, data.documentContent) : undefined;
            this.frequencyResolution = data.frequencyResolution;
            this.health = (_r = data.health) !== null && _r !== void 0 ? _r : undefined;
            this.status = data.status;
            this.targetDateResolution = (_s = data.targetDateResolution) !== null && _s !== void 0 ? _s : undefined;
            this.updateRemindersDay = (_t = data.updateRemindersDay) !== null && _t !== void 0 ? _t : undefined;
            this._creator = (_u = data.creator) !== null && _u !== void 0 ? _u : undefined;
            this._integrationsSettings = (_v = data.integrationsSettings) !== null && _v !== void 0 ? _v : undefined;
            this._lastUpdate = (_w = data.lastUpdate) !== null && _w !== void 0 ? _w : undefined;
            this._owner = (_x = data.owner) !== null && _x !== void 0 ? _x : undefined;
            this._parentInitiative = (_y = data.parentInitiative) !== null && _y !== void 0 ? _y : undefined;
        }
        /** The user who created the initiative. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who created the initiative. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Settings for all integrations associated with that initiative. */
        get integrationsSettings() {
            var _a, _b;
            return ((_a = this._integrationsSettings) === null || _a === void 0 ? void 0 : _a.id)
                ? new IntegrationsSettingsQuery(this._request).fetch((_b = this._integrationsSettings) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of settings for all integrations associated with that initiative. */
        get integrationsSettingsId() {
            var _a;
            return (_a = this._integrationsSettings) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The last initiative update posted for this initiative. */
        get lastUpdate() {
            var _a, _b;
            return ((_a = this._lastUpdate) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeUpdateQuery(this._request).fetch((_b = this._lastUpdate) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of last initiative update posted for this initiative. */
        get lastUpdateId() {
            var _a;
            return (_a = this._lastUpdate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The organization of the initiative. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The user who owns the initiative. */
        get owner() {
            var _a, _b;
            return ((_a = this._owner) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._owner) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who owns the initiative. */
        get ownerId() {
            var _a;
            return (_a = this._owner) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Parent initiative associated with the initiative. */
        get parentInitiative() {
            var _a, _b;
            return ((_a = this._parentInitiative) === null || _a === void 0 ? void 0 : _a.id)
                ? new InitiativeQuery(this._request).fetch((_b = this._parentInitiative) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of parent initiative associated with the initiative. */
        get parentInitiativeId() {
            var _a;
            return (_a = this._parentInitiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Documents associated with the initiative. */
        documents(variables) {
            return new Initiative_DocumentsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** History entries associated with the initiative. */
        history(variables) {
            return new Initiative_HistoryQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Links associated with the initiative. */
        links(variables) {
            return new Initiative_LinksQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Projects associated with the initiative. */
        projects(variables) {
            return new Initiative_ProjectsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Sub-initiatives associated with the initiative. */
        subInitiatives(variables) {
            return new Initiative_SubInitiativesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Archives a initiative. */
        archive() {
            return new ArchiveInitiativeMutation(this._request).fetch(this.id);
        }
        /** Creates a new initiative. */
        create(input) {
            return new CreateInitiativeMutation(this._request).fetch(input);
        }
        /** Deletes (trashes) an initiative. */
        delete() {
            return new DeleteInitiativeMutation(this._request).fetch(this.id);
        }
        /** Unarchives a initiative. */
        unarchive() {
            return new UnarchiveInitiativeMutation(this._request).fetch(this.id);
        }
        /** Updates a initiative. */
        update() {
            return new InitiativeUpdateQuery(this._request).fetch(this.id);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativeArchivePayloadFragment response data
     */
    class InitiativeArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of archived/unarchived entity. null if entity was deleted. */
        get entityId() {
            var _a;
            return (_a = this._entity) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Certain properties of an initiative.
     *
     * @param data - L.InitiativeChildWebhookPayloadFragment response data
     */
    class InitiativeChildWebhookPayload {
        constructor(data) {
            this.id = data.id;
            this.name = data.name;
            this.url = data.url;
        }
    }
    /**
     * InitiativeConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this InitiativeConnection model
     * @param data - InitiativeConnection response data
     */
    class InitiativeConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Initiative(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A initiative history containing relevant change events.
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativeHistoryFragment response data
     */
    class InitiativeHistory extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.entries = data.entries;
            this.id = data.id;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._initiative = data.initiative;
        }
        /** The initiative that the history is associated with. */
        get initiative() {
            return new InitiativeQuery(this._request).fetch(this._initiative.id);
        }
        /** The ID of initiative that the history is associated with. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * InitiativeHistoryConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this InitiativeHistoryConnection model
     * @param data - InitiativeHistoryConnection response data
     */
    class InitiativeHistoryConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new InitiativeHistory(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * An initiative related notification.
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativeNotificationFragment response data
     */
    class InitiativeNotification extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.commentId = (_b = data.commentId) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.emailedAt = (_d = parseDate(data.emailedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.initiativeId = data.initiativeId;
            this.initiativeUpdateId = (_e = data.initiativeUpdateId) !== null && _e !== void 0 ? _e : undefined;
            this.parentCommentId = (_f = data.parentCommentId) !== null && _f !== void 0 ? _f : undefined;
            this.reactionEmoji = (_g = data.reactionEmoji) !== null && _g !== void 0 ? _g : undefined;
            this.readAt = (_h = parseDate(data.readAt)) !== null && _h !== void 0 ? _h : undefined;
            this.snoozedUntilAt = (_j = parseDate(data.snoozedUntilAt)) !== null && _j !== void 0 ? _j : undefined;
            this.type = data.type;
            this.unsnoozedAt = (_k = parseDate(data.unsnoozedAt)) !== null && _k !== void 0 ? _k : undefined;
            this.updatedAt = (_l = parseDate(data.updatedAt)) !== null && _l !== void 0 ? _l : new Date();
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.category = data.category;
            this._actor = (_m = data.actor) !== null && _m !== void 0 ? _m : undefined;
            this._comment = (_o = data.comment) !== null && _o !== void 0 ? _o : undefined;
            this._document = (_p = data.document) !== null && _p !== void 0 ? _p : undefined;
            this._externalUserActor = (_q = data.externalUserActor) !== null && _q !== void 0 ? _q : undefined;
            this._initiative = (_r = data.initiative) !== null && _r !== void 0 ? _r : undefined;
            this._initiativeUpdate = (_s = data.initiativeUpdate) !== null && _s !== void 0 ? _s : undefined;
            this._parentComment = (_t = data.parentComment) !== null && _t !== void 0 ? _t : undefined;
            this._user = data.user;
        }
        /** The user that caused the notification. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user that caused the notification. */
        get actorId() {
            var _a;
            return (_a = this._actor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The comment related to the notification. */
        get comment() {
            var _a, _b;
            return ((_a = this._comment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._comment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The document related to the notification. */
        get document() {
            var _a, _b;
            return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.id) ? new DocumentQuery(this._request).fetch((_b = this._document) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of document related to the notification. */
        get documentId() {
            var _a;
            return (_a = this._document) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The external user that caused the notification. */
        get externalUserActor() {
            var _a, _b;
            return ((_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserActor) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of external user that caused the notification. */
        get externalUserActorId() {
            var _a;
            return (_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The initiative related to the notification. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The initiative update related to the notification. */
        get initiativeUpdate() {
            var _a, _b;
            return ((_a = this._initiativeUpdate) === null || _a === void 0 ? void 0 : _a.id)
                ? new InitiativeUpdateQuery(this._request).fetch((_b = this._initiativeUpdate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The parent comment related to the notification, if a notification is a reply comment notification. */
        get parentComment() {
            var _a, _b;
            return ((_a = this._parentComment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._parentComment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The user that received the notification. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** The ID of user that received the notification. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * An initiative notification subscription.
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativeNotificationSubscriptionFragment response data
     */
    class InitiativeNotificationSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            super(request);
            this.active = data.active;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.notificationSubscriptionTypes = data.notificationSubscriptionTypes;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.contextViewType = (_d = data.contextViewType) !== null && _d !== void 0 ? _d : undefined;
            this.userContextViewType = (_e = data.userContextViewType) !== null && _e !== void 0 ? _e : undefined;
            this._customView = (_f = data.customView) !== null && _f !== void 0 ? _f : undefined;
            this._customer = (_g = data.customer) !== null && _g !== void 0 ? _g : undefined;
            this._cycle = (_h = data.cycle) !== null && _h !== void 0 ? _h : undefined;
            this._initiative = data.initiative;
            this._label = (_j = data.label) !== null && _j !== void 0 ? _j : undefined;
            this._project = (_k = data.project) !== null && _k !== void 0 ? _k : undefined;
            this._subscriber = data.subscriber;
            this._team = (_l = data.team) !== null && _l !== void 0 ? _l : undefined;
            this._user = (_m = data.user) !== null && _m !== void 0 ? _m : undefined;
        }
        /** The contextual custom view associated with the notification subscription. */
        get customView() {
            var _a, _b;
            return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual custom view associated with the notification subscription. */
        get customViewId() {
            var _a;
            return (_a = this._customView) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The customer associated with the notification subscription. */
        get customer() {
            var _a, _b;
            return ((_a = this._customer) === null || _a === void 0 ? void 0 : _a.id) ? new CustomerQuery(this._request).fetch((_b = this._customer) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of customer associated with the notification subscription. */
        get customerId() {
            var _a;
            return (_a = this._customer) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual cycle view associated with the notification subscription. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual cycle view associated with the notification subscription. */
        get cycleId() {
            var _a;
            return (_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The initiative subscribed to. */
        get initiative() {
            return new InitiativeQuery(this._request).fetch(this._initiative.id);
        }
        /** The ID of initiative subscribed to. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual label view associated with the notification subscription. */
        get label() {
            var _a, _b;
            return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual label view associated with the notification subscription. */
        get labelId() {
            var _a;
            return (_a = this._label) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual project view associated with the notification subscription. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual project view associated with the notification subscription. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that subscribed to receive notifications. */
        get subscriber() {
            return new UserQuery(this._request).fetch(this._subscriber.id);
        }
        /** The ID of user that subscribed to receive notifications. */
        get subscriberId() {
            var _a;
            return (_a = this._subscriber) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team associated with the notification subscription. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of team associated with the notification subscription. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user view associated with the notification subscription. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user view associated with the notification subscription. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * The payload returned by the initiative mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativePayloadFragment response data
     */
    class InitiativePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._initiative = data.initiative;
        }
        /** The initiative that was created or updated. */
        get initiative() {
            return new InitiativeQuery(this._request).fetch(this._initiative.id);
        }
        /** The ID of initiative that was created or updated. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * A relation representing the dependency between two initiatives.
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativeRelationFragment response data
     */
    class InitiativeRelation extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.sortOrder = data.sortOrder;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._initiative = data.initiative;
            this._relatedInitiative = data.relatedInitiative;
            this._user = (_d = data.user) !== null && _d !== void 0 ? _d : undefined;
        }
        /** The parent initiative. */
        get initiative() {
            return new InitiativeQuery(this._request).fetch(this._initiative.id);
        }
        /** The ID of parent initiative. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The child initiative. */
        get relatedInitiative() {
            return new InitiativeQuery(this._request).fetch(this._relatedInitiative.id);
        }
        /** The ID of child initiative. */
        get relatedInitiativeId() {
            var _a;
            return (_a = this._relatedInitiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The last user who created or modified the relation. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of last user who created or modified the relation. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates a new initiative relation. */
        create(input) {
            return new CreateInitiativeRelationMutation(this._request).fetch(input);
        }
        /** Deletes an initiative relation. */
        delete() {
            return new DeleteInitiativeRelationMutation(this._request).fetch(this.id);
        }
        /** Updates an initiative relation. */
        update(input) {
            return new UpdateInitiativeRelationMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * InitiativeRelationConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this InitiativeRelationConnection model
     * @param data - InitiativeRelationConnection response data
     */
    class InitiativeRelationConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new InitiativeRelation(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * InitiativeRelationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativeRelationPayloadFragment response data
     */
    class InitiativeRelationPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.initiativeRelation = new InitiativeRelation(request, data.initiativeRelation);
        }
    }
    /**
     * Join table between projects and initiatives.
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativeToProjectFragment response data
     */
    class InitiativeToProject extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.sortOrder = data.sortOrder;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._initiative = data.initiative;
            this._project = data.project;
        }
        /** The initiative that the project is associated with. */
        get initiative() {
            return new InitiativeQuery(this._request).fetch(this._initiative.id);
        }
        /** The ID of initiative that the project is associated with. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The project that the initiative is associated with. */
        get project() {
            return new ProjectQuery(this._request).fetch(this._project.id);
        }
        /** The ID of project that the initiative is associated with. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates a new initiativeToProject join. */
        create(input) {
            return new CreateInitiativeToProjectMutation(this._request).fetch(input);
        }
        /** Deletes a initiativeToProject. */
        delete() {
            return new DeleteInitiativeToProjectMutation(this._request).fetch(this.id);
        }
        /** Updates a initiativeToProject. */
        update(input) {
            return new UpdateInitiativeToProjectMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * InitiativeToProjectConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this InitiativeToProjectConnection model
     * @param data - InitiativeToProjectConnection response data
     */
    class InitiativeToProjectConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new InitiativeToProject(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * The result of a initiativeToProject mutation.
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativeToProjectPayloadFragment response data
     */
    class InitiativeToProjectPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._initiativeToProject = data.initiativeToProject;
        }
        /** The initiativeToProject that was created or updated. */
        get initiativeToProject() {
            return new InitiativeToProjectQuery(this._request).fetch(this._initiativeToProject.id);
        }
        /** The ID of initiativetoproject that was created or updated. */
        get initiativeToProjectId() {
            var _a;
            return (_a = this._initiativeToProject) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * An initiative update.
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativeUpdateFragment response data
     */
    class InitiativeUpdate extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.body = data.body;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.diff = (_c = data.diff) !== null && _c !== void 0 ? _c : undefined;
            this.diffMarkdown = (_d = data.diffMarkdown) !== null && _d !== void 0 ? _d : undefined;
            this.editedAt = (_e = parseDate(data.editedAt)) !== null && _e !== void 0 ? _e : undefined;
            this.id = data.id;
            this.isDiffHidden = data.isDiffHidden;
            this.isStale = data.isStale;
            this.reactionData = data.reactionData;
            this.slugId = data.slugId;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
            this.url = data.url;
            this.reactions = data.reactions.map(node => new Reaction(request, node));
            this.health = data.health;
            this._initiative = data.initiative;
            this._user = data.user;
        }
        /** The initiative that the update is associated with. */
        get initiative() {
            return new InitiativeQuery(this._request).fetch(this._initiative.id);
        }
        /** The ID of initiative that the update is associated with. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user who wrote the update. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** The ID of user who wrote the update. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Comments associated with the initiative update. */
        comments(variables) {
            return new InitiativeUpdate_CommentsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Archives an initiative update. */
        archive() {
            return new ArchiveInitiativeUpdateMutation(this._request).fetch(this.id);
        }
        /** Creates a initiative update. */
        create(input) {
            return new CreateInitiativeUpdateMutation(this._request).fetch(input);
        }
        /** Unarchives an initiative update. */
        unarchive() {
            return new UnarchiveInitiativeUpdateMutation(this._request).fetch(this.id);
        }
        /** Updates an update. */
        update(input) {
            return new UpdateInitiativeUpdateMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativeUpdateArchivePayloadFragment response data
     */
    class InitiativeUpdateArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeUpdateQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of archived/unarchived entity. null if entity was deleted. */
        get entityId() {
            var _a;
            return (_a = this._entity) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Certain properties of an initiative update.
     *
     * @param data - L.InitiativeUpdateChildWebhookPayloadFragment response data
     */
    class InitiativeUpdateChildWebhookPayload {
        constructor(data) {
            this.bodyData = data.bodyData;
            this.editedAt = data.editedAt;
            this.health = data.health;
            this.id = data.id;
        }
    }
    /**
     * InitiativeUpdateConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this InitiativeUpdateConnection model
     * @param data - InitiativeUpdateConnection response data
     */
    class InitiativeUpdateConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new InitiativeUpdate(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * InitiativeUpdatePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativeUpdatePayloadFragment response data
     */
    class InitiativeUpdatePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._initiativeUpdate = data.initiativeUpdate;
        }
        /** The initiative update that was created. */
        get initiativeUpdate() {
            return new InitiativeUpdateQuery(this._request).fetch(this._initiativeUpdate.id);
        }
        /** The ID of initiative update that was created. */
        get initiativeUpdateId() {
            var _a;
            return (_a = this._initiativeUpdate) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * InitiativeUpdateReminderPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.InitiativeUpdateReminderPayloadFragment response data
     */
    class InitiativeUpdateReminderPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * Payload for an initiative update webhook.
     *
     * @param data - L.InitiativeUpdateWebhookPayloadFragment response data
     */
    class InitiativeUpdateWebhookPayload {
        constructor(data) {
            var _a, _b;
            this.archivedAt = (_a = data.archivedAt) !== null && _a !== void 0 ? _a : undefined;
            this.body = data.body;
            this.bodyData = data.bodyData;
            this.createdAt = data.createdAt;
            this.editedAt = data.editedAt;
            this.health = data.health;
            this.id = data.id;
            this.initiativeId = data.initiativeId;
            this.reactionData = data.reactionData;
            this.slugId = data.slugId;
            this.updatedAt = data.updatedAt;
            this.url = (_b = data.url) !== null && _b !== void 0 ? _b : undefined;
            this.userId = data.userId;
            this.initiative = new InitiativeChildWebhookPayload(data.initiative);
            this.user = new UserChildWebhookPayload(data.user);
        }
    }
    /**
     * Payload for an initiative webhook.
     *
     * @param data - L.InitiativeWebhookPayloadFragment response data
     */
    class InitiativeWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
            this.archivedAt = (_a = data.archivedAt) !== null && _a !== void 0 ? _a : undefined;
            this.color = (_b = data.color) !== null && _b !== void 0 ? _b : undefined;
            this.completedAt = (_c = data.completedAt) !== null && _c !== void 0 ? _c : undefined;
            this.createdAt = data.createdAt;
            this.creatorId = (_d = data.creatorId) !== null && _d !== void 0 ? _d : undefined;
            this.description = data.description;
            this.frequencyResolution = data.frequencyResolution;
            this.health = (_e = data.health) !== null && _e !== void 0 ? _e : undefined;
            this.healthUpdatedAt = (_f = data.healthUpdatedAt) !== null && _f !== void 0 ? _f : undefined;
            this.icon = (_g = data.icon) !== null && _g !== void 0 ? _g : undefined;
            this.id = data.id;
            this.lastUpdateId = (_h = data.lastUpdateId) !== null && _h !== void 0 ? _h : undefined;
            this.name = data.name;
            this.organizationId = data.organizationId;
            this.ownerId = (_j = data.ownerId) !== null && _j !== void 0 ? _j : undefined;
            this.slugId = data.slugId;
            this.sortOrder = data.sortOrder;
            this.startedAt = (_k = data.startedAt) !== null && _k !== void 0 ? _k : undefined;
            this.status = data.status;
            this.targetDate = (_l = data.targetDate) !== null && _l !== void 0 ? _l : undefined;
            this.targetDateResolution = (_m = data.targetDateResolution) !== null && _m !== void 0 ? _m : undefined;
            this.trashed = (_o = data.trashed) !== null && _o !== void 0 ? _o : undefined;
            this.updateReminderFrequency = (_p = data.updateReminderFrequency) !== null && _p !== void 0 ? _p : undefined;
            this.updateReminderFrequencyInWeeks = (_q = data.updateReminderFrequencyInWeeks) !== null && _q !== void 0 ? _q : undefined;
            this.updateRemindersDay = (_r = data.updateRemindersDay) !== null && _r !== void 0 ? _r : undefined;
            this.updateRemindersHour = (_s = data.updateRemindersHour) !== null && _s !== void 0 ? _s : undefined;
            this.updatedAt = data.updatedAt;
            this.url = data.url;
            this.creator = data.creator ? new UserChildWebhookPayload(data.creator) : undefined;
            this.lastUpdate = data.lastUpdate ? new InitiativeUpdateChildWebhookPayload(data.lastUpdate) : undefined;
            this.owner = data.owner ? new UserChildWebhookPayload(data.owner) : undefined;
            this.parentInitiative = data.parentInitiative
                ? new InitiativeChildWebhookPayload(data.parentInitiative)
                : undefined;
            this.projects = data.projects ? data.projects.map(node => new ProjectChildWebhookPayload(node)) : undefined;
            this.subInitiatives = data.subInitiatives
                ? data.subInitiatives.map(node => new InitiativeChildWebhookPayload(node))
                : undefined;
        }
    }
    /**
     * An integration with an external service.
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationFragment response data
     */
    class Integration extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.service = data.service;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._creator = data.creator;
            this._team = (_d = data.team) !== null && _d !== void 0 ? _d : undefined;
        }
        /** The user that added the integration. */
        get creator() {
            return new UserQuery(this._request).fetch(this._creator.id);
        }
        /** The ID of user that added the integration. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The organization that the integration is associated with. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The team that the integration is associated with. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of team that the integration is associated with. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Archives an integration. */
        archive() {
            return new ArchiveIntegrationMutation(this._request).fetch(this.id);
        }
        /** Deletes an integration. */
        delete(variables) {
            return new DeleteIntegrationMutation(this._request).fetch(this.id, variables);
        }
    }
    /**
     * Integration actor payload for webhooks.
     *
     * @param data - L.IntegrationActorWebhookPayloadFragment response data
     */
    class IntegrationActorWebhookPayload {
        constructor(data) {
            this.id = data.id;
            this.service = data.service;
            this.type = data.type;
        }
    }
    /**
     * Certain properties of an integration.
     *
     * @param data - L.IntegrationChildWebhookPayloadFragment response data
     */
    class IntegrationChildWebhookPayload {
        constructor(data) {
            this.id = data.id;
            this.service = data.service;
        }
    }
    /**
     * IntegrationConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IntegrationConnection model
     * @param data - IntegrationConnection response data
     */
    class IntegrationConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Integration(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * IntegrationHasScopesPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationHasScopesPayloadFragment response data
     */
    class IntegrationHasScopesPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.hasAllScopes = data.hasAllScopes;
            this.missingScopes = (_a = data.missingScopes) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * IntegrationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationPayloadFragment response data
     */
    class IntegrationPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._integration = (_a = data.integration) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The integration that was created or updated. */
        get integration() {
            var _a, _b;
            return ((_a = this._integration) === null || _a === void 0 ? void 0 : _a.id) ? new IntegrationQuery(this._request).fetch((_b = this._integration) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of integration that was created or updated. */
        get integrationId() {
            var _a;
            return (_a = this._integration) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * IntegrationRequestPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationRequestPayloadFragment response data
     */
    class IntegrationRequestPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * IntegrationSlackWorkspaceNamePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationSlackWorkspaceNamePayloadFragment response data
     */
    class IntegrationSlackWorkspaceNamePayload extends Request {
        constructor(request, data) {
            super(request);
            this.name = data.name;
            this.success = data.success;
        }
    }
    /**
     * Join table between templates and integrations.
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationTemplateFragment response data
     */
    class IntegrationTemplate extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.foreignEntityId = (_c = data.foreignEntityId) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
            this._integration = data.integration;
            this._template = data.template;
        }
        /** The integration that the template is associated with. */
        get integration() {
            return new IntegrationQuery(this._request).fetch(this._integration.id);
        }
        /** The ID of integration that the template is associated with. */
        get integrationId() {
            var _a;
            return (_a = this._integration) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The template that the integration is associated with. */
        get template() {
            return new TemplateQuery(this._request).fetch(this._template.id);
        }
        /** The ID of template that the integration is associated with. */
        get templateId() {
            var _a;
            return (_a = this._template) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates a new integrationTemplate join. */
        create(input) {
            return new CreateIntegrationTemplateMutation(this._request).fetch(input);
        }
        /** Deletes a integrationTemplate. */
        delete() {
            return new DeleteIntegrationTemplateMutation(this._request).fetch(this.id);
        }
    }
    /**
     * IntegrationTemplateConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IntegrationTemplateConnection model
     * @param data - IntegrationTemplateConnection response data
     */
    class IntegrationTemplateConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new IntegrationTemplate(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * IntegrationTemplatePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationTemplatePayloadFragment response data
     */
    class IntegrationTemplatePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._integrationTemplate = data.integrationTemplate;
        }
        /** The IntegrationTemplate that was created or updated. */
        get integrationTemplate() {
            return new IntegrationTemplateQuery(this._request).fetch(this._integrationTemplate.id);
        }
        /** The ID of integrationtemplate that was created or updated. */
        get integrationTemplateId() {
            var _a;
            return (_a = this._integrationTemplate) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * The configuration of all integrations for different entities.
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationsSettingsFragment response data
     */
    class IntegrationsSettings extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.slackInitiativeUpdateCreated = (_c = data.slackInitiativeUpdateCreated) !== null && _c !== void 0 ? _c : undefined;
            this.slackIssueAddedToTriage = (_d = data.slackIssueAddedToTriage) !== null && _d !== void 0 ? _d : undefined;
            this.slackIssueAddedToView = (_e = data.slackIssueAddedToView) !== null && _e !== void 0 ? _e : undefined;
            this.slackIssueCreated = (_f = data.slackIssueCreated) !== null && _f !== void 0 ? _f : undefined;
            this.slackIssueNewComment = (_g = data.slackIssueNewComment) !== null && _g !== void 0 ? _g : undefined;
            this.slackIssueSlaBreached = (_h = data.slackIssueSlaBreached) !== null && _h !== void 0 ? _h : undefined;
            this.slackIssueSlaHighRisk = (_j = data.slackIssueSlaHighRisk) !== null && _j !== void 0 ? _j : undefined;
            this.slackIssueStatusChangedAll = (_k = data.slackIssueStatusChangedAll) !== null && _k !== void 0 ? _k : undefined;
            this.slackIssueStatusChangedDone = (_l = data.slackIssueStatusChangedDone) !== null && _l !== void 0 ? _l : undefined;
            this.slackProjectUpdateCreated = (_m = data.slackProjectUpdateCreated) !== null && _m !== void 0 ? _m : undefined;
            this.slackProjectUpdateCreatedToTeam = (_o = data.slackProjectUpdateCreatedToTeam) !== null && _o !== void 0 ? _o : undefined;
            this.slackProjectUpdateCreatedToWorkspace = (_p = data.slackProjectUpdateCreatedToWorkspace) !== null && _p !== void 0 ? _p : undefined;
            this.updatedAt = (_q = parseDate(data.updatedAt)) !== null && _q !== void 0 ? _q : new Date();
            this.contextViewType = (_r = data.contextViewType) !== null && _r !== void 0 ? _r : undefined;
            this._initiative = (_s = data.initiative) !== null && _s !== void 0 ? _s : undefined;
            this._project = (_t = data.project) !== null && _t !== void 0 ? _t : undefined;
            this._team = (_u = data.team) !== null && _u !== void 0 ? _u : undefined;
        }
        /** Initiative which those settings apply to. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of initiative which those settings apply to. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Project which those settings apply to. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of project which those settings apply to. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Team which those settings apply to. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of team which those settings apply to. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates new settings for one or more integrations. */
        create(input) {
            return new CreateIntegrationsSettingsMutation(this._request).fetch(input);
        }
        /** Updates settings related to integrations for a project or a team. */
        update(input) {
            return new UpdateIntegrationsSettingsMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * IntegrationsSettingsPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IntegrationsSettingsPayloadFragment response data
     */
    class IntegrationsSettingsPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._integrationsSettings = data.integrationsSettings;
        }
        /** The settings that were created or updated. */
        get integrationsSettings() {
            return new IntegrationsSettingsQuery(this._request).fetch(this._integrationsSettings.id);
        }
        /** The ID of settings that were created or updated. */
        get integrationsSettingsId() {
            var _a;
            return (_a = this._integrationsSettings) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * An issue.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueFragment response data
     */
    class Issue extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15;
            super(request);
            this.addedToCycleAt = (_a = parseDate(data.addedToCycleAt)) !== null && _a !== void 0 ? _a : undefined;
            this.addedToProjectAt = (_b = parseDate(data.addedToProjectAt)) !== null && _b !== void 0 ? _b : undefined;
            this.addedToTeamAt = (_c = parseDate(data.addedToTeamAt)) !== null && _c !== void 0 ? _c : undefined;
            this.archivedAt = (_d = parseDate(data.archivedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.autoArchivedAt = (_e = parseDate(data.autoArchivedAt)) !== null && _e !== void 0 ? _e : undefined;
            this.autoClosedAt = (_f = parseDate(data.autoClosedAt)) !== null && _f !== void 0 ? _f : undefined;
            this.boardOrder = data.boardOrder;
            this.branchName = data.branchName;
            this.canceledAt = (_g = parseDate(data.canceledAt)) !== null && _g !== void 0 ? _g : undefined;
            this.completedAt = (_h = parseDate(data.completedAt)) !== null && _h !== void 0 ? _h : undefined;
            this.createdAt = (_j = parseDate(data.createdAt)) !== null && _j !== void 0 ? _j : new Date();
            this.customerTicketCount = data.customerTicketCount;
            this.description = (_k = data.description) !== null && _k !== void 0 ? _k : undefined;
            this.dueDate = (_l = data.dueDate) !== null && _l !== void 0 ? _l : undefined;
            this.estimate = (_m = data.estimate) !== null && _m !== void 0 ? _m : undefined;
            this.id = data.id;
            this.identifier = data.identifier;
            this.labelIds = data.labelIds;
            this.number = data.number;
            this.previousIdentifiers = data.previousIdentifiers;
            this.priority = data.priority;
            this.priorityLabel = data.priorityLabel;
            this.prioritySortOrder = data.prioritySortOrder;
            this.reactionData = data.reactionData;
            this.slaBreachesAt = (_o = parseDate(data.slaBreachesAt)) !== null && _o !== void 0 ? _o : undefined;
            this.slaHighRiskAt = (_p = parseDate(data.slaHighRiskAt)) !== null && _p !== void 0 ? _p : undefined;
            this.slaMediumRiskAt = (_q = parseDate(data.slaMediumRiskAt)) !== null && _q !== void 0 ? _q : undefined;
            this.slaStartedAt = (_r = parseDate(data.slaStartedAt)) !== null && _r !== void 0 ? _r : undefined;
            this.slaType = (_s = data.slaType) !== null && _s !== void 0 ? _s : undefined;
            this.snoozedUntilAt = (_t = parseDate(data.snoozedUntilAt)) !== null && _t !== void 0 ? _t : undefined;
            this.sortOrder = data.sortOrder;
            this.startedAt = (_u = parseDate(data.startedAt)) !== null && _u !== void 0 ? _u : undefined;
            this.startedTriageAt = (_v = parseDate(data.startedTriageAt)) !== null && _v !== void 0 ? _v : undefined;
            this.subIssueSortOrder = (_w = data.subIssueSortOrder) !== null && _w !== void 0 ? _w : undefined;
            this.title = data.title;
            this.trashed = (_x = data.trashed) !== null && _x !== void 0 ? _x : undefined;
            this.triagedAt = (_y = parseDate(data.triagedAt)) !== null && _y !== void 0 ? _y : undefined;
            this.updatedAt = (_z = parseDate(data.updatedAt)) !== null && _z !== void 0 ? _z : new Date();
            this.url = data.url;
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.reactions = data.reactions.map(node => new Reaction(request, node));
            this.syncedWith = data.syncedWith ? data.syncedWith.map(node => new ExternalEntityInfo(request, node)) : undefined;
            this.integrationSourceType = (_0 = data.integrationSourceType) !== null && _0 !== void 0 ? _0 : undefined;
            this._asksExternalUserRequester = (_1 = data.asksExternalUserRequester) !== null && _1 !== void 0 ? _1 : undefined;
            this._asksRequester = (_2 = data.asksRequester) !== null && _2 !== void 0 ? _2 : undefined;
            this._assignee = (_3 = data.assignee) !== null && _3 !== void 0 ? _3 : undefined;
            this._creator = (_4 = data.creator) !== null && _4 !== void 0 ? _4 : undefined;
            this._cycle = (_5 = data.cycle) !== null && _5 !== void 0 ? _5 : undefined;
            this._delegate = (_6 = data.delegate) !== null && _6 !== void 0 ? _6 : undefined;
            this._externalUserCreator = (_7 = data.externalUserCreator) !== null && _7 !== void 0 ? _7 : undefined;
            this._favorite = (_8 = data.favorite) !== null && _8 !== void 0 ? _8 : undefined;
            this._lastAppliedTemplate = (_9 = data.lastAppliedTemplate) !== null && _9 !== void 0 ? _9 : undefined;
            this._parent = (_10 = data.parent) !== null && _10 !== void 0 ? _10 : undefined;
            this._project = (_11 = data.project) !== null && _11 !== void 0 ? _11 : undefined;
            this._projectMilestone = (_12 = data.projectMilestone) !== null && _12 !== void 0 ? _12 : undefined;
            this._recurringIssueTemplate = (_13 = data.recurringIssueTemplate) !== null && _13 !== void 0 ? _13 : undefined;
            this._snoozedBy = (_14 = data.snoozedBy) !== null && _14 !== void 0 ? _14 : undefined;
            this._sourceComment = (_15 = data.sourceComment) !== null && _15 !== void 0 ? _15 : undefined;
            this._state = data.state;
            this._team = data.team;
        }
        /** The external user who requested creation of the Asks issue on behalf of the creator. */
        get asksExternalUserRequester() {
            var _a, _b;
            return ((_a = this._asksExternalUserRequester) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._asksExternalUserRequester) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of external user who requested creation of the asks issue on behalf of the creator. */
        get asksExternalUserRequesterId() {
            var _a;
            return (_a = this._asksExternalUserRequester) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The internal user who requested creation of the Asks issue on behalf of the creator. */
        get asksRequester() {
            var _a, _b;
            return ((_a = this._asksRequester) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._asksRequester) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of internal user who requested creation of the asks issue on behalf of the creator. */
        get asksRequesterId() {
            var _a;
            return (_a = this._asksRequester) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user to whom the issue is assigned to. */
        get assignee() {
            var _a, _b;
            return ((_a = this._assignee) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._assignee) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user to whom the issue is assigned to. */
        get assigneeId() {
            var _a;
            return (_a = this._assignee) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user who created the issue. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who created the issue. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The cycle that the issue is associated with. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of cycle that the issue is associated with. */
        get cycleId() {
            var _a;
            return (_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The agent user that is delegated to work on this issue. */
        get delegate() {
            var _a, _b;
            return ((_a = this._delegate) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._delegate) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of agent user that is delegated to work on this issue. */
        get delegateId() {
            var _a;
            return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The external user who created the issue. */
        get externalUserCreator() {
            var _a, _b;
            return ((_a = this._externalUserCreator) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserCreator) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of external user who created the issue. */
        get externalUserCreatorId() {
            var _a;
            return (_a = this._externalUserCreator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The users favorite associated with this issue. */
        get favorite() {
            var _a, _b;
            return ((_a = this._favorite) === null || _a === void 0 ? void 0 : _a.id) ? new FavoriteQuery(this._request).fetch((_b = this._favorite) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of users favorite associated with this issue. */
        get favoriteId() {
            var _a;
            return (_a = this._favorite) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The last template that was applied to this issue. */
        get lastAppliedTemplate() {
            var _a, _b;
            return ((_a = this._lastAppliedTemplate) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._lastAppliedTemplate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of last template that was applied to this issue. */
        get lastAppliedTemplateId() {
            var _a;
            return (_a = this._lastAppliedTemplate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The parent of the issue. */
        get parent() {
            var _a, _b;
            return ((_a = this._parent) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._parent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of parent of the issue. */
        get parentId() {
            var _a;
            return (_a = this._parent) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The project that the issue is associated with. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of project that the issue is associated with. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The projectMilestone that the issue is associated with. */
        get projectMilestone() {
            var _a, _b;
            return ((_a = this._projectMilestone) === null || _a === void 0 ? void 0 : _a.id)
                ? new ProjectMilestoneQuery(this._request).fetch((_b = this._projectMilestone) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of projectmilestone that the issue is associated with. */
        get projectMilestoneId() {
            var _a;
            return (_a = this._projectMilestone) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The recurring issue template that created this issue. */
        get recurringIssueTemplate() {
            var _a, _b;
            return ((_a = this._recurringIssueTemplate) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._recurringIssueTemplate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of recurring issue template that created this issue. */
        get recurringIssueTemplateId() {
            var _a;
            return (_a = this._recurringIssueTemplate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user who snoozed the issue. */
        get snoozedBy() {
            var _a, _b;
            return ((_a = this._snoozedBy) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._snoozedBy) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who snoozed the issue. */
        get snoozedById() {
            var _a;
            return (_a = this._snoozedBy) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The comment that this issue was created from. */
        get sourceComment() {
            var _a, _b;
            return ((_a = this._sourceComment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._sourceComment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The ID of comment that this issue was created from. */
        get sourceCommentId() {
            var _a;
            return (_a = this._sourceComment) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The workflow state that the issue is associated with. */
        get state() {
            return new WorkflowStateQuery(this._request).fetch(this._state.id);
        }
        /** The ID of workflow state that the issue is associated with. */
        get stateId() {
            var _a;
            return (_a = this._state) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team that the issue is associated with. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
        /** The ID of team that the issue is associated with. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Attachments associated with the issue. */
        attachments(variables) {
            return new Issue_AttachmentsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Children of the issue. */
        children(variables) {
            return new Issue_ChildrenQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Comments associated with the issue. */
        comments(variables) {
            return new Issue_CommentsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Attachments previously associated with the issue before being moved to another issue. */
        formerAttachments(variables) {
            return new Issue_FormerAttachmentsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Customer needs previously associated with the issue before being moved to another issue. */
        formerNeeds(variables) {
            return new Issue_FormerNeedsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** History entries associated with the issue. */
        history(variables) {
            return new Issue_HistoryQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Inverse relations associated with this issue. */
        inverseRelations(variables) {
            return new Issue_InverseRelationsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Labels associated with this issue. */
        labels(variables) {
            return new Issue_LabelsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Customer needs associated with the issue. */
        needs(variables) {
            return new Issue_NeedsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Relations associated with this issue. */
        relations(variables) {
            return new Issue_RelationsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Users who are subscribed to the issue. */
        subscribers(variables) {
            return new Issue_SubscribersQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Archives an issue. */
        archive(variables) {
            return new ArchiveIssueMutation(this._request).fetch(this.id, variables);
        }
        /** Creates a new issue. */
        create(input) {
            return new CreateIssueMutation(this._request).fetch(input);
        }
        /** Deletes (trashes) an issue. */
        delete(variables) {
            return new DeleteIssueMutation(this._request).fetch(this.id, variables);
        }
        /** Unarchives an issue. */
        unarchive() {
            return new UnarchiveIssueMutation(this._request).fetch(this.id);
        }
        /** Updates an issue. */
        update(input) {
            return new UpdateIssueMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueArchivePayloadFragment response data
     */
    class IssueArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of archived/unarchived entity. null if entity was deleted. */
        get entityId() {
            var _a;
            return (_a = this._entity) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Payload for an issue assigned to you notification.
     *
     * @param data - L.IssueAssignedToYouNotificationWebhookPayloadFragment response data
     */
    class IssueAssignedToYouNotificationWebhookPayload {
        constructor(data) {
            var _a, _b, _c;
            this.actorId = (_a = data.actorId) !== null && _a !== void 0 ? _a : undefined;
            this.archivedAt = (_b = data.archivedAt) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = data.createdAt;
            this.externalUserActorId = (_c = data.externalUserActorId) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.issueId = data.issueId;
            this.type = data.type;
            this.updatedAt = data.updatedAt;
            this.userId = data.userId;
            this.actor = data.actor ? new UserChildWebhookPayload(data.actor) : undefined;
            this.issue = new IssueWithDescriptionChildWebhookPayload(data.issue);
        }
    }
    /**
     * IssueBatchPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueBatchPayloadFragment response data
     */
    class IssueBatchPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.issues = data.issues.map(node => new Issue(request, node));
        }
    }
    /**
     * Certain properties of an issue.
     *
     * @param data - L.IssueChildWebhookPayloadFragment response data
     */
    class IssueChildWebhookPayload {
        constructor(data) {
            this.id = data.id;
            this.identifier = data.identifier;
            this.teamId = data.teamId;
            this.title = data.title;
            this.url = data.url;
            this.team = new TeamChildWebhookPayload(data.team);
        }
    }
    /**
     * Payload for an issue comment mention notification.
     *
     * @param data - L.IssueCommentMentionNotificationWebhookPayloadFragment response data
     */
    class IssueCommentMentionNotificationWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d;
            this.actorId = (_a = data.actorId) !== null && _a !== void 0 ? _a : undefined;
            this.archivedAt = (_b = data.archivedAt) !== null && _b !== void 0 ? _b : undefined;
            this.commentId = data.commentId;
            this.createdAt = data.createdAt;
            this.externalUserActorId = (_c = data.externalUserActorId) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.issueId = data.issueId;
            this.parentCommentId = (_d = data.parentCommentId) !== null && _d !== void 0 ? _d : undefined;
            this.type = data.type;
            this.updatedAt = data.updatedAt;
            this.userId = data.userId;
            this.actor = data.actor ? new UserChildWebhookPayload(data.actor) : undefined;
            this.comment = new CommentChildWebhookPayload(data.comment);
            this.issue = new IssueWithDescriptionChildWebhookPayload(data.issue);
            this.parentComment = data.parentComment ? new CommentChildWebhookPayload(data.parentComment) : undefined;
        }
    }
    /**
     * Payload for an issue comment reaction notification.
     *
     * @param data - L.IssueCommentReactionNotificationWebhookPayloadFragment response data
     */
    class IssueCommentReactionNotificationWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d;
            this.actorId = (_a = data.actorId) !== null && _a !== void 0 ? _a : undefined;
            this.archivedAt = (_b = data.archivedAt) !== null && _b !== void 0 ? _b : undefined;
            this.commentId = data.commentId;
            this.createdAt = data.createdAt;
            this.externalUserActorId = (_c = data.externalUserActorId) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.issueId = data.issueId;
            this.parentCommentId = (_d = data.parentCommentId) !== null && _d !== void 0 ? _d : undefined;
            this.reactionEmoji = data.reactionEmoji;
            this.type = data.type;
            this.updatedAt = data.updatedAt;
            this.userId = data.userId;
            this.actor = data.actor ? new UserChildWebhookPayload(data.actor) : undefined;
            this.comment = new CommentChildWebhookPayload(data.comment);
            this.issue = new IssueWithDescriptionChildWebhookPayload(data.issue);
            this.parentComment = data.parentComment ? new CommentChildWebhookPayload(data.parentComment) : undefined;
        }
    }
    /**
     * IssueConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IssueConnection model
     * @param data - IssueConnection response data
     */
    class IssueConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Issue(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * Payload for an issue emoji reaction notification.
     *
     * @param data - L.IssueEmojiReactionNotificationWebhookPayloadFragment response data
     */
    class IssueEmojiReactionNotificationWebhookPayload {
        constructor(data) {
            var _a, _b, _c;
            this.actorId = (_a = data.actorId) !== null && _a !== void 0 ? _a : undefined;
            this.archivedAt = (_b = data.archivedAt) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = data.createdAt;
            this.externalUserActorId = (_c = data.externalUserActorId) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.issueId = data.issueId;
            this.reactionEmoji = data.reactionEmoji;
            this.type = data.type;
            this.updatedAt = data.updatedAt;
            this.userId = data.userId;
            this.actor = data.actor ? new UserChildWebhookPayload(data.actor) : undefined;
            this.issue = new IssueWithDescriptionChildWebhookPayload(data.issue);
        }
    }
    /**
     * IssueFilterSuggestionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueFilterSuggestionPayloadFragment response data
     */
    class IssueFilterSuggestionPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.filter = (_a = data.filter) !== null && _a !== void 0 ? _a : undefined;
            this.logId = (_b = data.logId) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * A record of changes to an issue.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueHistoryFragment response data
     */
    class IssueHistory extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26;
            super(request);
            this.actorId = (_a = data.actorId) !== null && _a !== void 0 ? _a : undefined;
            this.addedLabelIds = (_b = data.addedLabelIds) !== null && _b !== void 0 ? _b : undefined;
            this.archived = (_c = data.archived) !== null && _c !== void 0 ? _c : undefined;
            this.archivedAt = (_d = parseDate(data.archivedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.attachmentId = (_e = data.attachmentId) !== null && _e !== void 0 ? _e : undefined;
            this.autoArchived = (_f = data.autoArchived) !== null && _f !== void 0 ? _f : undefined;
            this.autoClosed = (_g = data.autoClosed) !== null && _g !== void 0 ? _g : undefined;
            this.createdAt = (_h = parseDate(data.createdAt)) !== null && _h !== void 0 ? _h : new Date();
            this.customerNeedId = (_j = data.customerNeedId) !== null && _j !== void 0 ? _j : undefined;
            this.fromAssigneeId = (_k = data.fromAssigneeId) !== null && _k !== void 0 ? _k : undefined;
            this.fromCycleId = (_l = data.fromCycleId) !== null && _l !== void 0 ? _l : undefined;
            this.fromDueDate = (_m = data.fromDueDate) !== null && _m !== void 0 ? _m : undefined;
            this.fromEstimate = (_o = data.fromEstimate) !== null && _o !== void 0 ? _o : undefined;
            this.fromParentId = (_p = data.fromParentId) !== null && _p !== void 0 ? _p : undefined;
            this.fromPriority = (_q = data.fromPriority) !== null && _q !== void 0 ? _q : undefined;
            this.fromProjectId = (_r = data.fromProjectId) !== null && _r !== void 0 ? _r : undefined;
            this.fromStateId = (_s = data.fromStateId) !== null && _s !== void 0 ? _s : undefined;
            this.fromTeamId = (_t = data.fromTeamId) !== null && _t !== void 0 ? _t : undefined;
            this.fromTitle = (_u = data.fromTitle) !== null && _u !== void 0 ? _u : undefined;
            this.id = data.id;
            this.removedLabelIds = (_v = data.removedLabelIds) !== null && _v !== void 0 ? _v : undefined;
            this.toAssigneeId = (_w = data.toAssigneeId) !== null && _w !== void 0 ? _w : undefined;
            this.toConvertedProjectId = (_x = data.toConvertedProjectId) !== null && _x !== void 0 ? _x : undefined;
            this.toCycleId = (_y = data.toCycleId) !== null && _y !== void 0 ? _y : undefined;
            this.toDueDate = (_z = data.toDueDate) !== null && _z !== void 0 ? _z : undefined;
            this.toEstimate = (_0 = data.toEstimate) !== null && _0 !== void 0 ? _0 : undefined;
            this.toParentId = (_1 = data.toParentId) !== null && _1 !== void 0 ? _1 : undefined;
            this.toPriority = (_2 = data.toPriority) !== null && _2 !== void 0 ? _2 : undefined;
            this.toProjectId = (_3 = data.toProjectId) !== null && _3 !== void 0 ? _3 : undefined;
            this.toStateId = (_4 = data.toStateId) !== null && _4 !== void 0 ? _4 : undefined;
            this.toTeamId = (_5 = data.toTeamId) !== null && _5 !== void 0 ? _5 : undefined;
            this.toTitle = (_6 = data.toTitle) !== null && _6 !== void 0 ? _6 : undefined;
            this.trashed = (_7 = data.trashed) !== null && _7 !== void 0 ? _7 : undefined;
            this.updatedAt = (_8 = parseDate(data.updatedAt)) !== null && _8 !== void 0 ? _8 : new Date();
            this.updatedDescription = (_9 = data.updatedDescription) !== null && _9 !== void 0 ? _9 : undefined;
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.issueImport = data.issueImport ? new IssueImport(request, data.issueImport) : undefined;
            this.actors = data.actors ? data.actors.map(node => new User(request, node)) : undefined;
            this.addedLabels = data.addedLabels ? data.addedLabels.map(node => new IssueLabel(request, node)) : undefined;
            this.descriptionUpdatedBy = data.descriptionUpdatedBy
                ? data.descriptionUpdatedBy.map(node => new User(request, node))
                : undefined;
            this.relationChanges = data.relationChanges
                ? data.relationChanges.map(node => new IssueRelationHistoryPayload(request, node))
                : undefined;
            this.removedLabels = data.removedLabels ? data.removedLabels.map(node => new IssueLabel(request, node)) : undefined;
            this.triageResponsibilityNotifiedUsers = data.triageResponsibilityNotifiedUsers
                ? data.triageResponsibilityNotifiedUsers.map(node => new User(request, node))
                : undefined;
            this._actor = (_10 = data.actor) !== null && _10 !== void 0 ? _10 : undefined;
            this._attachment = (_11 = data.attachment) !== null && _11 !== void 0 ? _11 : undefined;
            this._fromAssignee = (_12 = data.fromAssignee) !== null && _12 !== void 0 ? _12 : undefined;
            this._fromCycle = (_13 = data.fromCycle) !== null && _13 !== void 0 ? _13 : undefined;
            this._fromDelegate = (_14 = data.fromDelegate) !== null && _14 !== void 0 ? _14 : undefined;
            this._fromParent = (_15 = data.fromParent) !== null && _15 !== void 0 ? _15 : undefined;
            this._fromProject = (_16 = data.fromProject) !== null && _16 !== void 0 ? _16 : undefined;
            this._fromState = (_17 = data.fromState) !== null && _17 !== void 0 ? _17 : undefined;
            this._fromTeam = (_18 = data.fromTeam) !== null && _18 !== void 0 ? _18 : undefined;
            this._issue = data.issue;
            this._toAssignee = (_19 = data.toAssignee) !== null && _19 !== void 0 ? _19 : undefined;
            this._toConvertedProject = (_20 = data.toConvertedProject) !== null && _20 !== void 0 ? _20 : undefined;
            this._toCycle = (_21 = data.toCycle) !== null && _21 !== void 0 ? _21 : undefined;
            this._toDelegate = (_22 = data.toDelegate) !== null && _22 !== void 0 ? _22 : undefined;
            this._toParent = (_23 = data.toParent) !== null && _23 !== void 0 ? _23 : undefined;
            this._toProject = (_24 = data.toProject) !== null && _24 !== void 0 ? _24 : undefined;
            this._toState = (_25 = data.toState) !== null && _25 !== void 0 ? _25 : undefined;
            this._toTeam = (_26 = data.toTeam) !== null && _26 !== void 0 ? _26 : undefined;
        }
        /** The actor that performed the actions. This field may be empty in the case of integrations or automations. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The linked attachment. */
        get attachment() {
            var _a, _b;
            return ((_a = this._attachment) === null || _a === void 0 ? void 0 : _a.id) ? new AttachmentQuery(this._request).fetch((_b = this._attachment) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user that was unassigned from the issue. */
        get fromAssignee() {
            var _a, _b;
            return ((_a = this._fromAssignee) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._fromAssignee) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The cycle that the issue was moved from. */
        get fromCycle() {
            var _a, _b;
            return ((_a = this._fromCycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._fromCycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The app user from whom the issue delegation was transferred. */
        get fromDelegate() {
            var _a, _b;
            return ((_a = this._fromDelegate) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._fromDelegate) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of app user from whom the issue delegation was transferred. */
        get fromDelegateId() {
            var _a;
            return (_a = this._fromDelegate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The parent issue that the issue was moved from. */
        get fromParent() {
            var _a, _b;
            return ((_a = this._fromParent) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._fromParent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The project that the issue was moved from. */
        get fromProject() {
            var _a, _b;
            return ((_a = this._fromProject) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._fromProject) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The state that the issue was moved from. */
        get fromState() {
            var _a, _b;
            return ((_a = this._fromState) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._fromState) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The team that the issue was moved from. */
        get fromTeam() {
            var _a, _b;
            return ((_a = this._fromTeam) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._fromTeam) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The issue that was changed. */
        get issue() {
            return new IssueQuery(this._request).fetch(this._issue.id);
        }
        /** The ID of issue that was changed. */
        get issueId() {
            var _a;
            return (_a = this._issue) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that was assigned to the issue. */
        get toAssignee() {
            var _a, _b;
            return ((_a = this._toAssignee) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._toAssignee) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The new project created from the issue. */
        get toConvertedProject() {
            var _a, _b;
            return ((_a = this._toConvertedProject) === null || _a === void 0 ? void 0 : _a.id)
                ? new ProjectQuery(this._request).fetch((_b = this._toConvertedProject) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The cycle that the issue was moved to. */
        get toCycle() {
            var _a, _b;
            return ((_a = this._toCycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._toCycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The app user to whom the issue delegation was transferred. */
        get toDelegate() {
            var _a, _b;
            return ((_a = this._toDelegate) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._toDelegate) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of app user to whom the issue delegation was transferred. */
        get toDelegateId() {
            var _a;
            return (_a = this._toDelegate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The parent issue that the issue was moved to. */
        get toParent() {
            var _a, _b;
            return ((_a = this._toParent) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._toParent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The project that the issue was moved to. */
        get toProject() {
            var _a, _b;
            return ((_a = this._toProject) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._toProject) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The state that the issue was moved to. */
        get toState() {
            var _a, _b;
            return ((_a = this._toState) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._toState) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The team that the issue was moved to. */
        get toTeam() {
            var _a, _b;
            return ((_a = this._toTeam) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._toTeam) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * IssueHistoryConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IssueHistoryConnection model
     * @param data - IssueHistoryConnection response data
     */
    class IssueHistoryConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new IssueHistory(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * An import job for data from an external service.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueImportFragment response data
     */
    class IssueImport extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.creatorId = (_c = data.creatorId) !== null && _c !== void 0 ? _c : undefined;
            this.csvFileUrl = (_d = data.csvFileUrl) !== null && _d !== void 0 ? _d : undefined;
            this.displayName = data.displayName;
            this.error = (_e = data.error) !== null && _e !== void 0 ? _e : undefined;
            this.errorMetadata = (_f = data.errorMetadata) !== null && _f !== void 0 ? _f : undefined;
            this.id = data.id;
            this.mapping = (_g = data.mapping) !== null && _g !== void 0 ? _g : undefined;
            this.progress = (_h = data.progress) !== null && _h !== void 0 ? _h : undefined;
            this.service = data.service;
            this.serviceMetadata = (_j = data.serviceMetadata) !== null && _j !== void 0 ? _j : undefined;
            this.status = data.status;
            this.teamName = (_k = data.teamName) !== null && _k !== void 0 ? _k : undefined;
            this.updatedAt = (_l = parseDate(data.updatedAt)) !== null && _l !== void 0 ? _l : new Date();
        }
        /** Deletes an import job. */
        delete(issueImportId) {
            return new DeleteIssueImportMutation(this._request).fetch(issueImportId);
        }
        /** Updates the mapping for the issue import. */
        update(input) {
            return new UpdateIssueImportMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * IssueImportCheckPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueImportCheckPayloadFragment response data
     */
    class IssueImportCheckPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * IssueImportDeletePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueImportDeletePayloadFragment response data
     */
    class IssueImportDeletePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.issueImport = data.issueImport ? new IssueImport(request, data.issueImport) : undefined;
        }
    }
    /**
     * Whether a custom JQL query is valid or not
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueImportJqlCheckPayloadFragment response data
     */
    class IssueImportJqlCheckPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.count = (_a = data.count) !== null && _a !== void 0 ? _a : undefined;
            this.error = (_b = data.error) !== null && _b !== void 0 ? _b : undefined;
            this.success = data.success;
        }
    }
    /**
     * IssueImportPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueImportPayloadFragment response data
     */
    class IssueImportPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.issueImport = data.issueImport ? new IssueImport(request, data.issueImport) : undefined;
        }
    }
    /**
     * Whether an issue import can be synced at the end of an import or not
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueImportSyncCheckPayloadFragment response data
     */
    class IssueImportSyncCheckPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.canSync = data.canSync;
            this.error = (_a = data.error) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * Labels that can be associated with issues.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueLabelFragment response data
     */
    class IssueLabel extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = data.color;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.isGroup = data.isGroup;
            this.lastAppliedAt = (_d = parseDate(data.lastAppliedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.name = data.name;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this._creator = (_f = data.creator) !== null && _f !== void 0 ? _f : undefined;
            this._inheritedFrom = (_g = data.inheritedFrom) !== null && _g !== void 0 ? _g : undefined;
            this._parent = (_h = data.parent) !== null && _h !== void 0 ? _h : undefined;
            this._team = (_j = data.team) !== null && _j !== void 0 ? _j : undefined;
        }
        /** The user who created the label. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who created the label. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The original label inherited from. */
        get inheritedFrom() {
            var _a, _b;
            return ((_a = this._inheritedFrom) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._inheritedFrom) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of original label inherited from. */
        get inheritedFromId() {
            var _a;
            return (_a = this._inheritedFrom) === null || _a === void 0 ? void 0 : _a.id;
        }
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The parent label. */
        get parent() {
            var _a, _b;
            return ((_a = this._parent) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._parent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of parent label. */
        get parentId() {
            var _a;
            return (_a = this._parent) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team that the label is associated with. If null, the label is associated with the global workspace. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of team that the label is associated with. if null, the label is associated with the global workspace. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Children of the label. */
        children(variables) {
            return new IssueLabel_ChildrenQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Issues associated with the label. */
        issues(variables) {
            return new IssueLabel_IssuesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Creates a new label. */
        create(input, variables) {
            return new CreateIssueLabelMutation(this._request).fetch(input, variables);
        }
        /** Deletes an issue label. */
        delete() {
            return new DeleteIssueLabelMutation(this._request).fetch(this.id);
        }
        /** Updates an label. */
        update(input, variables) {
            return new UpdateIssueLabelMutation(this._request).fetch(this.id, input, variables);
        }
    }
    /**
     * Certain properties of an issue label.
     *
     * @param data - L.IssueLabelChildWebhookPayloadFragment response data
     */
    class IssueLabelChildWebhookPayload {
        constructor(data) {
            var _a;
            this.color = data.color;
            this.id = data.id;
            this.name = data.name;
            this.parentId = (_a = data.parentId) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * IssueLabelConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IssueLabelConnection model
     * @param data - IssueLabelConnection response data
     */
    class IssueLabelConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new IssueLabel(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * IssueLabelPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueLabelPayloadFragment response data
     */
    class IssueLabelPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._issueLabel = data.issueLabel;
        }
        /** The label that was created or updated. */
        get issueLabel() {
            return new IssueLabelQuery(this._request).fetch(this._issueLabel.id);
        }
        /** The ID of label that was created or updated. */
        get issueLabelId() {
            var _a;
            return (_a = this._issueLabel) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Payload for an issue label webhook.
     *
     * @param data - L.IssueLabelWebhookPayloadFragment response data
     */
    class IssueLabelWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d, _e, _f;
            this.archivedAt = (_a = data.archivedAt) !== null && _a !== void 0 ? _a : undefined;
            this.color = data.color;
            this.createdAt = data.createdAt;
            this.creatorId = (_b = data.creatorId) !== null && _b !== void 0 ? _b : undefined;
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.inheritedFromId = (_d = data.inheritedFromId) !== null && _d !== void 0 ? _d : undefined;
            this.isGroup = data.isGroup;
            this.name = data.name;
            this.parentId = (_e = data.parentId) !== null && _e !== void 0 ? _e : undefined;
            this.teamId = (_f = data.teamId) !== null && _f !== void 0 ? _f : undefined;
            this.updatedAt = data.updatedAt;
        }
    }
    /**
     * Payload for an issue mention notification.
     *
     * @param data - L.IssueMentionNotificationWebhookPayloadFragment response data
     */
    class IssueMentionNotificationWebhookPayload {
        constructor(data) {
            var _a, _b, _c;
            this.actorId = (_a = data.actorId) !== null && _a !== void 0 ? _a : undefined;
            this.archivedAt = (_b = data.archivedAt) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = data.createdAt;
            this.externalUserActorId = (_c = data.externalUserActorId) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.issueId = data.issueId;
            this.type = data.type;
            this.updatedAt = data.updatedAt;
            this.userId = data.userId;
            this.actor = data.actor ? new UserChildWebhookPayload(data.actor) : undefined;
            this.issue = new IssueWithDescriptionChildWebhookPayload(data.issue);
        }
    }
    /**
     * Payload for an issue new comment notification.
     *
     * @param data - L.IssueNewCommentNotificationWebhookPayloadFragment response data
     */
    class IssueNewCommentNotificationWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d;
            this.actorId = (_a = data.actorId) !== null && _a !== void 0 ? _a : undefined;
            this.archivedAt = (_b = data.archivedAt) !== null && _b !== void 0 ? _b : undefined;
            this.commentId = data.commentId;
            this.createdAt = data.createdAt;
            this.externalUserActorId = (_c = data.externalUserActorId) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.issueId = data.issueId;
            this.parentCommentId = (_d = data.parentCommentId) !== null && _d !== void 0 ? _d : undefined;
            this.type = data.type;
            this.updatedAt = data.updatedAt;
            this.userId = data.userId;
            this.actor = data.actor ? new UserChildWebhookPayload(data.actor) : undefined;
            this.comment = new CommentChildWebhookPayload(data.comment);
            this.issue = new IssueWithDescriptionChildWebhookPayload(data.issue);
            this.parentComment = data.parentComment ? new CommentChildWebhookPayload(data.parentComment) : undefined;
        }
    }
    /**
     * An issue related notification.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueNotificationFragment response data
     */
    class IssueNotification extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.commentId = (_b = data.commentId) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.emailedAt = (_d = parseDate(data.emailedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.issueId = data.issueId;
            this.parentCommentId = (_e = data.parentCommentId) !== null && _e !== void 0 ? _e : undefined;
            this.reactionEmoji = (_f = data.reactionEmoji) !== null && _f !== void 0 ? _f : undefined;
            this.readAt = (_g = parseDate(data.readAt)) !== null && _g !== void 0 ? _g : undefined;
            this.snoozedUntilAt = (_h = parseDate(data.snoozedUntilAt)) !== null && _h !== void 0 ? _h : undefined;
            this.type = data.type;
            this.unsnoozedAt = (_j = parseDate(data.unsnoozedAt)) !== null && _j !== void 0 ? _j : undefined;
            this.updatedAt = (_k = parseDate(data.updatedAt)) !== null && _k !== void 0 ? _k : new Date();
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.subscriptions = data.subscriptions
                ? data.subscriptions.map(node => new NotificationSubscription(request, node))
                : undefined;
            this.category = data.category;
            this._actor = (_l = data.actor) !== null && _l !== void 0 ? _l : undefined;
            this._comment = (_m = data.comment) !== null && _m !== void 0 ? _m : undefined;
            this._externalUserActor = (_o = data.externalUserActor) !== null && _o !== void 0 ? _o : undefined;
            this._issue = data.issue;
            this._parentComment = (_p = data.parentComment) !== null && _p !== void 0 ? _p : undefined;
            this._team = data.team;
            this._user = data.user;
        }
        /** The user that caused the notification. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user that caused the notification. */
        get actorId() {
            var _a;
            return (_a = this._actor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The comment related to the notification. */
        get comment() {
            var _a, _b;
            return ((_a = this._comment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._comment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The external user that caused the notification. */
        get externalUserActor() {
            var _a, _b;
            return ((_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserActor) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of external user that caused the notification. */
        get externalUserActorId() {
            var _a;
            return (_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The issue related to the notification. */
        get issue() {
            return new IssueQuery(this._request).fetch(this._issue.id);
        }
        /** The parent comment related to the notification, if a notification is a reply comment notification. */
        get parentComment() {
            var _a, _b;
            return ((_a = this._parentComment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._parentComment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The team related to the issue notification. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
        /** The ID of team related to the issue notification. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that received the notification. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** The ID of user that received the notification. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * IssuePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssuePayloadFragment response data
     */
    class IssuePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._issue = (_a = data.issue) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The issue that was created or updated. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of issue that was created or updated. */
        get issueId() {
            var _a;
            return (_a = this._issue) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * IssuePriorityValue model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssuePriorityValueFragment response data
     */
    class IssuePriorityValue extends Request {
        constructor(request, data) {
            super(request);
            this.label = data.label;
            this.priority = data.priority;
        }
    }
    /**
     * A relation between two issues.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueRelationFragment response data
     */
    class IssueRelation extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.type = data.type;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._issue = data.issue;
            this._relatedIssue = data.relatedIssue;
        }
        /** The issue whose relationship is being described. */
        get issue() {
            return new IssueQuery(this._request).fetch(this._issue.id);
        }
        /** The ID of issue whose relationship is being described. */
        get issueId() {
            var _a;
            return (_a = this._issue) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The related issue. */
        get relatedIssue() {
            return new IssueQuery(this._request).fetch(this._relatedIssue.id);
        }
        /** The ID of related issue. */
        get relatedIssueId() {
            var _a;
            return (_a = this._relatedIssue) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates a new issue relation. */
        create(input, variables) {
            return new CreateIssueRelationMutation(this._request).fetch(input, variables);
        }
        /** Deletes an issue relation. */
        delete() {
            return new DeleteIssueRelationMutation(this._request).fetch(this.id);
        }
        /** Updates an issue relation. */
        update(input) {
            return new UpdateIssueRelationMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * IssueRelationConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IssueRelationConnection model
     * @param data - IssueRelationConnection response data
     */
    class IssueRelationConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new IssueRelation(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * Issue relation history's payload.
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueRelationHistoryPayloadFragment response data
     */
    class IssueRelationHistoryPayload extends Request {
        constructor(request, data) {
            super(request);
            this.identifier = data.identifier;
            this.type = data.type;
        }
    }
    /**
     * IssueRelationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueRelationPayloadFragment response data
     */
    class IssueRelationPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._issueRelation = data.issueRelation;
        }
        /** The issue relation that was created or updated. */
        get issueRelation() {
            return new IssueRelationQuery(this._request).fetch(this._issueRelation.id);
        }
        /** The ID of issue relation that was created or updated. */
        get issueRelationId() {
            var _a;
            return (_a = this._issueRelation) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * IssueSearchPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueSearchPayloadFragment response data
     */
    class IssueSearchPayload extends Request {
        constructor(request, data) {
            super(request);
            this.totalCount = data.totalCount;
            this.archivePayload = new ArchiveResponse(request, data.archivePayload);
            this.pageInfo = new PageInfo(request, data.pageInfo);
            this.nodes = data.nodes.map(node => new IssueSearchResult(request, node));
        }
    }
    /**
     * IssueSearchResult model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueSearchResultFragment response data
     */
    class IssueSearchResult extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15;
            super(request);
            this.addedToCycleAt = (_a = parseDate(data.addedToCycleAt)) !== null && _a !== void 0 ? _a : undefined;
            this.addedToProjectAt = (_b = parseDate(data.addedToProjectAt)) !== null && _b !== void 0 ? _b : undefined;
            this.addedToTeamAt = (_c = parseDate(data.addedToTeamAt)) !== null && _c !== void 0 ? _c : undefined;
            this.archivedAt = (_d = parseDate(data.archivedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.autoArchivedAt = (_e = parseDate(data.autoArchivedAt)) !== null && _e !== void 0 ? _e : undefined;
            this.autoClosedAt = (_f = parseDate(data.autoClosedAt)) !== null && _f !== void 0 ? _f : undefined;
            this.boardOrder = data.boardOrder;
            this.branchName = data.branchName;
            this.canceledAt = (_g = parseDate(data.canceledAt)) !== null && _g !== void 0 ? _g : undefined;
            this.completedAt = (_h = parseDate(data.completedAt)) !== null && _h !== void 0 ? _h : undefined;
            this.createdAt = (_j = parseDate(data.createdAt)) !== null && _j !== void 0 ? _j : new Date();
            this.customerTicketCount = data.customerTicketCount;
            this.description = (_k = data.description) !== null && _k !== void 0 ? _k : undefined;
            this.dueDate = (_l = data.dueDate) !== null && _l !== void 0 ? _l : undefined;
            this.estimate = (_m = data.estimate) !== null && _m !== void 0 ? _m : undefined;
            this.id = data.id;
            this.identifier = data.identifier;
            this.labelIds = data.labelIds;
            this.metadata = data.metadata;
            this.number = data.number;
            this.previousIdentifiers = data.previousIdentifiers;
            this.priority = data.priority;
            this.priorityLabel = data.priorityLabel;
            this.prioritySortOrder = data.prioritySortOrder;
            this.reactionData = data.reactionData;
            this.slaBreachesAt = (_o = parseDate(data.slaBreachesAt)) !== null && _o !== void 0 ? _o : undefined;
            this.slaHighRiskAt = (_p = parseDate(data.slaHighRiskAt)) !== null && _p !== void 0 ? _p : undefined;
            this.slaMediumRiskAt = (_q = parseDate(data.slaMediumRiskAt)) !== null && _q !== void 0 ? _q : undefined;
            this.slaStartedAt = (_r = parseDate(data.slaStartedAt)) !== null && _r !== void 0 ? _r : undefined;
            this.slaType = (_s = data.slaType) !== null && _s !== void 0 ? _s : undefined;
            this.snoozedUntilAt = (_t = parseDate(data.snoozedUntilAt)) !== null && _t !== void 0 ? _t : undefined;
            this.sortOrder = data.sortOrder;
            this.startedAt = (_u = parseDate(data.startedAt)) !== null && _u !== void 0 ? _u : undefined;
            this.startedTriageAt = (_v = parseDate(data.startedTriageAt)) !== null && _v !== void 0 ? _v : undefined;
            this.subIssueSortOrder = (_w = data.subIssueSortOrder) !== null && _w !== void 0 ? _w : undefined;
            this.title = data.title;
            this.trashed = (_x = data.trashed) !== null && _x !== void 0 ? _x : undefined;
            this.triagedAt = (_y = parseDate(data.triagedAt)) !== null && _y !== void 0 ? _y : undefined;
            this.updatedAt = (_z = parseDate(data.updatedAt)) !== null && _z !== void 0 ? _z : new Date();
            this.url = data.url;
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.reactions = data.reactions.map(node => new Reaction(request, node));
            this.syncedWith = data.syncedWith ? data.syncedWith.map(node => new ExternalEntityInfo(request, node)) : undefined;
            this.integrationSourceType = (_0 = data.integrationSourceType) !== null && _0 !== void 0 ? _0 : undefined;
            this._asksExternalUserRequester = (_1 = data.asksExternalUserRequester) !== null && _1 !== void 0 ? _1 : undefined;
            this._asksRequester = (_2 = data.asksRequester) !== null && _2 !== void 0 ? _2 : undefined;
            this._assignee = (_3 = data.assignee) !== null && _3 !== void 0 ? _3 : undefined;
            this._creator = (_4 = data.creator) !== null && _4 !== void 0 ? _4 : undefined;
            this._cycle = (_5 = data.cycle) !== null && _5 !== void 0 ? _5 : undefined;
            this._delegate = (_6 = data.delegate) !== null && _6 !== void 0 ? _6 : undefined;
            this._externalUserCreator = (_7 = data.externalUserCreator) !== null && _7 !== void 0 ? _7 : undefined;
            this._favorite = (_8 = data.favorite) !== null && _8 !== void 0 ? _8 : undefined;
            this._lastAppliedTemplate = (_9 = data.lastAppliedTemplate) !== null && _9 !== void 0 ? _9 : undefined;
            this._parent = (_10 = data.parent) !== null && _10 !== void 0 ? _10 : undefined;
            this._project = (_11 = data.project) !== null && _11 !== void 0 ? _11 : undefined;
            this._projectMilestone = (_12 = data.projectMilestone) !== null && _12 !== void 0 ? _12 : undefined;
            this._recurringIssueTemplate = (_13 = data.recurringIssueTemplate) !== null && _13 !== void 0 ? _13 : undefined;
            this._snoozedBy = (_14 = data.snoozedBy) !== null && _14 !== void 0 ? _14 : undefined;
            this._sourceComment = (_15 = data.sourceComment) !== null && _15 !== void 0 ? _15 : undefined;
            this._state = data.state;
            this._team = data.team;
        }
        /** The external user who requested creation of the Asks issue on behalf of the creator. */
        get asksExternalUserRequester() {
            var _a, _b;
            return ((_a = this._asksExternalUserRequester) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._asksExternalUserRequester) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of external user who requested creation of the asks issue on behalf of the creator. */
        get asksExternalUserRequesterId() {
            var _a;
            return (_a = this._asksExternalUserRequester) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The internal user who requested creation of the Asks issue on behalf of the creator. */
        get asksRequester() {
            var _a, _b;
            return ((_a = this._asksRequester) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._asksRequester) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of internal user who requested creation of the asks issue on behalf of the creator. */
        get asksRequesterId() {
            var _a;
            return (_a = this._asksRequester) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user to whom the issue is assigned to. */
        get assignee() {
            var _a, _b;
            return ((_a = this._assignee) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._assignee) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user to whom the issue is assigned to. */
        get assigneeId() {
            var _a;
            return (_a = this._assignee) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user who created the issue. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who created the issue. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The cycle that the issue is associated with. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of cycle that the issue is associated with. */
        get cycleId() {
            var _a;
            return (_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The agent user that is delegated to work on this issue. */
        get delegate() {
            var _a, _b;
            return ((_a = this._delegate) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._delegate) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of agent user that is delegated to work on this issue. */
        get delegateId() {
            var _a;
            return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The external user who created the issue. */
        get externalUserCreator() {
            var _a, _b;
            return ((_a = this._externalUserCreator) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserCreator) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of external user who created the issue. */
        get externalUserCreatorId() {
            var _a;
            return (_a = this._externalUserCreator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The users favorite associated with this issue. */
        get favorite() {
            var _a, _b;
            return ((_a = this._favorite) === null || _a === void 0 ? void 0 : _a.id) ? new FavoriteQuery(this._request).fetch((_b = this._favorite) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of users favorite associated with this issue. */
        get favoriteId() {
            var _a;
            return (_a = this._favorite) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The last template that was applied to this issue. */
        get lastAppliedTemplate() {
            var _a, _b;
            return ((_a = this._lastAppliedTemplate) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._lastAppliedTemplate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of last template that was applied to this issue. */
        get lastAppliedTemplateId() {
            var _a;
            return (_a = this._lastAppliedTemplate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The parent of the issue. */
        get parent() {
            var _a, _b;
            return ((_a = this._parent) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._parent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of parent of the issue. */
        get parentId() {
            var _a;
            return (_a = this._parent) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The project that the issue is associated with. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of project that the issue is associated with. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The projectMilestone that the issue is associated with. */
        get projectMilestone() {
            var _a, _b;
            return ((_a = this._projectMilestone) === null || _a === void 0 ? void 0 : _a.id)
                ? new ProjectMilestoneQuery(this._request).fetch((_b = this._projectMilestone) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of projectmilestone that the issue is associated with. */
        get projectMilestoneId() {
            var _a;
            return (_a = this._projectMilestone) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The recurring issue template that created this issue. */
        get recurringIssueTemplate() {
            var _a, _b;
            return ((_a = this._recurringIssueTemplate) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._recurringIssueTemplate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of recurring issue template that created this issue. */
        get recurringIssueTemplateId() {
            var _a;
            return (_a = this._recurringIssueTemplate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user who snoozed the issue. */
        get snoozedBy() {
            var _a, _b;
            return ((_a = this._snoozedBy) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._snoozedBy) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who snoozed the issue. */
        get snoozedById() {
            var _a;
            return (_a = this._snoozedBy) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The comment that this issue was created from. */
        get sourceComment() {
            var _a, _b;
            return ((_a = this._sourceComment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._sourceComment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The ID of comment that this issue was created from. */
        get sourceCommentId() {
            var _a;
            return (_a = this._sourceComment) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The workflow state that the issue is associated with. */
        get state() {
            return new WorkflowStateQuery(this._request).fetch(this._state.id);
        }
        /** The ID of workflow state that the issue is associated with. */
        get stateId() {
            var _a;
            return (_a = this._state) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team that the issue is associated with. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
        /** The ID of team that the issue is associated with. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Payload for issue SLA webhook events.
     *
     * @param data - L.IssueSlaWebhookPayloadFragment response data
     */
    class IssueSlaWebhookPayload {
        constructor(data) {
            var _a, _b;
            this.action = data.action;
            this.createdAt = (_a = parseDate(data.createdAt)) !== null && _a !== void 0 ? _a : new Date();
            this.organizationId = data.organizationId;
            this.type = data.type;
            this.url = (_b = data.url) !== null && _b !== void 0 ? _b : undefined;
            this.issueData = new IssueWebhookPayload(data.issueData);
        }
    }
    /**
     * Payload for a terminal issue status change notification.
     *
     * @param data - L.IssueStatusChangedNotificationWebhookPayloadFragment response data
     */
    class IssueStatusChangedNotificationWebhookPayload {
        constructor(data) {
            var _a, _b, _c;
            this.actorId = (_a = data.actorId) !== null && _a !== void 0 ? _a : undefined;
            this.archivedAt = (_b = data.archivedAt) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = data.createdAt;
            this.externalUserActorId = (_c = data.externalUserActorId) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.issueId = data.issueId;
            this.type = data.type;
            this.updatedAt = data.updatedAt;
            this.userId = data.userId;
            this.actor = data.actor ? new UserChildWebhookPayload(data.actor) : undefined;
            this.issue = new IssueWithDescriptionChildWebhookPayload(data.issue);
        }
    }
    /**
     * IssueSuggestion model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueSuggestionFragment response data
     */
    class IssueSuggestion extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.dismissalReason = (_c = data.dismissalReason) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.issueId = data.issueId;
            this.stateChangedAt = (_d = parseDate(data.stateChangedAt)) !== null && _d !== void 0 ? _d : new Date();
            this.suggestedIssueId = (_e = data.suggestedIssueId) !== null && _e !== void 0 ? _e : undefined;
            this.suggestedLabelId = (_f = data.suggestedLabelId) !== null && _f !== void 0 ? _f : undefined;
            this.suggestedUserId = (_g = data.suggestedUserId) !== null && _g !== void 0 ? _g : undefined;
            this.updatedAt = (_h = parseDate(data.updatedAt)) !== null && _h !== void 0 ? _h : new Date();
            this.metadata = data.metadata ? new IssueSuggestionMetadata(request, data.metadata) : undefined;
            this.state = data.state;
            this.type = data.type;
            this._issue = data.issue;
            this._suggestedIssue = (_j = data.suggestedIssue) !== null && _j !== void 0 ? _j : undefined;
            this._suggestedLabel = (_k = data.suggestedLabel) !== null && _k !== void 0 ? _k : undefined;
            this._suggestedProject = (_l = data.suggestedProject) !== null && _l !== void 0 ? _l : undefined;
            this._suggestedTeam = (_m = data.suggestedTeam) !== null && _m !== void 0 ? _m : undefined;
            this._suggestedUser = (_o = data.suggestedUser) !== null && _o !== void 0 ? _o : undefined;
        }
        get issue() {
            return new IssueQuery(this._request).fetch(this._issue.id);
        }
        get suggestedIssue() {
            var _a, _b;
            return ((_a = this._suggestedIssue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._suggestedIssue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        get suggestedLabel() {
            var _a, _b;
            return ((_a = this._suggestedLabel) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._suggestedLabel) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        get suggestedProject() {
            var _a, _b;
            return ((_a = this._suggestedProject) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._suggestedProject) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of suggestedProject */
        get suggestedProjectId() {
            var _a;
            return (_a = this._suggestedProject) === null || _a === void 0 ? void 0 : _a.id;
        }
        get suggestedTeam() {
            var _a, _b;
            return ((_a = this._suggestedTeam) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._suggestedTeam) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of suggestedTeam */
        get suggestedTeamId() {
            var _a;
            return (_a = this._suggestedTeam) === null || _a === void 0 ? void 0 : _a.id;
        }
        get suggestedUser() {
            var _a, _b;
            return ((_a = this._suggestedUser) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._suggestedUser) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
    }
    /**
     * IssueSuggestionConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this IssueSuggestionConnection model
     * @param data - IssueSuggestionConnection response data
     */
    class IssueSuggestionConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new IssueSuggestion(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * IssueSuggestionMetadata model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueSuggestionMetadataFragment response data
     */
    class IssueSuggestionMetadata extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.appliedAutomationRuleId = (_a = data.appliedAutomationRuleId) !== null && _a !== void 0 ? _a : undefined;
            this.classification = (_b = data.classification) !== null && _b !== void 0 ? _b : undefined;
            this.evalLogId = (_c = data.evalLogId) !== null && _c !== void 0 ? _c : undefined;
            this.rank = (_d = data.rank) !== null && _d !== void 0 ? _d : undefined;
            this.reasons = (_e = data.reasons) !== null && _e !== void 0 ? _e : undefined;
            this.score = (_f = data.score) !== null && _f !== void 0 ? _f : undefined;
            this.variant = (_g = data.variant) !== null && _g !== void 0 ? _g : undefined;
        }
    }
    /**
     * IssueTitleSuggestionFromCustomerRequestPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.IssueTitleSuggestionFromCustomerRequestPayloadFragment response data
     */
    class IssueTitleSuggestionFromCustomerRequestPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.title = data.title;
        }
    }
    /**
     * Payload for an issue unassignment notification.
     *
     * @param data - L.IssueUnassignedFromYouNotificationWebhookPayloadFragment response data
     */
    class IssueUnassignedFromYouNotificationWebhookPayload {
        constructor(data) {
            var _a, _b, _c;
            this.actorId = (_a = data.actorId) !== null && _a !== void 0 ? _a : undefined;
            this.archivedAt = (_b = data.archivedAt) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = data.createdAt;
            this.externalUserActorId = (_c = data.externalUserActorId) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.issueId = data.issueId;
            this.type = data.type;
            this.updatedAt = data.updatedAt;
            this.userId = data.userId;
            this.actor = data.actor ? new UserChildWebhookPayload(data.actor) : undefined;
            this.issue = new IssueWithDescriptionChildWebhookPayload(data.issue);
        }
    }
    /**
     * Payload for an issue webhook.
     *
     * @param data - L.IssueWebhookPayloadFragment response data
     */
    class IssueWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12;
            this.addedToCycleAt = (_a = data.addedToCycleAt) !== null && _a !== void 0 ? _a : undefined;
            this.addedToProjectAt = (_b = data.addedToProjectAt) !== null && _b !== void 0 ? _b : undefined;
            this.addedToTeamAt = (_c = data.addedToTeamAt) !== null && _c !== void 0 ? _c : undefined;
            this.archivedAt = (_d = data.archivedAt) !== null && _d !== void 0 ? _d : undefined;
            this.assigneeId = (_e = data.assigneeId) !== null && _e !== void 0 ? _e : undefined;
            this.autoArchivedAt = (_f = data.autoArchivedAt) !== null && _f !== void 0 ? _f : undefined;
            this.autoClosedAt = (_g = data.autoClosedAt) !== null && _g !== void 0 ? _g : undefined;
            this.botActor = (_h = data.botActor) !== null && _h !== void 0 ? _h : undefined;
            this.canceledAt = (_j = data.canceledAt) !== null && _j !== void 0 ? _j : undefined;
            this.completedAt = (_k = data.completedAt) !== null && _k !== void 0 ? _k : undefined;
            this.createdAt = data.createdAt;
            this.creatorId = (_l = data.creatorId) !== null && _l !== void 0 ? _l : undefined;
            this.cycleId = (_m = data.cycleId) !== null && _m !== void 0 ? _m : undefined;
            this.delegateId = (_o = data.delegateId) !== null && _o !== void 0 ? _o : undefined;
            this.description = (_p = data.description) !== null && _p !== void 0 ? _p : undefined;
            this.descriptionData = (_q = data.descriptionData) !== null && _q !== void 0 ? _q : undefined;
            this.dueDate = (_r = data.dueDate) !== null && _r !== void 0 ? _r : undefined;
            this.estimate = (_s = data.estimate) !== null && _s !== void 0 ? _s : undefined;
            this.externalUserCreatorId = (_t = data.externalUserCreatorId) !== null && _t !== void 0 ? _t : undefined;
            this.id = data.id;
            this.identifier = data.identifier;
            this.integrationSourceType = (_u = data.integrationSourceType) !== null && _u !== void 0 ? _u : undefined;
            this.labelIds = data.labelIds;
            this.lastAppliedTemplateId = (_v = data.lastAppliedTemplateId) !== null && _v !== void 0 ? _v : undefined;
            this.number = data.number;
            this.parentId = (_w = data.parentId) !== null && _w !== void 0 ? _w : undefined;
            this.previousIdentifiers = data.previousIdentifiers;
            this.priority = data.priority;
            this.priorityLabel = data.priorityLabel;
            this.prioritySortOrder = data.prioritySortOrder;
            this.projectId = (_x = data.projectId) !== null && _x !== void 0 ? _x : undefined;
            this.projectMilestoneId = (_y = data.projectMilestoneId) !== null && _y !== void 0 ? _y : undefined;
            this.reactionData = data.reactionData;
            this.recurringIssueTemplateId = (_z = data.recurringIssueTemplateId) !== null && _z !== void 0 ? _z : undefined;
            this.slaBreachesAt = (_0 = data.slaBreachesAt) !== null && _0 !== void 0 ? _0 : undefined;
            this.slaHighRiskAt = (_1 = data.slaHighRiskAt) !== null && _1 !== void 0 ? _1 : undefined;
            this.slaMediumRiskAt = (_2 = data.slaMediumRiskAt) !== null && _2 !== void 0 ? _2 : undefined;
            this.slaStartedAt = (_3 = data.slaStartedAt) !== null && _3 !== void 0 ? _3 : undefined;
            this.slaType = (_4 = data.slaType) !== null && _4 !== void 0 ? _4 : undefined;
            this.snoozedUntilAt = (_5 = data.snoozedUntilAt) !== null && _5 !== void 0 ? _5 : undefined;
            this.sortOrder = data.sortOrder;
            this.sourceCommentId = (_6 = data.sourceCommentId) !== null && _6 !== void 0 ? _6 : undefined;
            this.startedAt = (_7 = data.startedAt) !== null && _7 !== void 0 ? _7 : undefined;
            this.startedTriageAt = (_8 = data.startedTriageAt) !== null && _8 !== void 0 ? _8 : undefined;
            this.stateId = data.stateId;
            this.subIssueSortOrder = (_9 = data.subIssueSortOrder) !== null && _9 !== void 0 ? _9 : undefined;
            this.subscriberIds = data.subscriberIds;
            this.syncedWith = (_10 = data.syncedWith) !== null && _10 !== void 0 ? _10 : undefined;
            this.teamId = data.teamId;
            this.title = data.title;
            this.trashed = (_11 = data.trashed) !== null && _11 !== void 0 ? _11 : undefined;
            this.triagedAt = (_12 = data.triagedAt) !== null && _12 !== void 0 ? _12 : undefined;
            this.updatedAt = data.updatedAt;
            this.url = data.url;
            this.assignee = data.assignee ? new UserChildWebhookPayload(data.assignee) : undefined;
            this.creator = data.creator ? new UserChildWebhookPayload(data.creator) : undefined;
            this.cycle = data.cycle ? new CycleChildWebhookPayload(data.cycle) : undefined;
            this.delegate = data.delegate ? new UserChildWebhookPayload(data.delegate) : undefined;
            this.externalUserCreator = data.externalUserCreator
                ? new ExternalUserChildWebhookPayload(data.externalUserCreator)
                : undefined;
            this.project = data.project ? new ProjectChildWebhookPayload(data.project) : undefined;
            this.projectMilestone = data.projectMilestone
                ? new ProjectMilestoneChildWebhookPayload(data.projectMilestone)
                : undefined;
            this.state = new WorkflowStateChildWebhookPayload(data.state);
            this.team = data.team ? new TeamChildWebhookPayload(data.team) : undefined;
            this.labels = data.labels.map(node => new IssueLabelChildWebhookPayload(node));
        }
    }
    /**
     * Certain properties of an issue, including its description.
     *
     * @param data - L.IssueWithDescriptionChildWebhookPayloadFragment response data
     */
    class IssueWithDescriptionChildWebhookPayload {
        constructor(data) {
            var _a;
            this.description = (_a = data.description) !== null && _a !== void 0 ? _a : undefined;
            this.id = data.id;
            this.identifier = data.identifier;
            this.teamId = data.teamId;
            this.title = data.title;
            this.url = data.url;
            this.team = new TeamChildWebhookPayload(data.team);
        }
    }
    /**
     * A label notification subscription.
     *
     * @param request - function to call the graphql client
     * @param data - L.LabelNotificationSubscriptionFragment response data
     */
    class LabelNotificationSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            super(request);
            this.active = data.active;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.notificationSubscriptionTypes = data.notificationSubscriptionTypes;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.contextViewType = (_d = data.contextViewType) !== null && _d !== void 0 ? _d : undefined;
            this.userContextViewType = (_e = data.userContextViewType) !== null && _e !== void 0 ? _e : undefined;
            this._customView = (_f = data.customView) !== null && _f !== void 0 ? _f : undefined;
            this._customer = (_g = data.customer) !== null && _g !== void 0 ? _g : undefined;
            this._cycle = (_h = data.cycle) !== null && _h !== void 0 ? _h : undefined;
            this._initiative = (_j = data.initiative) !== null && _j !== void 0 ? _j : undefined;
            this._label = data.label;
            this._project = (_k = data.project) !== null && _k !== void 0 ? _k : undefined;
            this._subscriber = data.subscriber;
            this._team = (_l = data.team) !== null && _l !== void 0 ? _l : undefined;
            this._user = (_m = data.user) !== null && _m !== void 0 ? _m : undefined;
        }
        /** The contextual custom view associated with the notification subscription. */
        get customView() {
            var _a, _b;
            return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual custom view associated with the notification subscription. */
        get customViewId() {
            var _a;
            return (_a = this._customView) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The customer associated with the notification subscription. */
        get customer() {
            var _a, _b;
            return ((_a = this._customer) === null || _a === void 0 ? void 0 : _a.id) ? new CustomerQuery(this._request).fetch((_b = this._customer) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of customer associated with the notification subscription. */
        get customerId() {
            var _a;
            return (_a = this._customer) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual cycle view associated with the notification subscription. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual cycle view associated with the notification subscription. */
        get cycleId() {
            var _a;
            return (_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual initiative view associated with the notification subscription. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual initiative view associated with the notification subscription. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The label subscribed to. */
        get label() {
            return new IssueLabelQuery(this._request).fetch(this._label.id);
        }
        /** The ID of label subscribed to. */
        get labelId() {
            var _a;
            return (_a = this._label) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual project view associated with the notification subscription. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual project view associated with the notification subscription. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that subscribed to receive notifications. */
        get subscriber() {
            return new UserQuery(this._request).fetch(this._subscriber.id);
        }
        /** The ID of user that subscribed to receive notifications. */
        get subscriberId() {
            var _a;
            return (_a = this._subscriber) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team associated with the notification subscription. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of team associated with the notification subscription. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user view associated with the notification subscription. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user view associated with the notification subscription. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * LogoutResponse model
     *
     * @param request - function to call the graphql client
     * @param data - L.LogoutResponseFragment response data
     */
    class LogoutResponse extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * Node model
     *
     * @param request - function to call the graphql client
     * @param data - L.NodeFragment response data
     */
    class Node extends Request {
        constructor(request, data) {
            super(request);
            this.id = data.id;
        }
    }
    /**
     * A notification sent to a user.
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationFragment response data
     */
    class Notification extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.emailedAt = (_c = parseDate(data.emailedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.readAt = (_d = parseDate(data.readAt)) !== null && _d !== void 0 ? _d : undefined;
            this.snoozedUntilAt = (_e = parseDate(data.snoozedUntilAt)) !== null && _e !== void 0 ? _e : undefined;
            this.type = data.type;
            this.unsnoozedAt = (_f = parseDate(data.unsnoozedAt)) !== null && _f !== void 0 ? _f : undefined;
            this.updatedAt = (_g = parseDate(data.updatedAt)) !== null && _g !== void 0 ? _g : new Date();
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.category = data.category;
            this._actor = (_h = data.actor) !== null && _h !== void 0 ? _h : undefined;
            this._externalUserActor = (_j = data.externalUserActor) !== null && _j !== void 0 ? _j : undefined;
            this._user = data.user;
        }
        /** The user that caused the notification. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user that caused the notification. */
        get actorId() {
            var _a;
            return (_a = this._actor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The external user that caused the notification. */
        get externalUserActor() {
            var _a, _b;
            return ((_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserActor) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of external user that caused the notification. */
        get externalUserActorId() {
            var _a;
            return (_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that received the notification. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** The ID of user that received the notification. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Archives a notification. */
        archive() {
            return new ArchiveNotificationMutation(this._request).fetch(this.id);
        }
        /** Unarchives a notification. */
        unarchive() {
            return new UnarchiveNotificationMutation(this._request).fetch(this.id);
        }
        /** Updates a notification. */
        update(input) {
            return new UpdateNotificationMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationArchivePayloadFragment response data
     */
    class NotificationArchivePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * NotificationBatchActionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationBatchActionPayloadFragment response data
     */
    class NotificationBatchActionPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.notifications = data.notifications.map(node => new Notification(request, node));
        }
    }
    /**
     * A user's notification category preferences.
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationCategoryPreferencesFragment response data
     */
    class NotificationCategoryPreferences extends Request {
        constructor(request, data) {
            super(request);
            this.appsAndIntegrations = new NotificationChannelPreferences(request, data.appsAndIntegrations);
            this.assignments = new NotificationChannelPreferences(request, data.assignments);
            this.commentsAndReplies = new NotificationChannelPreferences(request, data.commentsAndReplies);
            this.customers = new NotificationChannelPreferences(request, data.customers);
            this.documentChanges = new NotificationChannelPreferences(request, data.documentChanges);
            this.feed = new NotificationChannelPreferences(request, data.feed);
            this.mentions = new NotificationChannelPreferences(request, data.mentions);
            this.postsAndUpdates = new NotificationChannelPreferences(request, data.postsAndUpdates);
            this.reactions = new NotificationChannelPreferences(request, data.reactions);
            this.reminders = new NotificationChannelPreferences(request, data.reminders);
            this.reviews = new NotificationChannelPreferences(request, data.reviews);
            this.statusChanges = new NotificationChannelPreferences(request, data.statusChanges);
            this.subscriptions = new NotificationChannelPreferences(request, data.subscriptions);
            this.system = new NotificationChannelPreferences(request, data.system);
            this.triage = new NotificationChannelPreferences(request, data.triage);
        }
    }
    /**
     * A user's notification channel preferences, indicating if a channel is enabled or not
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationChannelPreferencesFragment response data
     */
    class NotificationChannelPreferences extends Request {
        constructor(request, data) {
            super(request);
            this.desktop = data.desktop;
            this.email = data.email;
            this.mobile = data.mobile;
            this.slack = data.slack;
        }
    }
    /**
     * NotificationConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this NotificationConnection model
     * @param data - NotificationConnection response data
     */
    class NotificationConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => {
                switch (node.__typename) {
                    case "CustomerNeedNotification":
                        return new CustomerNeedNotification(request, node);
                    case "CustomerNotification":
                        return new CustomerNotification(request, node);
                    case "DocumentNotification":
                        return new DocumentNotification(request, node);
                    case "InitiativeNotification":
                        return new InitiativeNotification(request, node);
                    case "IssueNotification":
                        return new IssueNotification(request, node);
                    case "OauthClientApprovalNotification":
                        return new OauthClientApprovalNotification(request, node);
                    case "PostNotification":
                        return new PostNotification(request, node);
                    case "ProjectNotification":
                        return new ProjectNotification(request, node);
                    case "PullRequestNotification":
                        return new PullRequestNotification(request, node);
                    default:
                        return new Notification(request, node);
                }
            }), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A user's notification delivery preferences.
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationDeliveryPreferencesFragment response data
     */
    class NotificationDeliveryPreferences extends Request {
        constructor(request, data) {
            super(request);
            this.mobile = data.mobile ? new NotificationDeliveryPreferencesChannel(request, data.mobile) : undefined;
        }
    }
    /**
     * A user's notification delivery preferences.
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationDeliveryPreferencesChannelFragment response data
     */
    class NotificationDeliveryPreferencesChannel extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.notificationsDisabled = (_a = data.notificationsDisabled) !== null && _a !== void 0 ? _a : undefined;
            this.schedule = data.schedule ? new NotificationDeliveryPreferencesSchedule(request, data.schedule) : undefined;
        }
    }
    /**
     * A user's notification delivery schedule for a particular day.
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationDeliveryPreferencesDayFragment response data
     */
    class NotificationDeliveryPreferencesDay extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.end = (_a = data.end) !== null && _a !== void 0 ? _a : undefined;
            this.start = (_b = data.start) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * A user's notification delivery schedule for a particular day.
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationDeliveryPreferencesScheduleFragment response data
     */
    class NotificationDeliveryPreferencesSchedule extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.disabled = (_a = data.disabled) !== null && _a !== void 0 ? _a : undefined;
            this.friday = new NotificationDeliveryPreferencesDay(request, data.friday);
            this.monday = new NotificationDeliveryPreferencesDay(request, data.monday);
            this.saturday = new NotificationDeliveryPreferencesDay(request, data.saturday);
            this.sunday = new NotificationDeliveryPreferencesDay(request, data.sunday);
            this.thursday = new NotificationDeliveryPreferencesDay(request, data.thursday);
            this.tuesday = new NotificationDeliveryPreferencesDay(request, data.tuesday);
            this.wednesday = new NotificationDeliveryPreferencesDay(request, data.wednesday);
        }
    }
    /**
     * NotificationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationPayloadFragment response data
     */
    class NotificationPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * Notification subscriptions for models.
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationSubscriptionFragment response data
     */
    class NotificationSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
            super(request);
            this.active = data.active;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.contextViewType = (_d = data.contextViewType) !== null && _d !== void 0 ? _d : undefined;
            this.userContextViewType = (_e = data.userContextViewType) !== null && _e !== void 0 ? _e : undefined;
            this._customView = (_f = data.customView) !== null && _f !== void 0 ? _f : undefined;
            this._customer = (_g = data.customer) !== null && _g !== void 0 ? _g : undefined;
            this._cycle = (_h = data.cycle) !== null && _h !== void 0 ? _h : undefined;
            this._initiative = (_j = data.initiative) !== null && _j !== void 0 ? _j : undefined;
            this._label = (_k = data.label) !== null && _k !== void 0 ? _k : undefined;
            this._project = (_l = data.project) !== null && _l !== void 0 ? _l : undefined;
            this._subscriber = data.subscriber;
            this._team = (_m = data.team) !== null && _m !== void 0 ? _m : undefined;
            this._user = (_o = data.user) !== null && _o !== void 0 ? _o : undefined;
        }
        /** The contextual custom view associated with the notification subscription. */
        get customView() {
            var _a, _b;
            return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual custom view associated with the notification subscription. */
        get customViewId() {
            var _a;
            return (_a = this._customView) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The customer associated with the notification subscription. */
        get customer() {
            var _a, _b;
            return ((_a = this._customer) === null || _a === void 0 ? void 0 : _a.id) ? new CustomerQuery(this._request).fetch((_b = this._customer) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of customer associated with the notification subscription. */
        get customerId() {
            var _a;
            return (_a = this._customer) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual cycle view associated with the notification subscription. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual cycle view associated with the notification subscription. */
        get cycleId() {
            var _a;
            return (_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual initiative view associated with the notification subscription. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual initiative view associated with the notification subscription. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual label view associated with the notification subscription. */
        get label() {
            var _a, _b;
            return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual label view associated with the notification subscription. */
        get labelId() {
            var _a;
            return (_a = this._label) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual project view associated with the notification subscription. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual project view associated with the notification subscription. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that subscribed to receive notifications. */
        get subscriber() {
            return new UserQuery(this._request).fetch(this._subscriber.id);
        }
        /** The ID of user that subscribed to receive notifications. */
        get subscriberId() {
            var _a;
            return (_a = this._subscriber) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team associated with the notification subscription. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of team associated with the notification subscription. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user view associated with the notification subscription. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user view associated with the notification subscription. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates a new notification subscription for a cycle, custom view, label, project or team. */
        create(input) {
            return new CreateNotificationSubscriptionMutation(this._request).fetch(input);
        }
        /** Deletes a notification subscription reference. */
        delete() {
            return new DeleteNotificationSubscriptionMutation(this._request).fetch(this.id);
        }
        /** Updates a notification subscription. */
        update(input) {
            return new UpdateNotificationSubscriptionMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * NotificationSubscriptionConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this NotificationSubscriptionConnection model
     * @param data - NotificationSubscriptionConnection response data
     */
    class NotificationSubscriptionConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => {
                switch (node.__typename) {
                    case "CustomViewNotificationSubscription":
                        return new CustomViewNotificationSubscription(request, node);
                    case "CustomerNotificationSubscription":
                        return new CustomerNotificationSubscription(request, node);
                    case "CycleNotificationSubscription":
                        return new CycleNotificationSubscription(request, node);
                    case "InitiativeNotificationSubscription":
                        return new InitiativeNotificationSubscription(request, node);
                    case "LabelNotificationSubscription":
                        return new LabelNotificationSubscription(request, node);
                    case "ProjectNotificationSubscription":
                        return new ProjectNotificationSubscription(request, node);
                    case "TeamNotificationSubscription":
                        return new TeamNotificationSubscription(request, node);
                    case "UserNotificationSubscription":
                        return new UserNotificationSubscription(request, node);
                    default:
                        return new NotificationSubscription(request, node);
                }
            }), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * NotificationSubscriptionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.NotificationSubscriptionPayloadFragment response data
     */
    class NotificationSubscriptionPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * Payload for OAuth app webhook events.
     *
     * @param data - L.OAuthAppWebhookPayloadFragment response data
     */
    class OAuthAppWebhookPayload {
        constructor(data) {
            var _a;
            this.action = data.action;
            this.createdAt = (_a = parseDate(data.createdAt)) !== null && _a !== void 0 ? _a : new Date();
            this.oauthClientId = data.oauthClientId;
            this.organizationId = data.organizationId;
            this.type = data.type;
        }
    }
    /**
     * OAuth client actor payload for webhooks.
     *
     * @param data - L.OauthClientActorWebhookPayloadFragment response data
     */
    class OauthClientActorWebhookPayload {
        constructor(data) {
            this.id = data.id;
            this.name = data.name;
            this.type = data.type;
        }
    }
    /**
     * Request to install OAuth clients on organizations and the response to the request.
     *
     * @param request - function to call the graphql client
     * @param data - L.OauthClientApprovalFragment response data
     */
    class OauthClientApproval extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.denyReason = (_c = data.denyReason) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.oauthClientId = data.oauthClientId;
            this.requestReason = (_d = data.requestReason) !== null && _d !== void 0 ? _d : undefined;
            this.requesterId = data.requesterId;
            this.responderId = (_e = data.responderId) !== null && _e !== void 0 ? _e : undefined;
            this.scopes = data.scopes;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
            this.status = data.status;
        }
    }
    /**
     * An oauth client approval related notification.
     *
     * @param request - function to call the graphql client
     * @param data - L.OauthClientApprovalNotificationFragment response data
     */
    class OauthClientApprovalNotification extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.emailedAt = (_c = parseDate(data.emailedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.oauthClientApprovalId = data.oauthClientApprovalId;
            this.readAt = (_d = parseDate(data.readAt)) !== null && _d !== void 0 ? _d : undefined;
            this.snoozedUntilAt = (_e = parseDate(data.snoozedUntilAt)) !== null && _e !== void 0 ? _e : undefined;
            this.type = data.type;
            this.unsnoozedAt = (_f = parseDate(data.unsnoozedAt)) !== null && _f !== void 0 ? _f : undefined;
            this.updatedAt = (_g = parseDate(data.updatedAt)) !== null && _g !== void 0 ? _g : new Date();
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.oauthClientApproval = new OauthClientApproval(request, data.oauthClientApproval);
            this.category = data.category;
            this._actor = (_h = data.actor) !== null && _h !== void 0 ? _h : undefined;
            this._externalUserActor = (_j = data.externalUserActor) !== null && _j !== void 0 ? _j : undefined;
            this._user = data.user;
        }
        /** The user that caused the notification. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user that caused the notification. */
        get actorId() {
            var _a;
            return (_a = this._actor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The external user that caused the notification. */
        get externalUserActor() {
            var _a, _b;
            return ((_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserActor) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of external user that caused the notification. */
        get externalUserActorId() {
            var _a;
            return (_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that received the notification. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** The ID of user that received the notification. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Certain properties of an OAuth client.
     *
     * @param data - L.OauthClientChildWebhookPayloadFragment response data
     */
    class OauthClientChildWebhookPayload {
        constructor(data) {
            this.id = data.id;
            this.name = data.name;
        }
    }
    /**
     * An organization. Organizations are root-level objects that contain user accounts and teams.
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationFragment response data
     */
    class Organization extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
            super(request);
            this.allowMembersToInvite = (_a = data.allowMembersToInvite) !== null && _a !== void 0 ? _a : undefined;
            this.allowedAuthServices = data.allowedAuthServices;
            this.allowedFileUploadContentTypes = (_b = data.allowedFileUploadContentTypes) !== null && _b !== void 0 ? _b : undefined;
            this.archivedAt = (_c = parseDate(data.archivedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.createdAt = (_d = parseDate(data.createdAt)) !== null && _d !== void 0 ? _d : new Date();
            this.createdIssueCount = data.createdIssueCount;
            this.customerCount = data.customerCount;
            this.customersConfiguration = data.customersConfiguration;
            this.customersEnabled = data.customersEnabled;
            this.deletionRequestedAt = (_e = parseDate(data.deletionRequestedAt)) !== null && _e !== void 0 ? _e : undefined;
            this.feedEnabled = data.feedEnabled;
            this.fiscalYearStartMonth = data.fiscalYearStartMonth;
            this.gitBranchFormat = (_f = data.gitBranchFormat) !== null && _f !== void 0 ? _f : undefined;
            this.gitLinkbackMessagesEnabled = data.gitLinkbackMessagesEnabled;
            this.gitPublicLinkbackMessagesEnabled = data.gitPublicLinkbackMessagesEnabled;
            this.hipaaComplianceEnabled = data.hipaaComplianceEnabled;
            this.id = data.id;
            this.initiativeUpdateReminderFrequencyInWeeks = (_g = data.initiativeUpdateReminderFrequencyInWeeks) !== null && _g !== void 0 ? _g : undefined;
            this.initiativeUpdateRemindersHour = data.initiativeUpdateRemindersHour;
            this.logoUrl = (_h = data.logoUrl) !== null && _h !== void 0 ? _h : undefined;
            this.name = data.name;
            this.periodUploadVolume = data.periodUploadVolume;
            this.previousUrlKeys = data.previousUrlKeys;
            this.projectUpdateReminderFrequencyInWeeks = (_j = data.projectUpdateReminderFrequencyInWeeks) !== null && _j !== void 0 ? _j : undefined;
            this.projectUpdateRemindersHour = data.projectUpdateRemindersHour;
            this.restrictLabelManagementToAdmins = (_k = data.restrictLabelManagementToAdmins) !== null && _k !== void 0 ? _k : undefined;
            this.restrictTeamCreationToAdmins = (_l = data.restrictTeamCreationToAdmins) !== null && _l !== void 0 ? _l : undefined;
            this.roadmapEnabled = data.roadmapEnabled;
            this.samlEnabled = data.samlEnabled;
            this.scimEnabled = data.scimEnabled;
            this.trialEndsAt = (_m = parseDate(data.trialEndsAt)) !== null && _m !== void 0 ? _m : undefined;
            this.updatedAt = (_o = parseDate(data.updatedAt)) !== null && _o !== void 0 ? _o : new Date();
            this.urlKey = data.urlKey;
            this.userCount = data.userCount;
            this.subscription = data.subscription ? new PaidSubscription(request, data.subscription) : undefined;
            this.ipRestrictions = data.ipRestrictions
                ? data.ipRestrictions.map(node => new OrganizationIpRestriction(request, node))
                : undefined;
            this.projectStatuses = data.projectStatuses.map(node => new ProjectStatus(request, node));
            this.defaultFeedSummarySchedule = (_p = data.defaultFeedSummarySchedule) !== null && _p !== void 0 ? _p : undefined;
            this.initiativeUpdateRemindersDay = data.initiativeUpdateRemindersDay;
            this.projectUpdateRemindersDay = data.projectUpdateRemindersDay;
            this.projectUpdatesReminderFrequency = data.projectUpdatesReminderFrequency;
            this.releaseChannel = data.releaseChannel;
            this.slaDayCount = data.slaDayCount;
        }
        /** Integrations associated with the organization. */
        integrations(variables) {
            return new Organization_IntegrationsQuery(this._request, variables).fetch(variables);
        }
        /** Labels associated with the organization. */
        labels(variables) {
            return new Organization_LabelsQuery(this._request, variables).fetch(variables);
        }
        /** Project labels associated with the organization. */
        projectLabels(variables) {
            return new Organization_ProjectLabelsQuery(this._request, variables).fetch(variables);
        }
        /** Teams associated with the organization. */
        teams(variables) {
            return new Organization_TeamsQuery(this._request, variables).fetch(variables);
        }
        /** Templates associated with the organization. */
        templates(variables) {
            return new Organization_TemplatesQuery(this._request, variables).fetch(variables);
        }
        /** Users associated with the organization. */
        users(variables) {
            return new Organization_UsersQuery(this._request, variables).fetch(variables);
        }
        /** Delete's an organization. Administrator privileges required. */
        delete(input) {
            return new DeleteOrganizationMutation(this._request).fetch(input);
        }
        /** Updates the user's organization. */
        update(input) {
            return new UpdateOrganizationMutation(this._request).fetch(input);
        }
    }
    /**
     * OrganizationAcceptedOrExpiredInviteDetailsPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationAcceptedOrExpiredInviteDetailsPayloadFragment response data
     */
    class OrganizationAcceptedOrExpiredInviteDetailsPayload extends Request {
        constructor(request, data) {
            super(request);
            this.status = data.status;
        }
    }
    /**
     * OrganizationCancelDeletePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationCancelDeletePayloadFragment response data
     */
    class OrganizationCancelDeletePayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * OrganizationDeletePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationDeletePayloadFragment response data
     */
    class OrganizationDeletePayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * Defines the use of a domain by an organization.
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationDomainFragment response data
     */
    class OrganizationDomain extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.claimed = (_b = data.claimed) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.disableOrganizationCreation = (_d = data.disableOrganizationCreation) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.name = data.name;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this.verificationEmail = (_f = data.verificationEmail) !== null && _f !== void 0 ? _f : undefined;
            this.verified = data.verified;
            this.identityProvider = data.identityProvider ? new IdentityProvider(request, data.identityProvider) : undefined;
            this.authType = data.authType;
            this._creator = (_g = data.creator) !== null && _g !== void 0 ? _g : undefined;
        }
        /** The user who added the domain. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who added the domain. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Deletes a domain. */
        delete() {
            return new DeleteOrganizationDomainMutation(this._request).fetch(this.id);
        }
    }
    /**
     * OrganizationExistsPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationExistsPayloadFragment response data
     */
    class OrganizationExistsPayload extends Request {
        constructor(request, data) {
            super(request);
            this.exists = data.exists;
            this.success = data.success;
        }
    }
    /**
     * An invitation to the organization that has been sent via email.
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationInviteFragment response data
     */
    class OrganizationInvite extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.acceptedAt = (_a = parseDate(data.acceptedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.archivedAt = (_b = parseDate(data.archivedAt)) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.email = data.email;
            this.expiresAt = (_d = parseDate(data.expiresAt)) !== null && _d !== void 0 ? _d : undefined;
            this.external = data.external;
            this.id = data.id;
            this.metadata = (_e = data.metadata) !== null && _e !== void 0 ? _e : undefined;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
            this.role = data.role;
            this._invitee = (_g = data.invitee) !== null && _g !== void 0 ? _g : undefined;
            this._inviter = data.inviter;
        }
        /** The user who has accepted the invite. Null, if the invite hasn't been accepted. */
        get invitee() {
            var _a, _b;
            return ((_a = this._invitee) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._invitee) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who has accepted the invite. null, if the invite hasn't been accepted. */
        get inviteeId() {
            var _a;
            return (_a = this._invitee) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user who created the invitation. */
        get inviter() {
            return new UserQuery(this._request).fetch(this._inviter.id);
        }
        /** The ID of user who created the invitation. */
        get inviterId() {
            var _a;
            return (_a = this._inviter) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The organization that the invite is associated with. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** Creates a new organization invite. */
        create(input) {
            return new CreateOrganizationInviteMutation(this._request).fetch(input);
        }
        /** Deletes an organization invite. */
        delete() {
            return new DeleteOrganizationInviteMutation(this._request).fetch(this.id);
        }
        /** Updates an organization invite. */
        update(input) {
            return new UpdateOrganizationInviteMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * OrganizationInviteConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this OrganizationInviteConnection model
     * @param data - OrganizationInviteConnection response data
     */
    class OrganizationInviteConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new OrganizationInvite(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * OrganizationInviteFullDetailsPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationInviteFullDetailsPayloadFragment response data
     */
    class OrganizationInviteFullDetailsPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.accepted = data.accepted;
            this.allowedAuthServices = data.allowedAuthServices;
            this.createdAt = (_a = parseDate(data.createdAt)) !== null && _a !== void 0 ? _a : new Date();
            this.email = data.email;
            this.expired = data.expired;
            this.inviter = data.inviter;
            this.organizationId = data.organizationId;
            this.organizationLogoUrl = (_b = data.organizationLogoUrl) !== null && _b !== void 0 ? _b : undefined;
            this.organizationName = data.organizationName;
            this.role = data.role;
            this.status = data.status;
        }
    }
    /**
     * OrganizationInvitePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationInvitePayloadFragment response data
     */
    class OrganizationInvitePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._organizationInvite = data.organizationInvite;
        }
        /** The organization invite that was created or updated. */
        get organizationInvite() {
            return new OrganizationInviteQuery(this._request).fetch(this._organizationInvite.id);
        }
        /** The ID of organization invite that was created or updated. */
        get organizationInviteId() {
            var _a;
            return (_a = this._organizationInvite) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * OrganizationIpRestriction model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationIpRestrictionFragment response data
     */
    class OrganizationIpRestriction extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.description = (_a = data.description) !== null && _a !== void 0 ? _a : undefined;
            this.enabled = data.enabled;
            this.range = data.range;
            this.type = data.type;
        }
    }
    /**
     * OrganizationMeta model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationMetaFragment response data
     */
    class OrganizationMeta extends Request {
        constructor(request, data) {
            super(request);
            this.allowedAuthServices = data.allowedAuthServices;
            this.region = data.region;
        }
    }
    /**
     * Organization origin for guidance rules.
     *
     * @param data - L.OrganizationOriginWebhookPayloadFragment response data
     */
    class OrganizationOriginWebhookPayload {
        constructor(data) {
            this.type = data.type;
        }
    }
    /**
     * OrganizationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationPayloadFragment response data
     */
    class OrganizationPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
        /** The organization that was created or updated. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
    }
    /**
     * OrganizationStartTrialPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.OrganizationStartTrialPayloadFragment response data
     */
    class OrganizationStartTrialPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * Generic notification payload.
     *
     * @param data - L.OtherNotificationWebhookPayloadFragment response data
     */
    class OtherNotificationWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            this.actorId = (_a = data.actorId) !== null && _a !== void 0 ? _a : undefined;
            this.archivedAt = (_b = data.archivedAt) !== null && _b !== void 0 ? _b : undefined;
            this.commentId = (_c = data.commentId) !== null && _c !== void 0 ? _c : undefined;
            this.createdAt = data.createdAt;
            this.documentId = (_d = data.documentId) !== null && _d !== void 0 ? _d : undefined;
            this.externalUserActorId = (_e = data.externalUserActorId) !== null && _e !== void 0 ? _e : undefined;
            this.id = data.id;
            this.issueId = (_f = data.issueId) !== null && _f !== void 0 ? _f : undefined;
            this.parentCommentId = (_g = data.parentCommentId) !== null && _g !== void 0 ? _g : undefined;
            this.projectId = (_h = data.projectId) !== null && _h !== void 0 ? _h : undefined;
            this.projectUpdateId = (_j = data.projectUpdateId) !== null && _j !== void 0 ? _j : undefined;
            this.reactionEmoji = (_k = data.reactionEmoji) !== null && _k !== void 0 ? _k : undefined;
            this.updatedAt = data.updatedAt;
            this.userId = data.userId;
            this.actor = data.actor ? new UserChildWebhookPayload(data.actor) : undefined;
            this.comment = data.comment ? new CommentChildWebhookPayload(data.comment) : undefined;
            this.document = data.document ? new DocumentChildWebhookPayload(data.document) : undefined;
            this.issue = data.issue ? new IssueWithDescriptionChildWebhookPayload(data.issue) : undefined;
            this.parentComment = data.parentComment ? new CommentChildWebhookPayload(data.parentComment) : undefined;
            this.project = data.project ? new ProjectChildWebhookPayload(data.project) : undefined;
            this.projectUpdate = data.projectUpdate ? new ProjectUpdateChildWebhookPayload(data.projectUpdate) : undefined;
            this.type = data.type;
        }
    }
    /**
     * PageInfo model
     *
     * @param request - function to call the graphql client
     * @param data - L.PageInfoFragment response data
     */
    class PageInfo extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.endCursor = (_a = data.endCursor) !== null && _a !== void 0 ? _a : undefined;
            this.hasNextPage = data.hasNextPage;
            this.hasPreviousPage = data.hasPreviousPage;
            this.startCursor = (_b = data.startCursor) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * The paid subscription of an organization.
     *
     * @param request - function to call the graphql client
     * @param data - L.PaidSubscriptionFragment response data
     */
    class PaidSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.cancelAt = (_b = parseDate(data.cancelAt)) !== null && _b !== void 0 ? _b : undefined;
            this.canceledAt = (_c = parseDate(data.canceledAt)) !== null && _c !== void 0 ? _c : undefined;
            this.collectionMethod = data.collectionMethod;
            this.createdAt = (_d = parseDate(data.createdAt)) !== null && _d !== void 0 ? _d : new Date();
            this.id = data.id;
            this.nextBillingAt = (_e = parseDate(data.nextBillingAt)) !== null && _e !== void 0 ? _e : undefined;
            this.pendingChangeType = (_f = data.pendingChangeType) !== null && _f !== void 0 ? _f : undefined;
            this.seats = data.seats;
            this.seatsMaximum = (_g = data.seatsMaximum) !== null && _g !== void 0 ? _g : undefined;
            this.seatsMinimum = (_h = data.seatsMinimum) !== null && _h !== void 0 ? _h : undefined;
            this.type = data.type;
            this.updatedAt = (_j = parseDate(data.updatedAt)) !== null && _j !== void 0 ? _j : new Date();
            this._creator = (_k = data.creator) !== null && _k !== void 0 ? _k : undefined;
        }
        /** The creator of the subscription. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of creator of the subscription. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The organization that the subscription is associated with. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
    }
    /**
     * PasskeyLoginStartResponse model
     *
     * @param request - function to call the graphql client
     * @param data - L.PasskeyLoginStartResponseFragment response data
     */
    class PasskeyLoginStartResponse extends Request {
        constructor(request, data) {
            super(request);
            this.options = data.options;
            this.success = data.success;
        }
    }
    /**
     * A post related notification.
     *
     * @param request - function to call the graphql client
     * @param data - L.PostNotificationFragment response data
     */
    class PostNotification extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.commentId = (_b = data.commentId) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.emailedAt = (_d = parseDate(data.emailedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.parentCommentId = (_e = data.parentCommentId) !== null && _e !== void 0 ? _e : undefined;
            this.postId = data.postId;
            this.reactionEmoji = (_f = data.reactionEmoji) !== null && _f !== void 0 ? _f : undefined;
            this.readAt = (_g = parseDate(data.readAt)) !== null && _g !== void 0 ? _g : undefined;
            this.snoozedUntilAt = (_h = parseDate(data.snoozedUntilAt)) !== null && _h !== void 0 ? _h : undefined;
            this.type = data.type;
            this.unsnoozedAt = (_j = parseDate(data.unsnoozedAt)) !== null && _j !== void 0 ? _j : undefined;
            this.updatedAt = (_k = parseDate(data.updatedAt)) !== null && _k !== void 0 ? _k : new Date();
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.category = data.category;
            this._actor = (_l = data.actor) !== null && _l !== void 0 ? _l : undefined;
            this._externalUserActor = (_m = data.externalUserActor) !== null && _m !== void 0 ? _m : undefined;
            this._user = data.user;
        }
        /** The user that caused the notification. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user that caused the notification. */
        get actorId() {
            var _a;
            return (_a = this._actor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The external user that caused the notification. */
        get externalUserActor() {
            var _a, _b;
            return ((_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserActor) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of external user that caused the notification. */
        get externalUserActorId() {
            var _a;
            return (_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that received the notification. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** The ID of user that received the notification. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * A project.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectFragment response data
     */
    class Project extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.autoArchivedAt = (_b = parseDate(data.autoArchivedAt)) !== null && _b !== void 0 ? _b : undefined;
            this.canceledAt = (_c = parseDate(data.canceledAt)) !== null && _c !== void 0 ? _c : undefined;
            this.color = data.color;
            this.completedAt = (_d = parseDate(data.completedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.completedIssueCountHistory = data.completedIssueCountHistory;
            this.completedScopeHistory = data.completedScopeHistory;
            this.content = (_e = data.content) !== null && _e !== void 0 ? _e : undefined;
            this.createdAt = (_f = parseDate(data.createdAt)) !== null && _f !== void 0 ? _f : new Date();
            this.description = data.description;
            this.healthUpdatedAt = (_g = parseDate(data.healthUpdatedAt)) !== null && _g !== void 0 ? _g : undefined;
            this.icon = (_h = data.icon) !== null && _h !== void 0 ? _h : undefined;
            this.id = data.id;
            this.inProgressScopeHistory = data.inProgressScopeHistory;
            this.issueCountHistory = data.issueCountHistory;
            this.labelIds = data.labelIds;
            this.name = data.name;
            this.priority = data.priority;
            this.priorityLabel = data.priorityLabel;
            this.prioritySortOrder = data.prioritySortOrder;
            this.progress = data.progress;
            this.projectUpdateRemindersPausedUntilAt = (_j = parseDate(data.projectUpdateRemindersPausedUntilAt)) !== null && _j !== void 0 ? _j : undefined;
            this.scope = data.scope;
            this.scopeHistory = data.scopeHistory;
            this.slackIssueComments = data.slackIssueComments;
            this.slackIssueStatuses = data.slackIssueStatuses;
            this.slackNewIssue = data.slackNewIssue;
            this.slugId = data.slugId;
            this.sortOrder = data.sortOrder;
            this.startDate = (_k = data.startDate) !== null && _k !== void 0 ? _k : undefined;
            this.startedAt = (_l = parseDate(data.startedAt)) !== null && _l !== void 0 ? _l : undefined;
            this.state = data.state;
            this.targetDate = (_m = data.targetDate) !== null && _m !== void 0 ? _m : undefined;
            this.trashed = (_o = data.trashed) !== null && _o !== void 0 ? _o : undefined;
            this.updateReminderFrequency = (_p = data.updateReminderFrequency) !== null && _p !== void 0 ? _p : undefined;
            this.updateReminderFrequencyInWeeks = (_q = data.updateReminderFrequencyInWeeks) !== null && _q !== void 0 ? _q : undefined;
            this.updateRemindersHour = (_r = data.updateRemindersHour) !== null && _r !== void 0 ? _r : undefined;
            this.updatedAt = (_s = parseDate(data.updatedAt)) !== null && _s !== void 0 ? _s : new Date();
            this.url = data.url;
            this.documentContent = data.documentContent ? new DocumentContent(request, data.documentContent) : undefined;
            this.frequencyResolution = data.frequencyResolution;
            this.health = (_t = data.health) !== null && _t !== void 0 ? _t : undefined;
            this.startDateResolution = (_u = data.startDateResolution) !== null && _u !== void 0 ? _u : undefined;
            this.targetDateResolution = (_v = data.targetDateResolution) !== null && _v !== void 0 ? _v : undefined;
            this.updateRemindersDay = (_w = data.updateRemindersDay) !== null && _w !== void 0 ? _w : undefined;
            this._convertedFromIssue = (_x = data.convertedFromIssue) !== null && _x !== void 0 ? _x : undefined;
            this._creator = (_y = data.creator) !== null && _y !== void 0 ? _y : undefined;
            this._favorite = (_z = data.favorite) !== null && _z !== void 0 ? _z : undefined;
            this._integrationsSettings = (_0 = data.integrationsSettings) !== null && _0 !== void 0 ? _0 : undefined;
            this._lastAppliedTemplate = (_1 = data.lastAppliedTemplate) !== null && _1 !== void 0 ? _1 : undefined;
            this._lastUpdate = (_2 = data.lastUpdate) !== null && _2 !== void 0 ? _2 : undefined;
            this._lead = (_3 = data.lead) !== null && _3 !== void 0 ? _3 : undefined;
            this._status = data.status;
        }
        /** The project was created based on this issue. */
        get convertedFromIssue() {
            var _a, _b;
            return ((_a = this._convertedFromIssue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._convertedFromIssue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of project was created based on this issue. */
        get convertedFromIssueId() {
            var _a;
            return (_a = this._convertedFromIssue) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user who created the project. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who created the project. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user's favorite associated with this project. */
        get favorite() {
            var _a, _b;
            return ((_a = this._favorite) === null || _a === void 0 ? void 0 : _a.id) ? new FavoriteQuery(this._request).fetch((_b = this._favorite) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user's favorite associated with this project. */
        get favoriteId() {
            var _a;
            return (_a = this._favorite) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Settings for all integrations associated with that project. */
        get integrationsSettings() {
            var _a, _b;
            return ((_a = this._integrationsSettings) === null || _a === void 0 ? void 0 : _a.id)
                ? new IntegrationsSettingsQuery(this._request).fetch((_b = this._integrationsSettings) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of settings for all integrations associated with that project. */
        get integrationsSettingsId() {
            var _a;
            return (_a = this._integrationsSettings) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The last template that was applied to this project. */
        get lastAppliedTemplate() {
            var _a, _b;
            return ((_a = this._lastAppliedTemplate) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._lastAppliedTemplate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of last template that was applied to this project. */
        get lastAppliedTemplateId() {
            var _a;
            return (_a = this._lastAppliedTemplate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The last project update posted for this project. */
        get lastUpdate() {
            var _a, _b;
            return ((_a = this._lastUpdate) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectUpdateQuery(this._request).fetch((_b = this._lastUpdate) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of last project update posted for this project. */
        get lastUpdateId() {
            var _a;
            return (_a = this._lastUpdate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The project lead. */
        get lead() {
            var _a, _b;
            return ((_a = this._lead) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._lead) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of project lead. */
        get leadId() {
            var _a;
            return (_a = this._lead) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The status that the project is associated with. */
        get status() {
            return new ProjectStatusQuery(this._request).fetch(this._status.id);
        }
        /** The ID of status that the project is associated with. */
        get statusId() {
            var _a;
            return (_a = this._status) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Comments associated with the project overview. */
        comments(variables) {
            return new Project_CommentsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Documents associated with the project. */
        documents(variables) {
            return new Project_DocumentsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** External links associated with the project. */
        externalLinks(variables) {
            return new Project_ExternalLinksQuery(this._request, this.id, variables).fetch(variables);
        }
        /** History entries associated with the project. */
        history(variables) {
            return new Project_HistoryQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Initiatives that this project belongs to. */
        initiatives(variables) {
            return new Project_InitiativesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Inverse relations associated with this project. */
        inverseRelations(variables) {
            return new Project_InverseRelationsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Issues associated with the project. */
        issues(variables) {
            return new Project_IssuesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Labels associated with this project. */
        labels(variables) {
            return new Project_LabelsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Users that are members of the project. */
        members(variables) {
            return new Project_MembersQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Customer needs associated with the project. */
        needs(variables) {
            return new Project_NeedsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Milestones associated with the project. */
        projectMilestones(variables) {
            return new Project_ProjectMilestonesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Project updates associated with the project. */
        projectUpdates(variables) {
            return new Project_ProjectUpdatesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Relations associated with this project. */
        relations(variables) {
            return new Project_RelationsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Teams associated with this project. */
        teams(variables) {
            return new Project_TeamsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Archives a project. */
        archive(variables) {
            return new ArchiveProjectMutation(this._request).fetch(this.id, variables);
        }
        /** Creates a new project. */
        create(input, variables) {
            return new CreateProjectMutation(this._request).fetch(input, variables);
        }
        /** Deletes (trashes) a project. */
        delete() {
            return new DeleteProjectMutation(this._request).fetch(this.id);
        }
        /** Unarchives a project. */
        unarchive() {
            return new UnarchiveProjectMutation(this._request).fetch(this.id);
        }
        /** Updates a project. */
        update() {
            return new ProjectUpdateQuery(this._request).fetch(this.id);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectArchivePayloadFragment response data
     */
    class ProjectArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of archived/unarchived entity. null if entity was deleted. */
        get entityId() {
            var _a;
            return (_a = this._entity) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Project attachment
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectAttachmentFragment response data
     */
    class ProjectAttachment extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.metadata = data.metadata;
            this.source = (_c = data.source) !== null && _c !== void 0 ? _c : undefined;
            this.sourceType = (_d = data.sourceType) !== null && _d !== void 0 ? _d : undefined;
            this.subtitle = (_e = data.subtitle) !== null && _e !== void 0 ? _e : undefined;
            this.title = data.title;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
            this.url = data.url;
            this._creator = (_g = data.creator) !== null && _g !== void 0 ? _g : undefined;
        }
        /** The creator of the attachment. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of creator of the attachment. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Certain properties of a project.
     *
     * @param data - L.ProjectChildWebhookPayloadFragment response data
     */
    class ProjectChildWebhookPayload {
        constructor(data) {
            this.id = data.id;
            this.name = data.name;
            this.url = data.url;
        }
    }
    /**
     * ProjectConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ProjectConnection model
     * @param data - ProjectConnection response data
     */
    class ProjectConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Project(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * ProjectFilterSuggestionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectFilterSuggestionPayloadFragment response data
     */
    class ProjectFilterSuggestionPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.filter = (_a = data.filter) !== null && _a !== void 0 ? _a : undefined;
            this.logId = (_b = data.logId) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * An history associated with a project.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectHistoryFragment response data
     */
    class ProjectHistory extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.entries = data.entries;
            this.id = data.id;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._project = data.project;
        }
        /** The project that the history is associated with. */
        get project() {
            return new ProjectQuery(this._request).fetch(this._project.id);
        }
        /** The ID of project that the history is associated with. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * ProjectHistoryConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ProjectHistoryConnection model
     * @param data - ProjectHistoryConnection response data
     */
    class ProjectHistoryConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new ProjectHistory(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * Labels that can be associated with projects.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectLabelFragment response data
     */
    class ProjectLabel extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = data.color;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.isGroup = data.isGroup;
            this.lastAppliedAt = (_d = parseDate(data.lastAppliedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.name = data.name;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this._creator = (_f = data.creator) !== null && _f !== void 0 ? _f : undefined;
            this._parent = (_g = data.parent) !== null && _g !== void 0 ? _g : undefined;
        }
        /** The user who created the label. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who created the label. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The parent label. */
        get parent() {
            var _a, _b;
            return ((_a = this._parent) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectLabelQuery(this._request).fetch((_b = this._parent) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of parent label. */
        get parentId() {
            var _a;
            return (_a = this._parent) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Children of the label. */
        children(variables) {
            return new ProjectLabel_ChildrenQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Projects associated with the label. */
        projects(variables) {
            return new ProjectLabel_ProjectsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Creates a new project label. */
        create(input) {
            return new CreateProjectLabelMutation(this._request).fetch(input);
        }
        /** Deletes a project label. */
        delete() {
            return new DeleteProjectLabelMutation(this._request).fetch(this.id);
        }
        /** Updates a project label. */
        update(input) {
            return new UpdateProjectLabelMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * ProjectLabelConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ProjectLabelConnection model
     * @param data - ProjectLabelConnection response data
     */
    class ProjectLabelConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new ProjectLabel(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * ProjectLabelPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectLabelPayloadFragment response data
     */
    class ProjectLabelPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._projectLabel = data.projectLabel;
        }
        /** The label that was created or updated. */
        get projectLabel() {
            return new ProjectLabelQuery(this._request).fetch(this._projectLabel.id);
        }
        /** The ID of label that was created or updated. */
        get projectLabelId() {
            var _a;
            return (_a = this._projectLabel) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * A milestone for a project.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectMilestoneFragment response data
     */
    class ProjectMilestone extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.name = data.name;
            this.progress = data.progress;
            this.sortOrder = data.sortOrder;
            this.targetDate = (_d = data.targetDate) !== null && _d !== void 0 ? _d : undefined;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this.documentContent = data.documentContent ? new DocumentContent(request, data.documentContent) : undefined;
            this.status = data.status;
            this._project = data.project;
        }
        /** The project of the milestone. */
        get project() {
            return new ProjectQuery(this._request).fetch(this._project.id);
        }
        /** The ID of project of the milestone. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Issues associated with the project milestone. */
        issues(variables) {
            return new ProjectMilestone_IssuesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Creates a new project milestone. */
        create(input) {
            return new CreateProjectMilestoneMutation(this._request).fetch(input);
        }
        /** Deletes a project milestone. */
        delete() {
            return new DeleteProjectMilestoneMutation(this._request).fetch(this.id);
        }
        /** Updates a project milestone. */
        update(input) {
            return new UpdateProjectMilestoneMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * Certain properties of a project milestone.
     *
     * @param data - L.ProjectMilestoneChildWebhookPayloadFragment response data
     */
    class ProjectMilestoneChildWebhookPayload {
        constructor(data) {
            this.id = data.id;
            this.name = data.name;
            this.targetDate = data.targetDate;
        }
    }
    /**
     * ProjectMilestoneConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ProjectMilestoneConnection model
     * @param data - ProjectMilestoneConnection response data
     */
    class ProjectMilestoneConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new ProjectMilestone(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * ProjectMilestoneMoveIssueToTeam model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectMilestoneMoveIssueToTeamFragment response data
     */
    class ProjectMilestoneMoveIssueToTeam extends Request {
        constructor(request, data) {
            super(request);
            this.issueId = data.issueId;
            this.teamId = data.teamId;
        }
    }
    /**
     * ProjectMilestoneMovePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectMilestoneMovePayloadFragment response data
     */
    class ProjectMilestoneMovePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.previousProjectTeamIds = data.previousProjectTeamIds
                ? new ProjectMilestoneMoveProjectTeams(request, data.previousProjectTeamIds)
                : undefined;
            this.previousIssueTeamIds = data.previousIssueTeamIds
                ? data.previousIssueTeamIds.map(node => new ProjectMilestoneMoveIssueToTeam(request, node))
                : undefined;
            this._projectMilestone = data.projectMilestone;
        }
        /** The project milestone that was created or updated. */
        get projectMilestone() {
            return new ProjectMilestoneQuery(this._request).fetch(this._projectMilestone.id);
        }
        /** The ID of project milestone that was created or updated. */
        get projectMilestoneId() {
            var _a;
            return (_a = this._projectMilestone) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * ProjectMilestoneMoveProjectTeams model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectMilestoneMoveProjectTeamsFragment response data
     */
    class ProjectMilestoneMoveProjectTeams extends Request {
        constructor(request, data) {
            super(request);
            this.projectId = data.projectId;
            this.teamIds = data.teamIds;
        }
    }
    /**
     * ProjectMilestonePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectMilestonePayloadFragment response data
     */
    class ProjectMilestonePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._projectMilestone = data.projectMilestone;
        }
        /** The project milestone that was created or updated. */
        get projectMilestone() {
            return new ProjectMilestoneQuery(this._request).fetch(this._projectMilestone.id);
        }
        /** The ID of project milestone that was created or updated. */
        get projectMilestoneId() {
            var _a;
            return (_a = this._projectMilestone) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * A project related notification.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectNotificationFragment response data
     */
    class ProjectNotification extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.commentId = (_b = data.commentId) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.emailedAt = (_d = parseDate(data.emailedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.parentCommentId = (_e = data.parentCommentId) !== null && _e !== void 0 ? _e : undefined;
            this.projectId = data.projectId;
            this.projectMilestoneId = (_f = data.projectMilestoneId) !== null && _f !== void 0 ? _f : undefined;
            this.projectUpdateId = (_g = data.projectUpdateId) !== null && _g !== void 0 ? _g : undefined;
            this.reactionEmoji = (_h = data.reactionEmoji) !== null && _h !== void 0 ? _h : undefined;
            this.readAt = (_j = parseDate(data.readAt)) !== null && _j !== void 0 ? _j : undefined;
            this.snoozedUntilAt = (_k = parseDate(data.snoozedUntilAt)) !== null && _k !== void 0 ? _k : undefined;
            this.type = data.type;
            this.unsnoozedAt = (_l = parseDate(data.unsnoozedAt)) !== null && _l !== void 0 ? _l : undefined;
            this.updatedAt = (_m = parseDate(data.updatedAt)) !== null && _m !== void 0 ? _m : new Date();
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.category = data.category;
            this._actor = (_o = data.actor) !== null && _o !== void 0 ? _o : undefined;
            this._comment = (_p = data.comment) !== null && _p !== void 0 ? _p : undefined;
            this._document = (_q = data.document) !== null && _q !== void 0 ? _q : undefined;
            this._externalUserActor = (_r = data.externalUserActor) !== null && _r !== void 0 ? _r : undefined;
            this._parentComment = (_s = data.parentComment) !== null && _s !== void 0 ? _s : undefined;
            this._project = data.project;
            this._projectUpdate = (_t = data.projectUpdate) !== null && _t !== void 0 ? _t : undefined;
            this._user = data.user;
        }
        /** The user that caused the notification. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user that caused the notification. */
        get actorId() {
            var _a;
            return (_a = this._actor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The comment related to the notification. */
        get comment() {
            var _a, _b;
            return ((_a = this._comment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._comment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The document related to the notification. */
        get document() {
            var _a, _b;
            return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.id) ? new DocumentQuery(this._request).fetch((_b = this._document) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of document related to the notification. */
        get documentId() {
            var _a;
            return (_a = this._document) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The external user that caused the notification. */
        get externalUserActor() {
            var _a, _b;
            return ((_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserActor) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of external user that caused the notification. */
        get externalUserActorId() {
            var _a;
            return (_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The parent comment related to the notification, if a notification is a reply comment notification. */
        get parentComment() {
            var _a, _b;
            return ((_a = this._parentComment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._parentComment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The project related to the notification. */
        get project() {
            return new ProjectQuery(this._request).fetch(this._project.id);
        }
        /** The project update related to the notification. */
        get projectUpdate() {
            var _a, _b;
            return ((_a = this._projectUpdate) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectUpdateQuery(this._request).fetch((_b = this._projectUpdate) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The user that received the notification. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** The ID of user that received the notification. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * A project notification subscription.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectNotificationSubscriptionFragment response data
     */
    class ProjectNotificationSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            super(request);
            this.active = data.active;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.notificationSubscriptionTypes = data.notificationSubscriptionTypes;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.contextViewType = (_d = data.contextViewType) !== null && _d !== void 0 ? _d : undefined;
            this.userContextViewType = (_e = data.userContextViewType) !== null && _e !== void 0 ? _e : undefined;
            this._customView = (_f = data.customView) !== null && _f !== void 0 ? _f : undefined;
            this._customer = (_g = data.customer) !== null && _g !== void 0 ? _g : undefined;
            this._cycle = (_h = data.cycle) !== null && _h !== void 0 ? _h : undefined;
            this._initiative = (_j = data.initiative) !== null && _j !== void 0 ? _j : undefined;
            this._label = (_k = data.label) !== null && _k !== void 0 ? _k : undefined;
            this._project = data.project;
            this._subscriber = data.subscriber;
            this._team = (_l = data.team) !== null && _l !== void 0 ? _l : undefined;
            this._user = (_m = data.user) !== null && _m !== void 0 ? _m : undefined;
        }
        /** The contextual custom view associated with the notification subscription. */
        get customView() {
            var _a, _b;
            return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual custom view associated with the notification subscription. */
        get customViewId() {
            var _a;
            return (_a = this._customView) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The customer associated with the notification subscription. */
        get customer() {
            var _a, _b;
            return ((_a = this._customer) === null || _a === void 0 ? void 0 : _a.id) ? new CustomerQuery(this._request).fetch((_b = this._customer) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of customer associated with the notification subscription. */
        get customerId() {
            var _a;
            return (_a = this._customer) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual cycle view associated with the notification subscription. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual cycle view associated with the notification subscription. */
        get cycleId() {
            var _a;
            return (_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual initiative view associated with the notification subscription. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual initiative view associated with the notification subscription. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual label view associated with the notification subscription. */
        get label() {
            var _a, _b;
            return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual label view associated with the notification subscription. */
        get labelId() {
            var _a;
            return (_a = this._label) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The project subscribed to. */
        get project() {
            return new ProjectQuery(this._request).fetch(this._project.id);
        }
        /** The ID of project subscribed to. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that subscribed to receive notifications. */
        get subscriber() {
            return new UserQuery(this._request).fetch(this._subscriber.id);
        }
        /** The ID of user that subscribed to receive notifications. */
        get subscriberId() {
            var _a;
            return (_a = this._subscriber) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team associated with the notification subscription. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of team associated with the notification subscription. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user view associated with the notification subscription. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user view associated with the notification subscription. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * ProjectPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectPayloadFragment response data
     */
    class ProjectPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._project = (_a = data.project) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The project that was created or updated. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of project that was created or updated. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * A relation between two projects.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectRelationFragment response data
     */
    class ProjectRelation extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.anchorType = data.anchorType;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.relatedAnchorType = data.relatedAnchorType;
            this.type = data.type;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._project = data.project;
            this._projectMilestone = (_d = data.projectMilestone) !== null && _d !== void 0 ? _d : undefined;
            this._relatedProject = data.relatedProject;
            this._relatedProjectMilestone = (_e = data.relatedProjectMilestone) !== null && _e !== void 0 ? _e : undefined;
            this._user = (_f = data.user) !== null && _f !== void 0 ? _f : undefined;
        }
        /** The project whose relationship is being described. */
        get project() {
            return new ProjectQuery(this._request).fetch(this._project.id);
        }
        /** The ID of project whose relationship is being described. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The milestone within the project whose relationship is being described. */
        get projectMilestone() {
            var _a, _b;
            return ((_a = this._projectMilestone) === null || _a === void 0 ? void 0 : _a.id)
                ? new ProjectMilestoneQuery(this._request).fetch((_b = this._projectMilestone) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of milestone within the project whose relationship is being described. */
        get projectMilestoneId() {
            var _a;
            return (_a = this._projectMilestone) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The related project. */
        get relatedProject() {
            return new ProjectQuery(this._request).fetch(this._relatedProject.id);
        }
        /** The ID of related project. */
        get relatedProjectId() {
            var _a;
            return (_a = this._relatedProject) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The milestone within the related project whose relationship is being described. */
        get relatedProjectMilestone() {
            var _a, _b;
            return ((_a = this._relatedProjectMilestone) === null || _a === void 0 ? void 0 : _a.id)
                ? new ProjectMilestoneQuery(this._request).fetch((_b = this._relatedProjectMilestone) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of milestone within the related project whose relationship is being described. */
        get relatedProjectMilestoneId() {
            var _a;
            return (_a = this._relatedProjectMilestone) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The last user who created or modified the relation. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of last user who created or modified the relation. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates a new project relation. */
        create(input) {
            return new CreateProjectRelationMutation(this._request).fetch(input);
        }
        /** Deletes a project relation. */
        delete() {
            return new DeleteProjectRelationMutation(this._request).fetch(this.id);
        }
        /** Updates a project relation. */
        update(input) {
            return new UpdateProjectRelationMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * ProjectRelationConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ProjectRelationConnection model
     * @param data - ProjectRelationConnection response data
     */
    class ProjectRelationConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new ProjectRelation(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * ProjectRelationPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectRelationPayloadFragment response data
     */
    class ProjectRelationPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._projectRelation = data.projectRelation;
        }
        /** The project relation that was created or updated. */
        get projectRelation() {
            return new ProjectRelationQuery(this._request).fetch(this._projectRelation.id);
        }
        /** The ID of project relation that was created or updated. */
        get projectRelationId() {
            var _a;
            return (_a = this._projectRelation) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * ProjectSearchPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectSearchPayloadFragment response data
     */
    class ProjectSearchPayload extends Request {
        constructor(request, data) {
            super(request);
            this.totalCount = data.totalCount;
            this.archivePayload = new ArchiveResponse(request, data.archivePayload);
            this.pageInfo = new PageInfo(request, data.pageInfo);
            this.nodes = data.nodes.map(node => new ProjectSearchResult(request, node));
        }
    }
    /**
     * ProjectSearchResult model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectSearchResultFragment response data
     */
    class ProjectSearchResult extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.autoArchivedAt = (_b = parseDate(data.autoArchivedAt)) !== null && _b !== void 0 ? _b : undefined;
            this.canceledAt = (_c = parseDate(data.canceledAt)) !== null && _c !== void 0 ? _c : undefined;
            this.color = data.color;
            this.completedAt = (_d = parseDate(data.completedAt)) !== null && _d !== void 0 ? _d : undefined;
            this.completedIssueCountHistory = data.completedIssueCountHistory;
            this.completedScopeHistory = data.completedScopeHistory;
            this.content = (_e = data.content) !== null && _e !== void 0 ? _e : undefined;
            this.createdAt = (_f = parseDate(data.createdAt)) !== null && _f !== void 0 ? _f : new Date();
            this.description = data.description;
            this.healthUpdatedAt = (_g = parseDate(data.healthUpdatedAt)) !== null && _g !== void 0 ? _g : undefined;
            this.icon = (_h = data.icon) !== null && _h !== void 0 ? _h : undefined;
            this.id = data.id;
            this.inProgressScopeHistory = data.inProgressScopeHistory;
            this.issueCountHistory = data.issueCountHistory;
            this.labelIds = data.labelIds;
            this.metadata = data.metadata;
            this.name = data.name;
            this.priority = data.priority;
            this.priorityLabel = data.priorityLabel;
            this.prioritySortOrder = data.prioritySortOrder;
            this.progress = data.progress;
            this.projectUpdateRemindersPausedUntilAt = (_j = parseDate(data.projectUpdateRemindersPausedUntilAt)) !== null && _j !== void 0 ? _j : undefined;
            this.scope = data.scope;
            this.scopeHistory = data.scopeHistory;
            this.slackIssueComments = data.slackIssueComments;
            this.slackIssueStatuses = data.slackIssueStatuses;
            this.slackNewIssue = data.slackNewIssue;
            this.slugId = data.slugId;
            this.sortOrder = data.sortOrder;
            this.startDate = (_k = data.startDate) !== null && _k !== void 0 ? _k : undefined;
            this.startedAt = (_l = parseDate(data.startedAt)) !== null && _l !== void 0 ? _l : undefined;
            this.state = data.state;
            this.targetDate = (_m = data.targetDate) !== null && _m !== void 0 ? _m : undefined;
            this.trashed = (_o = data.trashed) !== null && _o !== void 0 ? _o : undefined;
            this.updateReminderFrequency = (_p = data.updateReminderFrequency) !== null && _p !== void 0 ? _p : undefined;
            this.updateReminderFrequencyInWeeks = (_q = data.updateReminderFrequencyInWeeks) !== null && _q !== void 0 ? _q : undefined;
            this.updateRemindersHour = (_r = data.updateRemindersHour) !== null && _r !== void 0 ? _r : undefined;
            this.updatedAt = (_s = parseDate(data.updatedAt)) !== null && _s !== void 0 ? _s : new Date();
            this.url = data.url;
            this.documentContent = data.documentContent ? new DocumentContent(request, data.documentContent) : undefined;
            this.frequencyResolution = data.frequencyResolution;
            this.health = (_t = data.health) !== null && _t !== void 0 ? _t : undefined;
            this.startDateResolution = (_u = data.startDateResolution) !== null && _u !== void 0 ? _u : undefined;
            this.targetDateResolution = (_v = data.targetDateResolution) !== null && _v !== void 0 ? _v : undefined;
            this.updateRemindersDay = (_w = data.updateRemindersDay) !== null && _w !== void 0 ? _w : undefined;
            this._convertedFromIssue = (_x = data.convertedFromIssue) !== null && _x !== void 0 ? _x : undefined;
            this._creator = (_y = data.creator) !== null && _y !== void 0 ? _y : undefined;
            this._favorite = (_z = data.favorite) !== null && _z !== void 0 ? _z : undefined;
            this._integrationsSettings = (_0 = data.integrationsSettings) !== null && _0 !== void 0 ? _0 : undefined;
            this._lastAppliedTemplate = (_1 = data.lastAppliedTemplate) !== null && _1 !== void 0 ? _1 : undefined;
            this._lastUpdate = (_2 = data.lastUpdate) !== null && _2 !== void 0 ? _2 : undefined;
            this._lead = (_3 = data.lead) !== null && _3 !== void 0 ? _3 : undefined;
            this._status = data.status;
        }
        /** The project was created based on this issue. */
        get convertedFromIssue() {
            var _a, _b;
            return ((_a = this._convertedFromIssue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._convertedFromIssue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of project was created based on this issue. */
        get convertedFromIssueId() {
            var _a;
            return (_a = this._convertedFromIssue) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user who created the project. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who created the project. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user's favorite associated with this project. */
        get favorite() {
            var _a, _b;
            return ((_a = this._favorite) === null || _a === void 0 ? void 0 : _a.id) ? new FavoriteQuery(this._request).fetch((_b = this._favorite) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user's favorite associated with this project. */
        get favoriteId() {
            var _a;
            return (_a = this._favorite) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Settings for all integrations associated with that project. */
        get integrationsSettings() {
            var _a, _b;
            return ((_a = this._integrationsSettings) === null || _a === void 0 ? void 0 : _a.id)
                ? new IntegrationsSettingsQuery(this._request).fetch((_b = this._integrationsSettings) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of settings for all integrations associated with that project. */
        get integrationsSettingsId() {
            var _a;
            return (_a = this._integrationsSettings) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The last template that was applied to this project. */
        get lastAppliedTemplate() {
            var _a, _b;
            return ((_a = this._lastAppliedTemplate) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._lastAppliedTemplate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of last template that was applied to this project. */
        get lastAppliedTemplateId() {
            var _a;
            return (_a = this._lastAppliedTemplate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The last project update posted for this project. */
        get lastUpdate() {
            var _a, _b;
            return ((_a = this._lastUpdate) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectUpdateQuery(this._request).fetch((_b = this._lastUpdate) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of last project update posted for this project. */
        get lastUpdateId() {
            var _a;
            return (_a = this._lastUpdate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The project lead. */
        get lead() {
            var _a, _b;
            return ((_a = this._lead) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._lead) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of project lead. */
        get leadId() {
            var _a;
            return (_a = this._lead) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The status that the project is associated with. */
        get status() {
            return new ProjectStatusQuery(this._request).fetch(this._status.id);
        }
        /** The ID of status that the project is associated with. */
        get statusId() {
            var _a;
            return (_a = this._status) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * A project status.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectStatusFragment response data
     */
    class ProjectStatus extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = data.color;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.indefinite = data.indefinite;
            this.name = data.name;
            this.position = data.position;
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
            this.type = data.type;
        }
        /** Archives a project status. */
        archive() {
            return new ArchiveProjectStatusMutation(this._request).fetch(this.id);
        }
        /** Creates a new project status. */
        create(input) {
            return new CreateProjectStatusMutation(this._request).fetch(input);
        }
        /** Unarchives a project status. */
        unarchive() {
            return new UnarchiveProjectStatusMutation(this._request).fetch(this.id);
        }
        /** Updates a project status. */
        update(input) {
            return new UpdateProjectStatusMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectStatusArchivePayloadFragment response data
     */
    class ProjectStatusArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectStatusQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of archived/unarchived entity. null if entity was deleted. */
        get entityId() {
            var _a;
            return (_a = this._entity) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Certain properties of a project status.
     *
     * @param data - L.ProjectStatusChildWebhookPayloadFragment response data
     */
    class ProjectStatusChildWebhookPayload {
        constructor(data) {
            this.color = data.color;
            this.id = data.id;
            this.name = data.name;
            this.type = data.type;
        }
    }
    /**
     * ProjectStatusConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ProjectStatusConnection model
     * @param data - ProjectStatusConnection response data
     */
    class ProjectStatusConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new ProjectStatus(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * ProjectStatusCountPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectStatusCountPayloadFragment response data
     */
    class ProjectStatusCountPayload extends Request {
        constructor(request, data) {
            super(request);
            this.archivedTeamCount = data.archivedTeamCount;
            this.count = data.count;
            this.privateCount = data.privateCount;
        }
    }
    /**
     * ProjectStatusPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectStatusPayloadFragment response data
     */
    class ProjectStatusPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._status = data.status;
        }
        /** The project status that was created or updated. */
        get status() {
            return new ProjectStatusQuery(this._request).fetch(this._status.id);
        }
        /** The ID of project status that was created or updated. */
        get statusId() {
            var _a;
            return (_a = this._status) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * An update associated with a project.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectUpdateFragment response data
     */
    class ProjectUpdate extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.body = data.body;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.diff = (_c = data.diff) !== null && _c !== void 0 ? _c : undefined;
            this.diffMarkdown = (_d = data.diffMarkdown) !== null && _d !== void 0 ? _d : undefined;
            this.editedAt = (_e = parseDate(data.editedAt)) !== null && _e !== void 0 ? _e : undefined;
            this.id = data.id;
            this.isDiffHidden = data.isDiffHidden;
            this.isStale = data.isStale;
            this.reactionData = data.reactionData;
            this.slugId = data.slugId;
            this.updatedAt = (_f = parseDate(data.updatedAt)) !== null && _f !== void 0 ? _f : new Date();
            this.url = data.url;
            this.reactions = data.reactions.map(node => new Reaction(request, node));
            this.health = data.health;
            this._project = data.project;
            this._user = data.user;
        }
        /** The project that the update is associated with. */
        get project() {
            return new ProjectQuery(this._request).fetch(this._project.id);
        }
        /** The ID of project that the update is associated with. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user who wrote the update. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** The ID of user who wrote the update. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Comments associated with the project update. */
        comments(variables) {
            return new ProjectUpdate_CommentsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Archives a project update. */
        archive() {
            return new ArchiveProjectUpdateMutation(this._request).fetch(this.id);
        }
        /** Creates a new project update. */
        create(input) {
            return new CreateProjectUpdateMutation(this._request).fetch(input);
        }
        /** Deletes a project update. */
        delete() {
            return new DeleteProjectUpdateMutation(this._request).fetch(this.id);
        }
        /** Unarchives a project update. */
        unarchive() {
            return new UnarchiveProjectUpdateMutation(this._request).fetch(this.id);
        }
        /** Updates a project update. */
        update(input) {
            return new UpdateProjectUpdateMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectUpdateArchivePayloadFragment response data
     */
    class ProjectUpdateArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectUpdateQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of archived/unarchived entity. null if entity was deleted. */
        get entityId() {
            var _a;
            return (_a = this._entity) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Certain properties of a project update.
     *
     * @param data - L.ProjectUpdateChildWebhookPayloadFragment response data
     */
    class ProjectUpdateChildWebhookPayload {
        constructor(data) {
            this.body = data.body;
            this.id = data.id;
            this.userId = data.userId;
            this.project = new ProjectChildWebhookPayload(data.project);
        }
    }
    /**
     * ProjectUpdateConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this ProjectUpdateConnection model
     * @param data - ProjectUpdateConnection response data
     */
    class ProjectUpdateConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new ProjectUpdate(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * ProjectUpdatePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectUpdatePayloadFragment response data
     */
    class ProjectUpdatePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._projectUpdate = data.projectUpdate;
        }
        /** The project update that was created or updated. */
        get projectUpdate() {
            return new ProjectUpdateQuery(this._request).fetch(this._projectUpdate.id);
        }
        /** The ID of project update that was created or updated. */
        get projectUpdateId() {
            var _a;
            return (_a = this._projectUpdate) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * ProjectUpdateReminderPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ProjectUpdateReminderPayloadFragment response data
     */
    class ProjectUpdateReminderPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * Payload for a project update webhook.
     *
     * @param data - L.ProjectUpdateWebhookPayloadFragment response data
     */
    class ProjectUpdateWebhookPayload {
        constructor(data) {
            var _a, _b;
            this.archivedAt = (_a = data.archivedAt) !== null && _a !== void 0 ? _a : undefined;
            this.body = data.body;
            this.bodyData = data.bodyData;
            this.createdAt = data.createdAt;
            this.editedAt = data.editedAt;
            this.health = data.health;
            this.id = data.id;
            this.projectId = data.projectId;
            this.reactionData = data.reactionData;
            this.slugId = data.slugId;
            this.updatedAt = data.updatedAt;
            this.url = (_b = data.url) !== null && _b !== void 0 ? _b : undefined;
            this.userId = data.userId;
            this.project = new ProjectChildWebhookPayload(data.project);
            this.user = new UserChildWebhookPayload(data.user);
        }
    }
    /**
     * Payload for a project webhook.
     *
     * @param data - L.ProjectWebhookPayloadFragment response data
     */
    class ProjectWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
            this.archivedAt = (_a = data.archivedAt) !== null && _a !== void 0 ? _a : undefined;
            this.autoArchivedAt = (_b = data.autoArchivedAt) !== null && _b !== void 0 ? _b : undefined;
            this.canceledAt = (_c = data.canceledAt) !== null && _c !== void 0 ? _c : undefined;
            this.color = data.color;
            this.completedAt = (_d = data.completedAt) !== null && _d !== void 0 ? _d : undefined;
            this.completedIssueCountHistory = data.completedIssueCountHistory;
            this.completedScopeHistory = data.completedScopeHistory;
            this.content = (_e = data.content) !== null && _e !== void 0 ? _e : undefined;
            this.convertedFromIssueId = (_f = data.convertedFromIssueId) !== null && _f !== void 0 ? _f : undefined;
            this.createdAt = data.createdAt;
            this.creatorId = (_g = data.creatorId) !== null && _g !== void 0 ? _g : undefined;
            this.description = data.description;
            this.documentContentId = (_h = data.documentContentId) !== null && _h !== void 0 ? _h : undefined;
            this.health = (_j = data.health) !== null && _j !== void 0 ? _j : undefined;
            this.healthUpdatedAt = (_k = data.healthUpdatedAt) !== null && _k !== void 0 ? _k : undefined;
            this.icon = (_l = data.icon) !== null && _l !== void 0 ? _l : undefined;
            this.id = data.id;
            this.inProgressScopeHistory = data.inProgressScopeHistory;
            this.issueCountHistory = data.issueCountHistory;
            this.labelIds = data.labelIds;
            this.lastAppliedTemplateId = (_m = data.lastAppliedTemplateId) !== null && _m !== void 0 ? _m : undefined;
            this.lastUpdateId = (_o = data.lastUpdateId) !== null && _o !== void 0 ? _o : undefined;
            this.leadId = (_p = data.leadId) !== null && _p !== void 0 ? _p : undefined;
            this.memberIds = data.memberIds;
            this.name = data.name;
            this.priority = data.priority;
            this.prioritySortOrder = data.prioritySortOrder;
            this.projectUpdateRemindersPausedUntilAt = (_q = data.projectUpdateRemindersPausedUntilAt) !== null && _q !== void 0 ? _q : undefined;
            this.scopeHistory = data.scopeHistory;
            this.slugId = data.slugId;
            this.sortOrder = data.sortOrder;
            this.startDate = (_r = data.startDate) !== null && _r !== void 0 ? _r : undefined;
            this.startDateResolution = (_s = data.startDateResolution) !== null && _s !== void 0 ? _s : undefined;
            this.startedAt = (_t = data.startedAt) !== null && _t !== void 0 ? _t : undefined;
            this.statusId = data.statusId;
            this.targetDate = (_u = data.targetDate) !== null && _u !== void 0 ? _u : undefined;
            this.targetDateResolution = (_v = data.targetDateResolution) !== null && _v !== void 0 ? _v : undefined;
            this.teamIds = data.teamIds;
            this.trashed = (_w = data.trashed) !== null && _w !== void 0 ? _w : undefined;
            this.updatedAt = data.updatedAt;
            this.url = data.url;
            this.lead = data.lead ? new UserChildWebhookPayload(data.lead) : undefined;
            this.status = data.status ? new ProjectStatusChildWebhookPayload(data.status) : undefined;
            this.initiatives = data.initiatives
                ? data.initiatives.map(node => new InitiativeChildWebhookPayload(node))
                : undefined;
            this.milestones = data.milestones
                ? data.milestones.map(node => new ProjectMilestoneChildWebhookPayload(node))
                : undefined;
        }
    }
    /**
     * A pull request related notification.
     *
     * @param request - function to call the graphql client
     * @param data - L.PullRequestNotificationFragment response data
     */
    class PullRequestNotification extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.emailedAt = (_c = parseDate(data.emailedAt)) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.pullRequestCommentId = (_d = data.pullRequestCommentId) !== null && _d !== void 0 ? _d : undefined;
            this.pullRequestId = data.pullRequestId;
            this.readAt = (_e = parseDate(data.readAt)) !== null && _e !== void 0 ? _e : undefined;
            this.snoozedUntilAt = (_f = parseDate(data.snoozedUntilAt)) !== null && _f !== void 0 ? _f : undefined;
            this.type = data.type;
            this.unsnoozedAt = (_g = parseDate(data.unsnoozedAt)) !== null && _g !== void 0 ? _g : undefined;
            this.updatedAt = (_h = parseDate(data.updatedAt)) !== null && _h !== void 0 ? _h : new Date();
            this.botActor = data.botActor ? new ActorBot(request, data.botActor) : undefined;
            this.category = data.category;
            this._actor = (_j = data.actor) !== null && _j !== void 0 ? _j : undefined;
            this._externalUserActor = (_k = data.externalUserActor) !== null && _k !== void 0 ? _k : undefined;
            this._user = data.user;
        }
        /** The user that caused the notification. */
        get actor() {
            var _a, _b;
            return ((_a = this._actor) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._actor) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user that caused the notification. */
        get actorId() {
            var _a;
            return (_a = this._actor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The external user that caused the notification. */
        get externalUserActor() {
            var _a, _b;
            return ((_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id)
                ? new ExternalUserQuery(this._request).fetch((_b = this._externalUserActor) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of external user that caused the notification. */
        get externalUserActorId() {
            var _a;
            return (_a = this._externalUserActor) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that received the notification. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** The ID of user that received the notification. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * A user's web or mobile push notification subscription.
     *
     * @param request - function to call the graphql client
     * @param data - L.PushSubscriptionFragment response data
     */
    class PushSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
        }
        /** Creates a push subscription. */
        create(input) {
            return new CreatePushSubscriptionMutation(this._request).fetch(input);
        }
        /** Deletes a push subscription. */
        delete() {
            return new DeletePushSubscriptionMutation(this._request).fetch(this.id);
        }
    }
    /**
     * PushSubscriptionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.PushSubscriptionPayloadFragment response data
     */
    class PushSubscriptionPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.entity = new PushSubscription(request, data.entity);
        }
    }
    /**
     * PushSubscriptionTestPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.PushSubscriptionTestPayloadFragment response data
     */
    class PushSubscriptionTestPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * RateLimitPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.RateLimitPayloadFragment response data
     */
    class RateLimitPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.identifier = (_a = data.identifier) !== null && _a !== void 0 ? _a : undefined;
            this.kind = data.kind;
            this.limits = data.limits.map(node => new RateLimitResultPayload(request, node));
        }
    }
    /**
     * RateLimitResultPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.RateLimitResultPayloadFragment response data
     */
    class RateLimitResultPayload extends Request {
        constructor(request, data) {
            super(request);
            this.allowedAmount = data.allowedAmount;
            this.period = data.period;
            this.remainingAmount = data.remainingAmount;
            this.requestedAmount = data.requestedAmount;
            this.reset = data.reset;
            this.type = data.type;
        }
    }
    /**
     * A reaction associated with a comment or a project update.
     *
     * @param request - function to call the graphql client
     * @param data - L.ReactionFragment response data
     */
    class Reaction extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.emoji = data.emoji;
            this.id = data.id;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._comment = (_d = data.comment) !== null && _d !== void 0 ? _d : undefined;
            this._externalUser = (_e = data.externalUser) !== null && _e !== void 0 ? _e : undefined;
            this._initiativeUpdate = (_f = data.initiativeUpdate) !== null && _f !== void 0 ? _f : undefined;
            this._issue = (_g = data.issue) !== null && _g !== void 0 ? _g : undefined;
            this._projectUpdate = (_h = data.projectUpdate) !== null && _h !== void 0 ? _h : undefined;
            this._user = (_j = data.user) !== null && _j !== void 0 ? _j : undefined;
        }
        /** The comment that the reaction is associated with. */
        get comment() {
            var _a, _b;
            return ((_a = this._comment) === null || _a === void 0 ? void 0 : _a.id) ? new CommentQuery(this._request).fetch({ id: (_b = this._comment) === null || _b === void 0 ? void 0 : _b.id }) : undefined;
        }
        /** The ID of comment that the reaction is associated with. */
        get commentId() {
            var _a;
            return (_a = this._comment) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The external user that created the reaction. */
        get externalUser() {
            var _a, _b;
            return ((_a = this._externalUser) === null || _a === void 0 ? void 0 : _a.id) ? new ExternalUserQuery(this._request).fetch((_b = this._externalUser) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of external user that created the reaction. */
        get externalUserId() {
            var _a;
            return (_a = this._externalUser) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The initiative update that the reaction is associated with. */
        get initiativeUpdate() {
            var _a, _b;
            return ((_a = this._initiativeUpdate) === null || _a === void 0 ? void 0 : _a.id)
                ? new InitiativeUpdateQuery(this._request).fetch((_b = this._initiativeUpdate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of initiative update that the reaction is associated with. */
        get initiativeUpdateId() {
            var _a;
            return (_a = this._initiativeUpdate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The issue that the reaction is associated with. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of issue that the reaction is associated with. */
        get issueId() {
            var _a;
            return (_a = this._issue) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The project update that the reaction is associated with. */
        get projectUpdate() {
            var _a, _b;
            return ((_a = this._projectUpdate) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectUpdateQuery(this._request).fetch((_b = this._projectUpdate) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of project update that the reaction is associated with. */
        get projectUpdateId() {
            var _a;
            return (_a = this._projectUpdate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that created the reaction. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user that created the reaction. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates a new reaction. */
        create(input) {
            return new CreateReactionMutation(this._request).fetch(input);
        }
        /** Deletes a reaction. */
        delete() {
            return new DeleteReactionMutation(this._request).fetch(this.id);
        }
    }
    /**
     * ReactionPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ReactionPayloadFragment response data
     */
    class ReactionPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.reaction = new Reaction(request, data.reaction);
        }
    }
    /**
     * Payload for a reaction webhook.
     *
     * @param data - L.ReactionWebhookPayloadFragment response data
     */
    class ReactionWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            this.archivedAt = (_a = data.archivedAt) !== null && _a !== void 0 ? _a : undefined;
            this.commentId = (_b = data.commentId) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = data.createdAt;
            this.emoji = data.emoji;
            this.externalUserId = (_c = data.externalUserId) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.initiativeUpdateId = (_d = data.initiativeUpdateId) !== null && _d !== void 0 ? _d : undefined;
            this.issueId = (_e = data.issueId) !== null && _e !== void 0 ? _e : undefined;
            this.postId = (_f = data.postId) !== null && _f !== void 0 ? _f : undefined;
            this.projectUpdateId = (_g = data.projectUpdateId) !== null && _g !== void 0 ? _g : undefined;
            this.updatedAt = data.updatedAt;
            this.userId = (_h = data.userId) !== null && _h !== void 0 ? _h : undefined;
            this.comment = data.comment ? new CommentChildWebhookPayload(data.comment) : undefined;
            this.issue = data.issue ? new IssueChildWebhookPayload(data.issue) : undefined;
            this.projectUpdate = data.projectUpdate ? new ProjectUpdateChildWebhookPayload(data.projectUpdate) : undefined;
            this.user = data.user ? new UserChildWebhookPayload(data.user) : undefined;
        }
    }
    /**
     * [Deprecated] A roadmap for projects.
     *
     * @param request - function to call the graphql client
     * @param data - L.RoadmapFragment response data
     */
    class Roadmap extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = (_b = data.color) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.description = (_d = data.description) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.name = data.name;
            this.slugId = data.slugId;
            this.sortOrder = data.sortOrder;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this.url = data.url;
            this._creator = data.creator;
            this._owner = (_f = data.owner) !== null && _f !== void 0 ? _f : undefined;
        }
        /** The user who created the roadmap. */
        get creator() {
            return new UserQuery(this._request).fetch(this._creator.id);
        }
        /** The ID of user who created the roadmap. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The organization of the roadmap. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The user who owns the roadmap. */
        get owner() {
            var _a, _b;
            return ((_a = this._owner) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._owner) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who owns the roadmap. */
        get ownerId() {
            var _a;
            return (_a = this._owner) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Projects associated with the roadmap. */
        projects(variables) {
            return new Roadmap_ProjectsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Archives a roadmap. */
        archive() {
            return new ArchiveRoadmapMutation(this._request).fetch(this.id);
        }
        /** Creates a new roadmap. */
        create(input) {
            return new CreateRoadmapMutation(this._request).fetch(input);
        }
        /** Deletes a roadmap. */
        delete() {
            return new DeleteRoadmapMutation(this._request).fetch(this.id);
        }
        /** Unarchives a roadmap. */
        unarchive() {
            return new UnarchiveRoadmapMutation(this._request).fetch(this.id);
        }
        /** Updates a roadmap. */
        update(input) {
            return new UpdateRoadmapMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.RoadmapArchivePayloadFragment response data
     */
    class RoadmapArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new RoadmapQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of archived/unarchived entity. null if entity was deleted. */
        get entityId() {
            var _a;
            return (_a = this._entity) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * RoadmapConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this RoadmapConnection model
     * @param data - RoadmapConnection response data
     */
    class RoadmapConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Roadmap(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * RoadmapPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.RoadmapPayloadFragment response data
     */
    class RoadmapPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._roadmap = data.roadmap;
        }
        /** The roadmap that was created or updated. */
        get roadmap() {
            return new RoadmapQuery(this._request).fetch(this._roadmap.id);
        }
        /** The ID of roadmap that was created or updated. */
        get roadmapId() {
            var _a;
            return (_a = this._roadmap) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * [Deprecated] Join table between projects and roadmaps.
     *
     * @param request - function to call the graphql client
     * @param data - L.RoadmapToProjectFragment response data
     */
    class RoadmapToProject extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.sortOrder = data.sortOrder;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._project = data.project;
            this._roadmap = data.roadmap;
        }
        /** The project that the roadmap is associated with. */
        get project() {
            return new ProjectQuery(this._request).fetch(this._project.id);
        }
        /** The ID of project that the roadmap is associated with. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The roadmap that the project is associated with. */
        get roadmap() {
            return new RoadmapQuery(this._request).fetch(this._roadmap.id);
        }
        /** The ID of roadmap that the project is associated with. */
        get roadmapId() {
            var _a;
            return (_a = this._roadmap) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates a new roadmapToProject join. */
        create(input) {
            return new CreateRoadmapToProjectMutation(this._request).fetch(input);
        }
        /** Deletes a roadmapToProject. */
        delete() {
            return new DeleteRoadmapToProjectMutation(this._request).fetch(this.id);
        }
        /** Updates a roadmapToProject. */
        update(input) {
            return new UpdateRoadmapToProjectMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * RoadmapToProjectConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this RoadmapToProjectConnection model
     * @param data - RoadmapToProjectConnection response data
     */
    class RoadmapToProjectConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new RoadmapToProject(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * RoadmapToProjectPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.RoadmapToProjectPayloadFragment response data
     */
    class RoadmapToProjectPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._roadmapToProject = data.roadmapToProject;
        }
        /** The roadmapToProject that was created or updated. */
        get roadmapToProject() {
            return new RoadmapToProjectQuery(this._request).fetch(this._roadmapToProject.id);
        }
        /** The ID of roadmaptoproject that was created or updated. */
        get roadmapToProjectId() {
            var _a;
            return (_a = this._roadmapToProject) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Payload returned by semantic search.
     *
     * @param request - function to call the graphql client
     * @param data - L.SemanticSearchPayloadFragment response data
     */
    class SemanticSearchPayload extends Request {
        constructor(request, data) {
            super(request);
            this.enabled = data.enabled;
            this.results = data.results.map(node => new SemanticSearchResult(request, node));
        }
    }
    /**
     * A semantic search result reference.
     *
     * @param request - function to call the graphql client
     * @param data - L.SemanticSearchResultFragment response data
     */
    class SemanticSearchResult extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.id = data.id;
            this.type = data.type;
            this._document = (_a = data.document) !== null && _a !== void 0 ? _a : undefined;
            this._initiative = (_b = data.initiative) !== null && _b !== void 0 ? _b : undefined;
            this._issue = (_c = data.issue) !== null && _c !== void 0 ? _c : undefined;
            this._project = (_d = data.project) !== null && _d !== void 0 ? _d : undefined;
        }
        /** The document related to the semantic search result. */
        get document() {
            var _a, _b;
            return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.id) ? new DocumentQuery(this._request).fetch((_b = this._document) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of document related to the semantic search result. */
        get documentId() {
            var _a;
            return (_a = this._document) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The initiative related to the semantic search result. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of initiative related to the semantic search result. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The issue related to the semantic search result. */
        get issue() {
            var _a, _b;
            return ((_a = this._issue) === null || _a === void 0 ? void 0 : _a.id) ? new IssueQuery(this._request).fetch((_b = this._issue) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of issue related to the semantic search result. */
        get issueId() {
            var _a;
            return (_a = this._issue) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The project related to the semantic search result. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of project related to the semantic search result. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * SES domain identity used for sending emails from a custom domain.
     *
     * @param request - function to call the graphql client
     * @param data - L.SesDomainIdentityFragment response data
     */
    class SesDomainIdentity extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.canSendFromCustomDomain = data.canSendFromCustomDomain;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.domain = data.domain;
            this.id = data.id;
            this.region = data.region;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.dnsRecords = data.dnsRecords.map(node => new SesDomainIdentityDnsRecord(request, node));
            this._creator = (_d = data.creator) !== null && _d !== void 0 ? _d : undefined;
        }
        /** The user who created the SES domain identity. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who created the ses domain identity. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The organization of the SES domain identity. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
    }
    /**
     * A DNS record for a SES domain identity.
     *
     * @param request - function to call the graphql client
     * @param data - L.SesDomainIdentityDnsRecordFragment response data
     */
    class SesDomainIdentityDnsRecord extends Request {
        constructor(request, data) {
            super(request);
            this.content = data.content;
            this.isVerified = data.isVerified;
            this.name = data.name;
            this.type = data.type;
        }
    }
    /**
     * Tuple for mapping Slack channel IDs to names.
     *
     * @param request - function to call the graphql client
     * @param data - L.SlackAsksTeamSettingsFragment response data
     */
    class SlackAsksTeamSettings extends Request {
        constructor(request, data) {
            super(request);
            this.hasDefaultAsk = data.hasDefaultAsk;
            this.id = data.id;
        }
    }
    /**
     * SlackChannelConnectPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.SlackChannelConnectPayloadFragment response data
     */
    class SlackChannelConnectPayload extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.addBot = data.addBot;
            this.lastSyncId = data.lastSyncId;
            this.nudgeToConnectMainSlackIntegration = (_a = data.nudgeToConnectMainSlackIntegration) !== null && _a !== void 0 ? _a : undefined;
            this.nudgeToUpdateMainSlackIntegration = (_b = data.nudgeToUpdateMainSlackIntegration) !== null && _b !== void 0 ? _b : undefined;
            this.success = data.success;
            this._integration = (_c = data.integration) !== null && _c !== void 0 ? _c : undefined;
        }
        /** The integration that was created or updated. */
        get integration() {
            var _a, _b;
            return ((_a = this._integration) === null || _a === void 0 ? void 0 : _a.id) ? new IntegrationQuery(this._request).fetch((_b = this._integration) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of integration that was created or updated. */
        get integrationId() {
            var _a;
            return (_a = this._integration) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Object for mapping Slack channel IDs to names and other settings.
     *
     * @param request - function to call the graphql client
     * @param data - L.SlackChannelNameMappingFragment response data
     */
    class SlackChannelNameMapping extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            super(request);
            this.aiTitles = (_a = data.aiTitles) !== null && _a !== void 0 ? _a : undefined;
            this.autoCreateOnBotMention = (_b = data.autoCreateOnBotMention) !== null && _b !== void 0 ? _b : undefined;
            this.autoCreateOnEmoji = (_c = data.autoCreateOnEmoji) !== null && _c !== void 0 ? _c : undefined;
            this.autoCreateOnMessage = (_d = data.autoCreateOnMessage) !== null && _d !== void 0 ? _d : undefined;
            this.autoCreateTemplateId = (_e = data.autoCreateTemplateId) !== null && _e !== void 0 ? _e : undefined;
            this.botAdded = (_f = data.botAdded) !== null && _f !== void 0 ? _f : undefined;
            this.id = data.id;
            this.isPrivate = (_g = data.isPrivate) !== null && _g !== void 0 ? _g : undefined;
            this.isShared = (_h = data.isShared) !== null && _h !== void 0 ? _h : undefined;
            this.name = data.name;
            this.postAcceptedFromTriageUpdates = (_j = data.postAcceptedFromTriageUpdates) !== null && _j !== void 0 ? _j : undefined;
            this.postCancellationUpdates = (_k = data.postCancellationUpdates) !== null && _k !== void 0 ? _k : undefined;
            this.postCompletionUpdates = (_l = data.postCompletionUpdates) !== null && _l !== void 0 ? _l : undefined;
            this.teams = data.teams.map(node => new SlackAsksTeamSettings(request, node));
        }
    }
    /**
     * SsoUrlFromEmailResponse model
     *
     * @param request - function to call the graphql client
     * @param data - L.SsoUrlFromEmailResponseFragment response data
     */
    class SsoUrlFromEmailResponse extends Request {
        constructor(request, data) {
            super(request);
            this.samlSsoUrl = data.samlSsoUrl;
            this.success = data.success;
        }
    }
    /**
     * SuccessPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.SuccessPayloadFragment response data
     */
    class SuccessPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * SummaryPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.SummaryPayloadFragment response data
     */
    class SummaryPayload extends Request {
        constructor(request, data) {
            super(request);
            this.summary = data.summary;
        }
    }
    /**
     * A comment thread that is synced with an external source.
     *
     * @param request - function to call the graphql client
     * @param data - L.SyncedExternalThreadFragment response data
     */
    class SyncedExternalThread extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.displayName = (_a = data.displayName) !== null && _a !== void 0 ? _a : undefined;
            this.id = (_b = data.id) !== null && _b !== void 0 ? _b : undefined;
            this.isConnected = data.isConnected;
            this.isPersonalIntegrationConnected = data.isPersonalIntegrationConnected;
            this.isPersonalIntegrationRequired = data.isPersonalIntegrationRequired;
            this.name = (_c = data.name) !== null && _c !== void 0 ? _c : undefined;
            this.subType = (_d = data.subType) !== null && _d !== void 0 ? _d : undefined;
            this.type = data.type;
            this.url = (_e = data.url) !== null && _e !== void 0 ? _e : undefined;
        }
    }
    /**
     * An organizational unit that contains issues.
     *
     * @param request - function to call the graphql client
     * @param data - L.TeamFragment response data
     */
    class Team extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
            super(request);
            this.aiThreadSummariesEnabled = data.aiThreadSummariesEnabled;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.autoArchivePeriod = data.autoArchivePeriod;
            this.autoCloseChildIssues = (_b = data.autoCloseChildIssues) !== null && _b !== void 0 ? _b : undefined;
            this.autoCloseParentIssues = (_c = data.autoCloseParentIssues) !== null && _c !== void 0 ? _c : undefined;
            this.autoClosePeriod = (_d = data.autoClosePeriod) !== null && _d !== void 0 ? _d : undefined;
            this.autoCloseStateId = (_e = data.autoCloseStateId) !== null && _e !== void 0 ? _e : undefined;
            this.color = (_f = data.color) !== null && _f !== void 0 ? _f : undefined;
            this.createdAt = (_g = parseDate(data.createdAt)) !== null && _g !== void 0 ? _g : new Date();
            this.cycleCalenderUrl = data.cycleCalenderUrl;
            this.cycleCooldownTime = data.cycleCooldownTime;
            this.cycleDuration = data.cycleDuration;
            this.cycleIssueAutoAssignCompleted = data.cycleIssueAutoAssignCompleted;
            this.cycleIssueAutoAssignStarted = data.cycleIssueAutoAssignStarted;
            this.cycleLockToActive = data.cycleLockToActive;
            this.cycleStartDay = data.cycleStartDay;
            this.cyclesEnabled = data.cyclesEnabled;
            this.defaultIssueEstimate = data.defaultIssueEstimate;
            this.defaultTemplateForMembersId = (_h = data.defaultTemplateForMembersId) !== null && _h !== void 0 ? _h : undefined;
            this.defaultTemplateForNonMembersId = (_j = data.defaultTemplateForNonMembersId) !== null && _j !== void 0 ? _j : undefined;
            this.description = (_k = data.description) !== null && _k !== void 0 ? _k : undefined;
            this.displayName = data.displayName;
            this.groupIssueHistory = data.groupIssueHistory;
            this.icon = (_l = data.icon) !== null && _l !== void 0 ? _l : undefined;
            this.id = data.id;
            this.inheritIssueEstimation = data.inheritIssueEstimation;
            this.inheritWorkflowStatuses = data.inheritWorkflowStatuses;
            this.inviteHash = data.inviteHash;
            this.issueCount = data.issueCount;
            this.issueEstimationAllowZero = data.issueEstimationAllowZero;
            this.issueEstimationExtended = data.issueEstimationExtended;
            this.issueEstimationType = data.issueEstimationType;
            this.issueOrderingNoPriorityFirst = data.issueOrderingNoPriorityFirst;
            this.issueSortOrderDefaultToBottom = data.issueSortOrderDefaultToBottom;
            this.key = data.key;
            this.name = data.name;
            this.private = data.private;
            this.requirePriorityToLeaveTriage = data.requirePriorityToLeaveTriage;
            this.scimGroupName = (_m = data.scimGroupName) !== null && _m !== void 0 ? _m : undefined;
            this.scimManaged = data.scimManaged;
            this.setIssueSortOrderOnStateChange = data.setIssueSortOrderOnStateChange;
            this.slackIssueComments = data.slackIssueComments;
            this.slackIssueStatuses = data.slackIssueStatuses;
            this.slackNewIssue = data.slackNewIssue;
            this.timezone = data.timezone;
            this.triageEnabled = data.triageEnabled;
            this.upcomingCycleCount = data.upcomingCycleCount;
            this.updatedAt = (_o = parseDate(data.updatedAt)) !== null && _o !== void 0 ? _o : new Date();
            this._activeCycle = (_p = data.activeCycle) !== null && _p !== void 0 ? _p : undefined;
            this._defaultIssueState = (_q = data.defaultIssueState) !== null && _q !== void 0 ? _q : undefined;
            this._defaultProjectTemplate = (_r = data.defaultProjectTemplate) !== null && _r !== void 0 ? _r : undefined;
            this._defaultTemplateForMembers = (_s = data.defaultTemplateForMembers) !== null && _s !== void 0 ? _s : undefined;
            this._defaultTemplateForNonMembers = (_t = data.defaultTemplateForNonMembers) !== null && _t !== void 0 ? _t : undefined;
            this._draftWorkflowState = (_u = data.draftWorkflowState) !== null && _u !== void 0 ? _u : undefined;
            this._integrationsSettings = (_v = data.integrationsSettings) !== null && _v !== void 0 ? _v : undefined;
            this._markedAsDuplicateWorkflowState = (_w = data.markedAsDuplicateWorkflowState) !== null && _w !== void 0 ? _w : undefined;
            this._mergeWorkflowState = (_x = data.mergeWorkflowState) !== null && _x !== void 0 ? _x : undefined;
            this._mergeableWorkflowState = (_y = data.mergeableWorkflowState) !== null && _y !== void 0 ? _y : undefined;
            this._reviewWorkflowState = (_z = data.reviewWorkflowState) !== null && _z !== void 0 ? _z : undefined;
            this._startWorkflowState = (_0 = data.startWorkflowState) !== null && _0 !== void 0 ? _0 : undefined;
            this._triageIssueState = (_1 = data.triageIssueState) !== null && _1 !== void 0 ? _1 : undefined;
            this._triageResponsibility = (_2 = data.triageResponsibility) !== null && _2 !== void 0 ? _2 : undefined;
        }
        /** Team's currently active cycle. */
        get activeCycle() {
            var _a, _b;
            return ((_a = this._activeCycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._activeCycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of team's currently active cycle. */
        get activeCycleId() {
            var _a;
            return (_a = this._activeCycle) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The default workflow state into which issues are set when they are opened by team members. */
        get defaultIssueState() {
            var _a, _b;
            return ((_a = this._defaultIssueState) === null || _a === void 0 ? void 0 : _a.id)
                ? new WorkflowStateQuery(this._request).fetch((_b = this._defaultIssueState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of default workflow state into which issues are set when they are opened by team members. */
        get defaultIssueStateId() {
            var _a;
            return (_a = this._defaultIssueState) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The default template to use for new projects created for the team. */
        get defaultProjectTemplate() {
            var _a, _b;
            return ((_a = this._defaultProjectTemplate) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._defaultProjectTemplate) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of default template to use for new projects created for the team. */
        get defaultProjectTemplateId() {
            var _a;
            return (_a = this._defaultProjectTemplate) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The default template to use for new issues created by members of the team. */
        get defaultTemplateForMembers() {
            var _a, _b;
            return ((_a = this._defaultTemplateForMembers) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._defaultTemplateForMembers) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The default template to use for new issues created by non-members of the team. */
        get defaultTemplateForNonMembers() {
            var _a, _b;
            return ((_a = this._defaultTemplateForNonMembers) === null || _a === void 0 ? void 0 : _a.id)
                ? new TemplateQuery(this._request).fetch((_b = this._defaultTemplateForNonMembers) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The workflow state into which issues are moved when a PR has been opened as draft. */
        get draftWorkflowState() {
            var _a, _b;
            return ((_a = this._draftWorkflowState) === null || _a === void 0 ? void 0 : _a.id)
                ? new WorkflowStateQuery(this._request).fetch((_b = this._draftWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of workflow state into which issues are moved when a pr has been opened as draft. */
        get draftWorkflowStateId() {
            var _a;
            return (_a = this._draftWorkflowState) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Settings for all integrations associated with that team. */
        get integrationsSettings() {
            var _a, _b;
            return ((_a = this._integrationsSettings) === null || _a === void 0 ? void 0 : _a.id)
                ? new IntegrationsSettingsQuery(this._request).fetch((_b = this._integrationsSettings) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of settings for all integrations associated with that team. */
        get integrationsSettingsId() {
            var _a;
            return (_a = this._integrationsSettings) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The workflow state into which issues are moved when they are marked as a duplicate of another issue. Defaults to the first canceled state. */
        get markedAsDuplicateWorkflowState() {
            var _a, _b;
            return ((_a = this._markedAsDuplicateWorkflowState) === null || _a === void 0 ? void 0 : _a.id)
                ? new WorkflowStateQuery(this._request).fetch((_b = this._markedAsDuplicateWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of workflow state into which issues are moved when they are marked as a duplicate of another issue. defaults to the first canceled state. */
        get markedAsDuplicateWorkflowStateId() {
            var _a;
            return (_a = this._markedAsDuplicateWorkflowState) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The workflow state into which issues are moved when a PR has been merged. */
        get mergeWorkflowState() {
            var _a, _b;
            return ((_a = this._mergeWorkflowState) === null || _a === void 0 ? void 0 : _a.id)
                ? new WorkflowStateQuery(this._request).fetch((_b = this._mergeWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of workflow state into which issues are moved when a pr has been merged. */
        get mergeWorkflowStateId() {
            var _a;
            return (_a = this._mergeWorkflowState) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The workflow state into which issues are moved when a PR is ready to be merged. */
        get mergeableWorkflowState() {
            var _a, _b;
            return ((_a = this._mergeableWorkflowState) === null || _a === void 0 ? void 0 : _a.id)
                ? new WorkflowStateQuery(this._request).fetch((_b = this._mergeableWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of workflow state into which issues are moved when a pr is ready to be merged. */
        get mergeableWorkflowStateId() {
            var _a;
            return (_a = this._mergeableWorkflowState) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The organization that the team is associated with. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The workflow state into which issues are moved when a review has been requested for the PR. */
        get reviewWorkflowState() {
            var _a, _b;
            return ((_a = this._reviewWorkflowState) === null || _a === void 0 ? void 0 : _a.id)
                ? new WorkflowStateQuery(this._request).fetch((_b = this._reviewWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of workflow state into which issues are moved when a review has been requested for the pr. */
        get reviewWorkflowStateId() {
            var _a;
            return (_a = this._reviewWorkflowState) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The workflow state into which issues are moved when a PR has been opened. */
        get startWorkflowState() {
            var _a, _b;
            return ((_a = this._startWorkflowState) === null || _a === void 0 ? void 0 : _a.id)
                ? new WorkflowStateQuery(this._request).fetch((_b = this._startWorkflowState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of workflow state into which issues are moved when a pr has been opened. */
        get startWorkflowStateId() {
            var _a;
            return (_a = this._startWorkflowState) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The workflow state into which issues are set when they are opened by non-team members or integrations if triage is enabled. */
        get triageIssueState() {
            var _a, _b;
            return ((_a = this._triageIssueState) === null || _a === void 0 ? void 0 : _a.id)
                ? new WorkflowStateQuery(this._request).fetch((_b = this._triageIssueState) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of workflow state into which issues are set when they are opened by non-team members or integrations if triage is enabled. */
        get triageIssueStateId() {
            var _a;
            return (_a = this._triageIssueState) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Team's triage responsibility. */
        get triageResponsibility() {
            var _a, _b;
            return ((_a = this._triageResponsibility) === null || _a === void 0 ? void 0 : _a.id)
                ? new TriageResponsibilityQuery(this._request).fetch((_b = this._triageResponsibility) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of team's triage responsibility. */
        get triageResponsibilityId() {
            var _a;
            return (_a = this._triageResponsibility) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Cycles associated with the team. */
        cycles(variables) {
            return new Team_CyclesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** The Git automation states for the team. */
        gitAutomationStates(variables) {
            return new Team_GitAutomationStatesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Issues associated with the team. */
        issues(variables) {
            return new Team_IssuesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Labels associated with the team. */
        labels(variables) {
            return new Team_LabelsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Users who are members of this team. */
        members(variables) {
            return new Team_MembersQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Memberships associated with the team. For easier access of the same data, use `members` query. */
        memberships(variables) {
            return new Team_MembershipsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Projects associated with the team. */
        projects(variables) {
            return new Team_ProjectsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** The states that define the workflow associated with the team. */
        states(variables) {
            return new Team_StatesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Templates associated with the team. */
        templates(variables) {
            return new Team_TemplatesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Webhooks associated with the team. */
        webhooks(variables) {
            return new Team_WebhooksQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Creates a new team. The user who creates the team will automatically be added as a member to the newly created team. */
        create(input, variables) {
            return new CreateTeamMutation(this._request).fetch(input, variables);
        }
        /** Deletes a team. */
        delete() {
            return new DeleteTeamMutation(this._request).fetch(this.id);
        }
        /** Unarchives a team and cancels deletion. */
        unarchive() {
            return new UnarchiveTeamMutation(this._request).fetch(this.id);
        }
        /** Updates a team. */
        update(input, variables) {
            return new UpdateTeamMutation(this._request).fetch(this.id, input, variables);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.TeamArchivePayloadFragment response data
     */
    class TeamArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of archived/unarchived entity. null if entity was deleted. */
        get entityId() {
            var _a;
            return (_a = this._entity) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Certain properties of a team.
     *
     * @param data - L.TeamChildWebhookPayloadFragment response data
     */
    class TeamChildWebhookPayload {
        constructor(data) {
            this.id = data.id;
            this.key = data.key;
            this.name = data.name;
        }
    }
    /**
     * TeamConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this TeamConnection model
     * @param data - TeamConnection response data
     */
    class TeamConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Team(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * Defines the membership of a user to a team.
     *
     * @param request - function to call the graphql client
     * @param data - L.TeamMembershipFragment response data
     */
    class TeamMembership extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.owner = data.owner;
            this.sortOrder = data.sortOrder;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this._team = data.team;
            this._user = data.user;
        }
        /** The team that the membership is associated with. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
        /** The ID of team that the membership is associated with. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that the membership is associated with. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** The ID of user that the membership is associated with. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates a new team membership. */
        create(input) {
            return new CreateTeamMembershipMutation(this._request).fetch(input);
        }
        /** Deletes a team membership. */
        delete(variables) {
            return new DeleteTeamMembershipMutation(this._request).fetch(this.id, variables);
        }
        /** Updates a team membership. */
        update(input) {
            return new UpdateTeamMembershipMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * TeamMembershipConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this TeamMembershipConnection model
     * @param data - TeamMembershipConnection response data
     */
    class TeamMembershipConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new TeamMembership(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * TeamMembershipPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.TeamMembershipPayloadFragment response data
     */
    class TeamMembershipPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._teamMembership = (_a = data.teamMembership) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The team membership that was created or updated. */
        get teamMembership() {
            var _a, _b;
            return ((_a = this._teamMembership) === null || _a === void 0 ? void 0 : _a.id)
                ? new TeamMembershipQuery(this._request).fetch((_b = this._teamMembership) === null || _b === void 0 ? void 0 : _b.id)
                : undefined;
        }
        /** The ID of team membership that was created or updated. */
        get teamMembershipId() {
            var _a;
            return (_a = this._teamMembership) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * A team notification subscription.
     *
     * @param request - function to call the graphql client
     * @param data - L.TeamNotificationSubscriptionFragment response data
     */
    class TeamNotificationSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            super(request);
            this.active = data.active;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.notificationSubscriptionTypes = data.notificationSubscriptionTypes;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.contextViewType = (_d = data.contextViewType) !== null && _d !== void 0 ? _d : undefined;
            this.userContextViewType = (_e = data.userContextViewType) !== null && _e !== void 0 ? _e : undefined;
            this._customView = (_f = data.customView) !== null && _f !== void 0 ? _f : undefined;
            this._customer = (_g = data.customer) !== null && _g !== void 0 ? _g : undefined;
            this._cycle = (_h = data.cycle) !== null && _h !== void 0 ? _h : undefined;
            this._initiative = (_j = data.initiative) !== null && _j !== void 0 ? _j : undefined;
            this._label = (_k = data.label) !== null && _k !== void 0 ? _k : undefined;
            this._project = (_l = data.project) !== null && _l !== void 0 ? _l : undefined;
            this._subscriber = data.subscriber;
            this._team = data.team;
            this._user = (_m = data.user) !== null && _m !== void 0 ? _m : undefined;
        }
        /** The contextual custom view associated with the notification subscription. */
        get customView() {
            var _a, _b;
            return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual custom view associated with the notification subscription. */
        get customViewId() {
            var _a;
            return (_a = this._customView) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The customer associated with the notification subscription. */
        get customer() {
            var _a, _b;
            return ((_a = this._customer) === null || _a === void 0 ? void 0 : _a.id) ? new CustomerQuery(this._request).fetch((_b = this._customer) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of customer associated with the notification subscription. */
        get customerId() {
            var _a;
            return (_a = this._customer) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual cycle view associated with the notification subscription. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual cycle view associated with the notification subscription. */
        get cycleId() {
            var _a;
            return (_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual initiative view associated with the notification subscription. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual initiative view associated with the notification subscription. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual label view associated with the notification subscription. */
        get label() {
            var _a, _b;
            return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual label view associated with the notification subscription. */
        get labelId() {
            var _a;
            return (_a = this._label) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual project view associated with the notification subscription. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual project view associated with the notification subscription. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that subscribed to receive notifications. */
        get subscriber() {
            return new UserQuery(this._request).fetch(this._subscriber.id);
        }
        /** The ID of user that subscribed to receive notifications. */
        get subscriberId() {
            var _a;
            return (_a = this._subscriber) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team subscribed to. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
        /** The ID of team subscribed to. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user view associated with the notification subscription. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user view associated with the notification subscription. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Team origin for guidance rules.
     *
     * @param data - L.TeamOriginWebhookPayloadFragment response data
     */
    class TeamOriginWebhookPayload {
        constructor(data) {
            this.type = data.type;
            this.team = new TeamWithParentWebhookPayload(data.team);
        }
    }
    /**
     * TeamPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.TeamPayloadFragment response data
     */
    class TeamPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._team = (_a = data.team) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The team that was created or updated. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of team that was created or updated. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Team properties including parent information for guidance rules.
     *
     * @param data - L.TeamWithParentWebhookPayloadFragment response data
     */
    class TeamWithParentWebhookPayload {
        constructor(data) {
            var _a;
            this.displayName = data.displayName;
            this.id = data.id;
            this.key = data.key;
            this.name = data.name;
            this.parentId = (_a = data.parentId) !== null && _a !== void 0 ? _a : undefined;
        }
    }
    /**
     * A template object used for creating entities faster.
     *
     * @param request - function to call the graphql client
     * @param data - L.TemplateFragment response data
     */
    class Template extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.name = data.name;
            this.sortOrder = data.sortOrder;
            this.templateData = (_d = parseJson(data.templateData)) !== null && _d !== void 0 ? _d : {};
            this.type = data.type;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this._creator = (_f = data.creator) !== null && _f !== void 0 ? _f : undefined;
            this._inheritedFrom = (_g = data.inheritedFrom) !== null && _g !== void 0 ? _g : undefined;
            this._lastUpdatedBy = (_h = data.lastUpdatedBy) !== null && _h !== void 0 ? _h : undefined;
            this._team = (_j = data.team) !== null && _j !== void 0 ? _j : undefined;
        }
        /** The user who created the template. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who created the template. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The original template inherited from. */
        get inheritedFrom() {
            var _a, _b;
            return ((_a = this._inheritedFrom) === null || _a === void 0 ? void 0 : _a.id) ? new TemplateQuery(this._request).fetch((_b = this._inheritedFrom) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of original template inherited from. */
        get inheritedFromId() {
            var _a;
            return (_a = this._inheritedFrom) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user who last updated the template. */
        get lastUpdatedBy() {
            var _a, _b;
            return ((_a = this._lastUpdatedBy) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._lastUpdatedBy) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who last updated the template. */
        get lastUpdatedById() {
            var _a;
            return (_a = this._lastUpdatedBy) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The organization that the template is associated with. If null, the template is associated with a particular team. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** The team that the template is associated with. If null, the template is global to the workspace. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of team that the template is associated with. if null, the template is global to the workspace. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates a new template. */
        create(input) {
            return new CreateTemplateMutation(this._request).fetch(input);
        }
        /** Deletes a template. */
        delete() {
            return new DeleteTemplateMutation(this._request).fetch(this.id);
        }
        /** Updates an existing template. */
        update(input) {
            return new UpdateTemplateMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * TemplateConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this TemplateConnection model
     * @param data - TemplateConnection response data
     */
    class TemplateConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Template(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * TemplatePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.TemplatePayloadFragment response data
     */
    class TemplatePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._template = data.template;
        }
        /** The template that was created or updated. */
        get template() {
            return new TemplateQuery(this._request).fetch(this._template.id);
        }
        /** The ID of template that was created or updated. */
        get templateId() {
            var _a;
            return (_a = this._template) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * A time schedule.
     *
     * @param request - function to call the graphql client
     * @param data - L.TimeScheduleFragment response data
     */
    class TimeSchedule extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.externalId = (_c = data.externalId) !== null && _c !== void 0 ? _c : undefined;
            this.externalUrl = (_d = data.externalUrl) !== null && _d !== void 0 ? _d : undefined;
            this.id = data.id;
            this.name = data.name;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this.entries = data.entries ? data.entries.map(node => new TimeScheduleEntry(request, node)) : undefined;
            this._integration = (_f = data.integration) !== null && _f !== void 0 ? _f : undefined;
        }
        /** The identifier of the Linear integration populating the schedule. */
        get integration() {
            var _a, _b;
            return ((_a = this._integration) === null || _a === void 0 ? void 0 : _a.id) ? new IntegrationQuery(this._request).fetch((_b = this._integration) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of identifier of the linear integration populating the schedule. */
        get integrationId() {
            var _a;
            return (_a = this._integration) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The organization of the schedule. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** Creates a new time schedule. */
        create(input) {
            return new CreateTimeScheduleMutation(this._request).fetch(input);
        }
        /** Deletes a time schedule. */
        delete() {
            return new DeleteTimeScheduleMutation(this._request).fetch(this.id);
        }
        /** Updates a time schedule. */
        update(input) {
            return new UpdateTimeScheduleMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * TimeScheduleConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this TimeScheduleConnection model
     * @param data - TimeScheduleConnection response data
     */
    class TimeScheduleConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new TimeSchedule(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * TimeScheduleEntry model
     *
     * @param request - function to call the graphql client
     * @param data - L.TimeScheduleEntryFragment response data
     */
    class TimeScheduleEntry extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.endsAt = (_a = parseDate(data.endsAt)) !== null && _a !== void 0 ? _a : new Date();
            this.startsAt = (_b = parseDate(data.startsAt)) !== null && _b !== void 0 ? _b : new Date();
            this.userEmail = (_c = data.userEmail) !== null && _c !== void 0 ? _c : undefined;
            this.userId = (_d = data.userId) !== null && _d !== void 0 ? _d : undefined;
        }
    }
    /**
     * TimeSchedulePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.TimeSchedulePayloadFragment response data
     */
    class TimeSchedulePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._timeSchedule = data.timeSchedule;
        }
        get timeSchedule() {
            return new TimeScheduleQuery(this._request).fetch(this._timeSchedule.id);
        }
        /** The ID of timeSchedule */
        get timeScheduleId() {
            var _a;
            return (_a = this._timeSchedule) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * A team's triage responsibility.
     *
     * @param request - function to call the graphql client
     * @param data - L.TriageResponsibilityFragment response data
     */
    class TriageResponsibility extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.manualSelection = data.manualSelection
                ? new TriageResponsibilityManualSelection(request, data.manualSelection)
                : undefined;
            this.action = data.action;
            this._currentUser = (_d = data.currentUser) !== null && _d !== void 0 ? _d : undefined;
            this._team = data.team;
            this._timeSchedule = (_e = data.timeSchedule) !== null && _e !== void 0 ? _e : undefined;
        }
        /** The user currently responsible for triage. */
        get currentUser() {
            var _a, _b;
            return ((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._currentUser) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user currently responsible for triage. */
        get currentUserId() {
            var _a;
            return (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team to which the triage responsibility belongs to. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
        /** The ID of team to which the triage responsibility belongs to. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The time schedule used for scheduling. */
        get timeSchedule() {
            var _a, _b;
            return ((_a = this._timeSchedule) === null || _a === void 0 ? void 0 : _a.id) ? new TimeScheduleQuery(this._request).fetch((_b = this._timeSchedule) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of time schedule used for scheduling. */
        get timeScheduleId() {
            var _a;
            return (_a = this._timeSchedule) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates a new triage responsibility. */
        create(input) {
            return new CreateTriageResponsibilityMutation(this._request).fetch(input);
        }
        /** Deletes a triage responsibility. */
        delete() {
            return new DeleteTriageResponsibilityMutation(this._request).fetch(this.id);
        }
        /** Updates an existing triage responsibility. */
        update(input) {
            return new UpdateTriageResponsibilityMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * TriageResponsibilityConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this TriageResponsibilityConnection model
     * @param data - TriageResponsibilityConnection response data
     */
    class TriageResponsibilityConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new TriageResponsibility(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * TriageResponsibilityManualSelection model
     *
     * @param request - function to call the graphql client
     * @param data - L.TriageResponsibilityManualSelectionFragment response data
     */
    class TriageResponsibilityManualSelection extends Request {
        constructor(request, data) {
            super(request);
            this.userIds = data.userIds;
        }
    }
    /**
     * TriageResponsibilityPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.TriageResponsibilityPayloadFragment response data
     */
    class TriageResponsibilityPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._triageResponsibility = data.triageResponsibility;
        }
        get triageResponsibility() {
            return new TriageResponsibilityQuery(this._request).fetch(this._triageResponsibility.id);
        }
        /** The ID of triageResponsibility */
        get triageResponsibilityId() {
            var _a;
            return (_a = this._triageResponsibility) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Object representing Google Cloud upload policy, plus additional data.
     *
     * @param request - function to call the graphql client
     * @param data - L.UploadFileFragment response data
     */
    class UploadFile extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.assetUrl = data.assetUrl;
            this.contentType = data.contentType;
            this.filename = data.filename;
            this.metaData = (_a = data.metaData) !== null && _a !== void 0 ? _a : undefined;
            this.size = data.size;
            this.uploadUrl = data.uploadUrl;
            this.headers = data.headers.map(node => new UploadFileHeader(request, node));
        }
    }
    /**
     * UploadFileHeader model
     *
     * @param request - function to call the graphql client
     * @param data - L.UploadFileHeaderFragment response data
     */
    class UploadFileHeader extends Request {
        constructor(request, data) {
            super(request);
            this.key = data.key;
            this.value = data.value;
        }
    }
    /**
     * UploadPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.UploadPayloadFragment response data
     */
    class UploadPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.uploadFile = data.uploadFile ? new UploadFile(request, data.uploadFile) : undefined;
        }
    }
    /**
     * A user that has access to the the resources of an organization.
     *
     * @param request - function to call the graphql client
     * @param data - L.UserFragment response data
     */
    class User extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
            super(request);
            this.active = data.active;
            this.admin = data.admin;
            this.app = data.app;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.avatarBackgroundColor = data.avatarBackgroundColor;
            this.avatarUrl = (_b = data.avatarUrl) !== null && _b !== void 0 ? _b : undefined;
            this.calendarHash = (_c = data.calendarHash) !== null && _c !== void 0 ? _c : undefined;
            this.canAccessAnyPublicTeam = data.canAccessAnyPublicTeam;
            this.createdAt = (_d = parseDate(data.createdAt)) !== null && _d !== void 0 ? _d : new Date();
            this.createdIssueCount = data.createdIssueCount;
            this.description = (_e = data.description) !== null && _e !== void 0 ? _e : undefined;
            this.disableReason = (_f = data.disableReason) !== null && _f !== void 0 ? _f : undefined;
            this.displayName = data.displayName;
            this.email = data.email;
            this.gitHubUserId = (_g = data.gitHubUserId) !== null && _g !== void 0 ? _g : undefined;
            this.guest = data.guest;
            this.id = data.id;
            this.initials = data.initials;
            this.inviteHash = data.inviteHash;
            this.isAssignable = data.isAssignable;
            this.isMe = data.isMe;
            this.isMentionable = data.isMentionable;
            this.lastSeen = (_h = parseDate(data.lastSeen)) !== null && _h !== void 0 ? _h : undefined;
            this.name = data.name;
            this.statusEmoji = (_j = data.statusEmoji) !== null && _j !== void 0 ? _j : undefined;
            this.statusLabel = (_k = data.statusLabel) !== null && _k !== void 0 ? _k : undefined;
            this.statusUntilAt = (_l = parseDate(data.statusUntilAt)) !== null && _l !== void 0 ? _l : undefined;
            this.timezone = (_m = data.timezone) !== null && _m !== void 0 ? _m : undefined;
            this.updatedAt = (_o = parseDate(data.updatedAt)) !== null && _o !== void 0 ? _o : new Date();
            this.url = data.url;
        }
        /** Organization the user belongs to. */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /** Issues assigned to the user. */
        assignedIssues(variables) {
            return new User_AssignedIssuesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Issues created by the user. */
        createdIssues(variables) {
            return new User_CreatedIssuesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Issues delegated to this user. */
        delegatedIssues(variables) {
            return new User_DelegatedIssuesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** The user's drafts */
        drafts(variables) {
            return new User_DraftsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Memberships associated with the user. For easier access of the same data, use `teams` query. */
        teamMemberships(variables) {
            return new User_TeamMembershipsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Teams the user is part of. */
        teams(variables) {
            return new User_TeamsQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Suspends a user. Can only be called by an admin. */
        suspend() {
            return new SuspendUserMutation(this._request).fetch(this.id);
        }
        /** Un-suspends a user. Can only be called by an admin. */
        unsuspend() {
            return new UnsuspendUserMutation(this._request).fetch(this.id);
        }
        /** Updates a user. Only available to organization admins and the user themselves. */
        update(input) {
            return new UpdateUserMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * User actor payload for webhooks.
     *
     * @param data - L.UserActorWebhookPayloadFragment response data
     */
    class UserActorWebhookPayload {
        constructor(data) {
            var _a;
            this.avatarUrl = (_a = data.avatarUrl) !== null && _a !== void 0 ? _a : undefined;
            this.email = data.email;
            this.id = data.id;
            this.name = data.name;
            this.type = data.type;
            this.url = data.url;
        }
    }
    /**
     * UserAdminPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.UserAdminPayloadFragment response data
     */
    class UserAdminPayload extends Request {
        constructor(request, data) {
            super(request);
            this.success = data.success;
        }
    }
    /**
     * Public information of the OAuth application, plus whether the application has been authorized for the given scopes.
     *
     * @param request - function to call the graphql client
     * @param data - L.UserAuthorizedApplicationFragment response data
     */
    class UserAuthorizedApplication extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.approvalErrorCode = (_a = data.approvalErrorCode) !== null && _a !== void 0 ? _a : undefined;
            this.clientId = data.clientId;
            this.createdByLinear = data.createdByLinear;
            this.description = (_b = data.description) !== null && _b !== void 0 ? _b : undefined;
            this.developer = data.developer;
            this.developerUrl = data.developerUrl;
            this.id = data.id;
            this.imageUrl = (_c = data.imageUrl) !== null && _c !== void 0 ? _c : undefined;
            this.isAuthorized = data.isAuthorized;
            this.name = data.name;
            this.webhooksEnabled = data.webhooksEnabled;
        }
    }
    /**
     * Certain properties of a user.
     *
     * @param data - L.UserChildWebhookPayloadFragment response data
     */
    class UserChildWebhookPayload {
        constructor(data) {
            var _a;
            this.avatarUrl = (_a = data.avatarUrl) !== null && _a !== void 0 ? _a : undefined;
            this.email = data.email;
            this.id = data.id;
            this.name = data.name;
            this.url = data.url;
        }
    }
    /**
     * UserConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this UserConnection model
     * @param data - UserConnection response data
     */
    class UserConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new User(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * A user notification subscription.
     *
     * @param request - function to call the graphql client
     * @param data - L.UserNotificationSubscriptionFragment response data
     */
    class UserNotificationSubscription extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            super(request);
            this.active = data.active;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.notificationSubscriptionTypes = data.notificationSubscriptionTypes;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.contextViewType = (_d = data.contextViewType) !== null && _d !== void 0 ? _d : undefined;
            this.userContextViewType = (_e = data.userContextViewType) !== null && _e !== void 0 ? _e : undefined;
            this._customView = (_f = data.customView) !== null && _f !== void 0 ? _f : undefined;
            this._customer = (_g = data.customer) !== null && _g !== void 0 ? _g : undefined;
            this._cycle = (_h = data.cycle) !== null && _h !== void 0 ? _h : undefined;
            this._initiative = (_j = data.initiative) !== null && _j !== void 0 ? _j : undefined;
            this._label = (_k = data.label) !== null && _k !== void 0 ? _k : undefined;
            this._project = (_l = data.project) !== null && _l !== void 0 ? _l : undefined;
            this._subscriber = data.subscriber;
            this._team = (_m = data.team) !== null && _m !== void 0 ? _m : undefined;
            this._user = data.user;
        }
        /** The contextual custom view associated with the notification subscription. */
        get customView() {
            var _a, _b;
            return ((_a = this._customView) === null || _a === void 0 ? void 0 : _a.id) ? new CustomViewQuery(this._request).fetch((_b = this._customView) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual custom view associated with the notification subscription. */
        get customViewId() {
            var _a;
            return (_a = this._customView) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The customer associated with the notification subscription. */
        get customer() {
            var _a, _b;
            return ((_a = this._customer) === null || _a === void 0 ? void 0 : _a.id) ? new CustomerQuery(this._request).fetch((_b = this._customer) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of customer associated with the notification subscription. */
        get customerId() {
            var _a;
            return (_a = this._customer) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual cycle view associated with the notification subscription. */
        get cycle() {
            var _a, _b;
            return ((_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id) ? new CycleQuery(this._request).fetch((_b = this._cycle) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual cycle view associated with the notification subscription. */
        get cycleId() {
            var _a;
            return (_a = this._cycle) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual initiative view associated with the notification subscription. */
        get initiative() {
            var _a, _b;
            return ((_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id) ? new InitiativeQuery(this._request).fetch((_b = this._initiative) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual initiative view associated with the notification subscription. */
        get initiativeId() {
            var _a;
            return (_a = this._initiative) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual label view associated with the notification subscription. */
        get label() {
            var _a, _b;
            return ((_a = this._label) === null || _a === void 0 ? void 0 : _a.id) ? new IssueLabelQuery(this._request).fetch((_b = this._label) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual label view associated with the notification subscription. */
        get labelId() {
            var _a;
            return (_a = this._label) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The contextual project view associated with the notification subscription. */
        get project() {
            var _a, _b;
            return ((_a = this._project) === null || _a === void 0 ? void 0 : _a.id) ? new ProjectQuery(this._request).fetch((_b = this._project) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of contextual project view associated with the notification subscription. */
        get projectId() {
            var _a;
            return (_a = this._project) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user that subscribed to receive notifications. */
        get subscriber() {
            return new UserQuery(this._request).fetch(this._subscriber.id);
        }
        /** The ID of user that subscribed to receive notifications. */
        get subscriberId() {
            var _a;
            return (_a = this._subscriber) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team associated with the notification subscription. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of team associated with the notification subscription. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The user subscribed to. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** The ID of user subscribed to. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * UserPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.UserPayloadFragment response data
     */
    class UserPayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._user = (_a = data.user) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The user that was created or updated. */
        get user() {
            var _a, _b;
            return ((_a = this._user) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._user) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user that was created or updated. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * The settings of a user as a JSON object.
     *
     * @param request - function to call the graphql client
     * @param data - L.UserSettingsFragment response data
     */
    class UserSettings extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.autoAssignToSelf = data.autoAssignToSelf;
            this.calendarHash = (_b = data.calendarHash) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = (_c = parseDate(data.createdAt)) !== null && _c !== void 0 ? _c : new Date();
            this.id = data.id;
            this.showFullUserNames = data.showFullUserNames;
            this.subscribedToChangelog = data.subscribedToChangelog;
            this.subscribedToDPA = data.subscribedToDPA;
            this.subscribedToInviteAccepted = data.subscribedToInviteAccepted;
            this.subscribedToPrivacyLegalUpdates = data.subscribedToPrivacyLegalUpdates;
            this.unsubscribedFrom = data.unsubscribedFrom;
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
            this.notificationCategoryPreferences = new NotificationCategoryPreferences(request, data.notificationCategoryPreferences);
            this.notificationChannelPreferences = new NotificationChannelPreferences(request, data.notificationChannelPreferences);
            this.notificationDeliveryPreferences = new NotificationDeliveryPreferences(request, data.notificationDeliveryPreferences);
            this._user = data.user;
        }
        /** The user associated with these settings. */
        get user() {
            return new UserQuery(this._request).fetch(this._user.id);
        }
        /** The ID of user associated with these settings. */
        get userId() {
            var _a;
            return (_a = this._user) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Updates the user's settings. */
        update(input) {
            return new UpdateUserSettingsMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * UserSettingsFlagPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.UserSettingsFlagPayloadFragment response data
     */
    class UserSettingsFlagPayload extends Request {
        constructor(request, data) {
            var _a, _b;
            super(request);
            this.flag = (_a = data.flag) !== null && _a !== void 0 ? _a : undefined;
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.value = (_b = data.value) !== null && _b !== void 0 ? _b : undefined;
        }
    }
    /**
     * UserSettingsFlagsResetPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.UserSettingsFlagsResetPayloadFragment response data
     */
    class UserSettingsFlagsResetPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
    }
    /**
     * UserSettingsPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.UserSettingsPayloadFragment response data
     */
    class UserSettingsPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
        }
        /** The user's settings. */
        get userSettings() {
            return new UserSettingsQuery(this._request).fetch();
        }
    }
    /**
     * Payload for a user webhook.
     *
     * @param data - L.UserWebhookPayloadFragment response data
     */
    class UserWebhookPayload {
        constructor(data) {
            var _a, _b, _c, _d, _e;
            this.active = data.active;
            this.admin = data.admin;
            this.app = data.app;
            this.archivedAt = (_a = data.archivedAt) !== null && _a !== void 0 ? _a : undefined;
            this.avatarUrl = (_b = data.avatarUrl) !== null && _b !== void 0 ? _b : undefined;
            this.createdAt = data.createdAt;
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.disableReason = (_d = data.disableReason) !== null && _d !== void 0 ? _d : undefined;
            this.displayName = data.displayName;
            this.email = data.email;
            this.guest = data.guest;
            this.id = data.id;
            this.name = data.name;
            this.timezone = (_e = data.timezone) !== null && _e !== void 0 ? _e : undefined;
            this.updatedAt = data.updatedAt;
            this.url = data.url;
        }
    }
    /**
     * View preferences.
     *
     * @param request - function to call the graphql client
     * @param data - L.ViewPreferencesFragment response data
     */
    class ViewPreferences extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.id = data.id;
            this.type = data.type;
            this.updatedAt = (_c = parseDate(data.updatedAt)) !== null && _c !== void 0 ? _c : new Date();
            this.viewType = data.viewType;
            this.preferences = new ViewPreferencesValues(request, data.preferences);
        }
        /** Creates a new ViewPreferences object. */
        create(input) {
            return new CreateViewPreferencesMutation(this._request).fetch(input);
        }
        /** Deletes a ViewPreferences. */
        delete() {
            return new DeleteViewPreferencesMutation(this._request).fetch(this.id);
        }
        /** Updates an existing ViewPreferences object. */
        update(input) {
            return new UpdateViewPreferencesMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * ViewPreferencesPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.ViewPreferencesPayloadFragment response data
     */
    class ViewPreferencesPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this.viewPreferences = new ViewPreferences(request, data.viewPreferences);
        }
    }
    /**
     * ViewPreferencesValues model
     *
     * @param request - function to call the graphql client
     * @param data - L.ViewPreferencesValuesFragment response data
     */
    class ViewPreferencesValues extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.issueGrouping = (_a = data.issueGrouping) !== null && _a !== void 0 ? _a : undefined;
            this.showCompletedIssues = (_b = data.showCompletedIssues) !== null && _b !== void 0 ? _b : undefined;
            this.viewOrdering = (_c = data.viewOrdering) !== null && _c !== void 0 ? _c : undefined;
        }
    }
    /**
     * A webhook used to send HTTP notifications over data updates.
     *
     * @param request - function to call the graphql client
     * @param data - L.WebhookFragment response data
     */
    class Webhook extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            super(request);
            this.allPublicTeams = data.allPublicTeams;
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.enabled = data.enabled;
            this.id = data.id;
            this.label = (_c = data.label) !== null && _c !== void 0 ? _c : undefined;
            this.resourceTypes = data.resourceTypes;
            this.secret = (_d = data.secret) !== null && _d !== void 0 ? _d : undefined;
            this.updatedAt = (_e = parseDate(data.updatedAt)) !== null && _e !== void 0 ? _e : new Date();
            this.url = (_f = data.url) !== null && _f !== void 0 ? _f : undefined;
            this._creator = (_g = data.creator) !== null && _g !== void 0 ? _g : undefined;
            this._team = (_h = data.team) !== null && _h !== void 0 ? _h : undefined;
        }
        /** The user who created the webhook. */
        get creator() {
            var _a, _b;
            return ((_a = this._creator) === null || _a === void 0 ? void 0 : _a.id) ? new UserQuery(this._request).fetch((_b = this._creator) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of user who created the webhook. */
        get creatorId() {
            var _a;
            return (_a = this._creator) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team that the webhook is associated with. If null, the webhook is associated with all public teams of the organization or multiple teams. */
        get team() {
            var _a, _b;
            return ((_a = this._team) === null || _a === void 0 ? void 0 : _a.id) ? new TeamQuery(this._request).fetch((_b = this._team) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of team that the webhook is associated with. if null, the webhook is associated with all public teams of the organization or multiple teams. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Creates a new webhook. */
        create(input) {
            return new CreateWebhookMutation(this._request).fetch(input);
        }
        /** Deletes a Webhook. */
        delete() {
            return new DeleteWebhookMutation(this._request).fetch(this.id);
        }
        /** Updates an existing Webhook. */
        update(input) {
            return new UpdateWebhookMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * WebhookConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this WebhookConnection model
     * @param data - WebhookConnection response data
     */
    class WebhookConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new Webhook(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * Entity representing a webhook execution failure.
     *
     * @param request - function to call the graphql client
     * @param data - L.WebhookFailureEventFragment response data
     */
    class WebhookFailureEvent extends Request {
        constructor(request, data) {
            var _a, _b, _c;
            super(request);
            this.createdAt = (_a = parseDate(data.createdAt)) !== null && _a !== void 0 ? _a : new Date();
            this.executionId = data.executionId;
            this.httpStatus = (_b = data.httpStatus) !== null && _b !== void 0 ? _b : undefined;
            this.id = data.id;
            this.responseOrError = (_c = data.responseOrError) !== null && _c !== void 0 ? _c : undefined;
            this.url = data.url;
            this._webhook = data.webhook;
        }
        /** The webhook that this failure event is associated with. */
        get webhook() {
            return new WebhookQuery(this._request).fetch(this._webhook.id);
        }
        /** The ID of webhook that this failure event is associated with. */
        get webhookId() {
            var _a;
            return (_a = this._webhook) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * WebhookPayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.WebhookPayloadFragment response data
     */
    class WebhookPayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._webhook = data.webhook;
        }
        /** The webhook entity being mutated. */
        get webhook() {
            return new WebhookQuery(this._request).fetch(this._webhook.id);
        }
        /** The ID of webhook entity being mutated. */
        get webhookId() {
            var _a;
            return (_a = this._webhook) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * A state in a team workflow.
     *
     * @param request - function to call the graphql client
     * @param data - L.WorkflowStateFragment response data
     */
    class WorkflowState extends Request {
        constructor(request, data) {
            var _a, _b, _c, _d, _e;
            super(request);
            this.archivedAt = (_a = parseDate(data.archivedAt)) !== null && _a !== void 0 ? _a : undefined;
            this.color = data.color;
            this.createdAt = (_b = parseDate(data.createdAt)) !== null && _b !== void 0 ? _b : new Date();
            this.description = (_c = data.description) !== null && _c !== void 0 ? _c : undefined;
            this.id = data.id;
            this.name = data.name;
            this.position = data.position;
            this.type = data.type;
            this.updatedAt = (_d = parseDate(data.updatedAt)) !== null && _d !== void 0 ? _d : new Date();
            this._inheritedFrom = (_e = data.inheritedFrom) !== null && _e !== void 0 ? _e : undefined;
            this._team = data.team;
        }
        /** The state inherited from */
        get inheritedFrom() {
            var _a, _b;
            return ((_a = this._inheritedFrom) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._inheritedFrom) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of state inherited from */
        get inheritedFromId() {
            var _a;
            return (_a = this._inheritedFrom) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** The team to which this state belongs to. */
        get team() {
            return new TeamQuery(this._request).fetch(this._team.id);
        }
        /** The ID of team to which this state belongs to. */
        get teamId() {
            var _a;
            return (_a = this._team) === null || _a === void 0 ? void 0 : _a.id;
        }
        /** Issues belonging in this state. */
        issues(variables) {
            return new WorkflowState_IssuesQuery(this._request, this.id, variables).fetch(variables);
        }
        /** Archives a state. Only states with issues that have all been archived can be archived. */
        archive() {
            return new ArchiveWorkflowStateMutation(this._request).fetch(this.id);
        }
        /** Creates a new state, adding it to the workflow of a team. */
        create(input) {
            return new CreateWorkflowStateMutation(this._request).fetch(input);
        }
        /** Updates a state. */
        update(input) {
            return new UpdateWorkflowStateMutation(this._request).fetch(this.id, input);
        }
    }
    /**
     * A generic payload return from entity archive mutations.
     *
     * @param request - function to call the graphql client
     * @param data - L.WorkflowStateArchivePayloadFragment response data
     */
    class WorkflowStateArchivePayload extends Request {
        constructor(request, data) {
            var _a;
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._entity = (_a = data.entity) !== null && _a !== void 0 ? _a : undefined;
        }
        /** The archived/unarchived entity. Null if entity was deleted. */
        get entity() {
            var _a, _b;
            return ((_a = this._entity) === null || _a === void 0 ? void 0 : _a.id) ? new WorkflowStateQuery(this._request).fetch((_b = this._entity) === null || _b === void 0 ? void 0 : _b.id) : undefined;
        }
        /** The ID of archived/unarchived entity. null if entity was deleted. */
        get entityId() {
            var _a;
            return (_a = this._entity) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * Certain properties of a workflow state.
     *
     * @param data - L.WorkflowStateChildWebhookPayloadFragment response data
     */
    class WorkflowStateChildWebhookPayload {
        constructor(data) {
            this.color = data.color;
            this.id = data.id;
            this.name = data.name;
            this.type = data.type;
        }
    }
    /**
     * WorkflowStateConnection model
     *
     * @param request - function to call the graphql client
     * @param fetch - function to trigger a refetch of this WorkflowStateConnection model
     * @param data - WorkflowStateConnection response data
     */
    class WorkflowStateConnection extends Connection {
        constructor(request, fetch, data) {
            super(request, fetch, data.nodes.map(node => new WorkflowState(request, node)), new PageInfo(request, data.pageInfo));
        }
    }
    /**
     * WorkflowStatePayload model
     *
     * @param request - function to call the graphql client
     * @param data - L.WorkflowStatePayloadFragment response data
     */
    class WorkflowStatePayload extends Request {
        constructor(request, data) {
            super(request);
            this.lastSyncId = data.lastSyncId;
            this.success = data.success;
            this._workflowState = data.workflowState;
        }
        /** The state that was created or updated. */
        get workflowState() {
            return new WorkflowStateQuery(this._request).fetch(this._workflowState.id);
        }
        /** The ID of state that was created or updated. */
        get workflowStateId() {
            var _a;
            return (_a = this._workflowState) === null || _a === void 0 ? void 0 : _a.id;
        }
    }
    /**
     * A fetchable AdministrableTeams Query
     *
     * @param request - function to call the graphql client
     */
    class AdministrableTeamsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AdministrableTeams query and return a TeamConnection
         *
         * @param variables - variables to pass into the AdministrableTeamsQuery
         * @returns parsed response from AdministrableTeamsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AdministrableTeamsDocument, variables);
                const data = response.administrableTeams;
                return new TeamConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AgentActivities Query
     *
     * @param request - function to call the graphql client
     */
    class AgentActivitiesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AgentActivities query and return a AgentActivityConnection
         *
         * @param variables - variables to pass into the AgentActivitiesQuery
         * @returns parsed response from AgentActivitiesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AgentActivitiesDocument, variables);
                const data = response.agentActivities;
                return new AgentActivityConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AgentActivity Query
     *
     * @param request - function to call the graphql client
     */
    class AgentActivityQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AgentActivity query and return a AgentActivity
         *
         * @param id - required id to pass to agentActivity
         * @returns parsed response from AgentActivityQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AgentActivityDocument, {
                    id,
                });
                const data = response.agentActivity;
                return new AgentActivity(this._request, data);
            });
        }
    }
    /**
     * A fetchable AgentSession Query
     *
     * @param request - function to call the graphql client
     */
    class AgentSessionQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AgentSession query and return a AgentSession
         *
         * @param id - required id to pass to agentSession
         * @returns parsed response from AgentSessionQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AgentSessionDocument, {
                    id,
                });
                const data = response.agentSession;
                return new AgentSession(this._request, data);
            });
        }
    }
    /**
     * A fetchable AgentSessions Query
     *
     * @param request - function to call the graphql client
     */
    class AgentSessionsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AgentSessions query and return a AgentSessionConnection
         *
         * @param variables - variables to pass into the AgentSessionsQuery
         * @returns parsed response from AgentSessionsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AgentSessionsDocument, variables);
                const data = response.agentSessions;
                return new AgentSessionConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable ApiKeys Query
     *
     * @param request - function to call the graphql client
     */
    class ApiKeysQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ApiKeys query and return a ApiKeyConnection
         *
         * @param variables - variables to pass into the ApiKeysQuery
         * @returns parsed response from ApiKeysQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ApiKeysDocument, variables);
                const data = response.apiKeys;
                return new ApiKeyConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable ApplicationInfo Query
     *
     * @param request - function to call the graphql client
     */
    class ApplicationInfoQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ApplicationInfo query and return a Application
         *
         * @param clientId - required clientId to pass to applicationInfo
         * @returns parsed response from ApplicationInfoQuery
         */
        fetch(clientId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ApplicationInfoDocument, {
                    clientId,
                });
                const data = response.applicationInfo;
                return new Application(this._request, data);
            });
        }
    }
    /**
     * A fetchable ApplicationWithAuthorization Query
     *
     * @param request - function to call the graphql client
     */
    class ApplicationWithAuthorizationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ApplicationWithAuthorization query and return a UserAuthorizedApplication
         *
         * @param clientId - required clientId to pass to applicationWithAuthorization
         * @param scope - required scope to pass to applicationWithAuthorization
         * @param variables - variables without 'clientId', 'scope' to pass into the ApplicationWithAuthorizationQuery
         * @returns parsed response from ApplicationWithAuthorizationQuery
         */
        fetch(clientId, scope, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ApplicationWithAuthorizationDocument, Object.assign({ clientId,
                    scope }, variables));
                const data = response.applicationWithAuthorization;
                return new UserAuthorizedApplication(this._request, data);
            });
        }
    }
    /**
     * A fetchable Attachment Query
     *
     * @param request - function to call the graphql client
     */
    class AttachmentQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Attachment query and return a Attachment
         *
         * @param id - required id to pass to attachment
         * @returns parsed response from AttachmentQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentDocument, {
                    id,
                });
                const data = response.attachment;
                return new Attachment(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue Query
     *
     * @param request - function to call the graphql client
     */
    class AttachmentIssueQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentIssue query and return a Issue
         *
         * @param id - required id to pass to attachmentIssue
         * @returns parsed response from AttachmentIssueQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssueDocument, {
                    id,
                });
                const data = response.attachmentIssue;
                return new Issue(this._request, data);
            });
        }
    }
    /**
     * A fetchable Attachments Query
     *
     * @param request - function to call the graphql client
     */
    class AttachmentsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Attachments query and return a AttachmentConnection
         *
         * @param variables - variables to pass into the AttachmentsQuery
         * @returns parsed response from AttachmentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentsDocument, variables);
                const data = response.attachments;
                return new AttachmentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentsForUrl Query
     *
     * @param request - function to call the graphql client
     */
    class AttachmentsForUrlQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentsForUrl query and return a AttachmentConnection
         *
         * @param url - required url to pass to attachmentsForURL
         * @param variables - variables without 'url' to pass into the AttachmentsForUrlQuery
         * @returns parsed response from AttachmentsForUrlQuery
         */
        fetch(url, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentsForUrlDocument, Object.assign({ url }, variables));
                const data = response.attachmentsForURL;
                return new AttachmentConnection(this._request, connection => this.fetch(url, defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AuditEntries Query
     *
     * @param request - function to call the graphql client
     */
    class AuditEntriesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AuditEntries query and return a AuditEntryConnection
         *
         * @param variables - variables to pass into the AuditEntriesQuery
         * @returns parsed response from AuditEntriesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AuditEntriesDocument, variables);
                const data = response.auditEntries;
                return new AuditEntryConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AuditEntryTypes Query
     *
     * @param request - function to call the graphql client
     */
    class AuditEntryTypesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AuditEntryTypes query and return a AuditEntryType list
         *
         * @returns parsed response from AuditEntryTypesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AuditEntryTypesDocument, {});
                const data = response.auditEntryTypes;
                return data.map(node => {
                    return new AuditEntryType(this._request, node);
                });
            });
        }
    }
    /**
     * A fetchable AuthenticationSessions Query
     *
     * @param request - function to call the graphql client
     */
    class AuthenticationSessionsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AuthenticationSessions query and return a AuthenticationSessionResponse list
         *
         * @returns parsed response from AuthenticationSessionsQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AuthenticationSessionsDocument, {});
                const data = response.authenticationSessions;
                return data.map(node => {
                    return new AuthenticationSessionResponse(this._request, node);
                });
            });
        }
    }
    /**
     * A fetchable AvailableUsers Query
     *
     * @param request - function to call the graphql client
     */
    class AvailableUsersQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AvailableUsers query and return a AuthResolverResponse
         *
         * @returns parsed response from AvailableUsersQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AvailableUsersDocument, {});
                const data = response.availableUsers;
                return new AuthResolverResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable Comment Query
     *
     * @param request - function to call the graphql client
     */
    class CommentQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Comment query and return a Comment
         *
         * @param variables - variables to pass into the CommentQuery
         * @returns parsed response from CommentQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CommentDocument, variables);
                const data = response.comment;
                return new Comment(this._request, data);
            });
        }
    }
    /**
     * A fetchable Comments Query
     *
     * @param request - function to call the graphql client
     */
    class CommentsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Comments query and return a CommentConnection
         *
         * @param variables - variables to pass into the CommentsQuery
         * @returns parsed response from CommentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CommentsDocument, variables);
                const data = response.comments;
                return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable CustomView Query
     *
     * @param request - function to call the graphql client
     */
    class CustomViewQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomView query and return a CustomView
         *
         * @param id - required id to pass to customView
         * @returns parsed response from CustomViewQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomViewDocument, {
                    id,
                });
                const data = response.customView;
                return new CustomView(this._request, data);
            });
        }
    }
    /**
     * A fetchable CustomViewHasSubscribers Query
     *
     * @param request - function to call the graphql client
     */
    class CustomViewHasSubscribersQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomViewHasSubscribers query and return a CustomViewHasSubscribersPayload
         *
         * @param id - required id to pass to customViewHasSubscribers
         * @returns parsed response from CustomViewHasSubscribersQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomViewHasSubscribersDocument, {
                    id,
                });
                const data = response.customViewHasSubscribers;
                return new CustomViewHasSubscribersPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CustomViews Query
     *
     * @param request - function to call the graphql client
     */
    class CustomViewsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomViews query and return a CustomViewConnection
         *
         * @param variables - variables to pass into the CustomViewsQuery
         * @returns parsed response from CustomViewsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomViewsDocument, variables);
                const data = response.customViews;
                return new CustomViewConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Customer Query
     *
     * @param request - function to call the graphql client
     */
    class CustomerQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Customer query and return a Customer
         *
         * @param id - required id to pass to customer
         * @returns parsed response from CustomerQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomerDocument, {
                    id,
                });
                const data = response.customer;
                return new Customer(this._request, data);
            });
        }
    }
    /**
     * A fetchable CustomerNeed Query
     *
     * @param request - function to call the graphql client
     */
    class CustomerNeedQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomerNeed query and return a CustomerNeed
         *
         * @param variables - variables to pass into the CustomerNeedQuery
         * @returns parsed response from CustomerNeedQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomerNeedDocument, variables);
                const data = response.customerNeed;
                return new CustomerNeed(this._request, data);
            });
        }
    }
    /**
     * A fetchable CustomerNeeds Query
     *
     * @param request - function to call the graphql client
     */
    class CustomerNeedsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomerNeeds query and return a CustomerNeedConnection
         *
         * @param variables - variables to pass into the CustomerNeedsQuery
         * @returns parsed response from CustomerNeedsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomerNeedsDocument, variables);
                const data = response.customerNeeds;
                return new CustomerNeedConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable CustomerStatus Query
     *
     * @param request - function to call the graphql client
     */
    class CustomerStatusQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomerStatus query and return a CustomerStatus
         *
         * @param id - required id to pass to customerStatus
         * @returns parsed response from CustomerStatusQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomerStatusDocument, {
                    id,
                });
                const data = response.customerStatus;
                return new CustomerStatus(this._request, data);
            });
        }
    }
    /**
     * A fetchable CustomerStatuses Query
     *
     * @param request - function to call the graphql client
     */
    class CustomerStatusesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomerStatuses query and return a CustomerStatusConnection
         *
         * @param variables - variables to pass into the CustomerStatusesQuery
         * @returns parsed response from CustomerStatusesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomerStatusesDocument, variables);
                const data = response.customerStatuses;
                return new CustomerStatusConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable CustomerTier Query
     *
     * @param request - function to call the graphql client
     */
    class CustomerTierQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomerTier query and return a CustomerTier
         *
         * @param id - required id to pass to customerTier
         * @returns parsed response from CustomerTierQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomerTierDocument, {
                    id,
                });
                const data = response.customerTier;
                return new CustomerTier(this._request, data);
            });
        }
    }
    /**
     * A fetchable CustomerTiers Query
     *
     * @param request - function to call the graphql client
     */
    class CustomerTiersQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomerTiers query and return a CustomerTierConnection
         *
         * @param variables - variables to pass into the CustomerTiersQuery
         * @returns parsed response from CustomerTiersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomerTiersDocument, variables);
                const data = response.customerTiers;
                return new CustomerTierConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Customers Query
     *
     * @param request - function to call the graphql client
     */
    class CustomersQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Customers query and return a CustomerConnection
         *
         * @param variables - variables to pass into the CustomersQuery
         * @returns parsed response from CustomersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomersDocument, variables);
                const data = response.customers;
                return new CustomerConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Cycle Query
     *
     * @param request - function to call the graphql client
     */
    class CycleQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Cycle query and return a Cycle
         *
         * @param id - required id to pass to cycle
         * @returns parsed response from CycleQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CycleDocument, {
                    id,
                });
                const data = response.cycle;
                return new Cycle(this._request, data);
            });
        }
    }
    /**
     * A fetchable Cycles Query
     *
     * @param request - function to call the graphql client
     */
    class CyclesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Cycles query and return a CycleConnection
         *
         * @param variables - variables to pass into the CyclesQuery
         * @returns parsed response from CyclesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CyclesDocument, variables);
                const data = response.cycles;
                return new CycleConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Document Query
     *
     * @param request - function to call the graphql client
     */
    class DocumentQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Document query and return a Document
         *
         * @param id - required id to pass to document
         * @returns parsed response from DocumentQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DocumentDocument, {
                    id,
                });
                const data = response.document;
                return new Document(this._request, data);
            });
        }
    }
    /**
     * A fetchable DocumentContentHistory Query
     *
     * @param request - function to call the graphql client
     */
    class DocumentContentHistoryQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DocumentContentHistory query and return a DocumentContentHistoryPayload
         *
         * @param id - required id to pass to documentContentHistory
         * @returns parsed response from DocumentContentHistoryQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DocumentContentHistoryDocument, {
                    id,
                });
                const data = response.documentContentHistory;
                return new DocumentContentHistoryPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable Documents Query
     *
     * @param request - function to call the graphql client
     */
    class DocumentsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Documents query and return a DocumentConnection
         *
         * @param variables - variables to pass into the DocumentsQuery
         * @returns parsed response from DocumentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DocumentsDocument, variables);
                const data = response.documents;
                return new DocumentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable EmailIntakeAddress Query
     *
     * @param request - function to call the graphql client
     */
    class EmailIntakeAddressQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the EmailIntakeAddress query and return a EmailIntakeAddress
         *
         * @param id - required id to pass to emailIntakeAddress
         * @returns parsed response from EmailIntakeAddressQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(EmailIntakeAddressDocument, {
                    id,
                });
                const data = response.emailIntakeAddress;
                return new EmailIntakeAddress(this._request, data);
            });
        }
    }
    /**
     * A fetchable Emoji Query
     *
     * @param request - function to call the graphql client
     */
    class EmojiQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Emoji query and return a Emoji
         *
         * @param id - required id to pass to emoji
         * @returns parsed response from EmojiQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(EmojiDocument, {
                    id,
                });
                const data = response.emoji;
                return new Emoji(this._request, data);
            });
        }
    }
    /**
     * A fetchable Emojis Query
     *
     * @param request - function to call the graphql client
     */
    class EmojisQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Emojis query and return a EmojiConnection
         *
         * @param variables - variables to pass into the EmojisQuery
         * @returns parsed response from EmojisQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(EmojisDocument, variables);
                const data = response.emojis;
                return new EmojiConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable EntityExternalLink Query
     *
     * @param request - function to call the graphql client
     */
    class EntityExternalLinkQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the EntityExternalLink query and return a EntityExternalLink
         *
         * @param id - required id to pass to entityExternalLink
         * @returns parsed response from EntityExternalLinkQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(EntityExternalLinkDocument, {
                    id,
                });
                const data = response.entityExternalLink;
                return new EntityExternalLink(this._request, data);
            });
        }
    }
    /**
     * A fetchable ExternalUser Query
     *
     * @param request - function to call the graphql client
     */
    class ExternalUserQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ExternalUser query and return a ExternalUser
         *
         * @param id - required id to pass to externalUser
         * @returns parsed response from ExternalUserQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ExternalUserDocument, {
                    id,
                });
                const data = response.externalUser;
                return new ExternalUser(this._request, data);
            });
        }
    }
    /**
     * A fetchable ExternalUsers Query
     *
     * @param request - function to call the graphql client
     */
    class ExternalUsersQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ExternalUsers query and return a ExternalUserConnection
         *
         * @param variables - variables to pass into the ExternalUsersQuery
         * @returns parsed response from ExternalUsersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ExternalUsersDocument, variables);
                const data = response.externalUsers;
                return new ExternalUserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Favorite Query
     *
     * @param request - function to call the graphql client
     */
    class FavoriteQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Favorite query and return a Favorite
         *
         * @param id - required id to pass to favorite
         * @returns parsed response from FavoriteQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(FavoriteDocument, {
                    id,
                });
                const data = response.favorite;
                return new Favorite(this._request, data);
            });
        }
    }
    /**
     * A fetchable Favorites Query
     *
     * @param request - function to call the graphql client
     */
    class FavoritesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Favorites query and return a FavoriteConnection
         *
         * @param variables - variables to pass into the FavoritesQuery
         * @returns parsed response from FavoritesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(FavoritesDocument, variables);
                const data = response.favorites;
                return new FavoriteConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Initiative Query
     *
     * @param request - function to call the graphql client
     */
    class InitiativeQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Initiative query and return a Initiative
         *
         * @param id - required id to pass to initiative
         * @returns parsed response from InitiativeQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(InitiativeDocument, {
                    id,
                });
                const data = response.initiative;
                return new Initiative(this._request, data);
            });
        }
    }
    /**
     * A fetchable InitiativeRelation Query
     *
     * @param request - function to call the graphql client
     */
    class InitiativeRelationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the InitiativeRelation query and return a ProjectRelation
         *
         * @param id - required id to pass to initiativeRelation
         * @returns parsed response from InitiativeRelationQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(InitiativeRelationDocument, {
                    id,
                });
                const data = response.initiativeRelation;
                return new ProjectRelation(this._request, data);
            });
        }
    }
    /**
     * A fetchable InitiativeRelations Query
     *
     * @param request - function to call the graphql client
     */
    class InitiativeRelationsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the InitiativeRelations query and return a InitiativeRelationConnection
         *
         * @param variables - variables to pass into the InitiativeRelationsQuery
         * @returns parsed response from InitiativeRelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(InitiativeRelationsDocument, variables);
                const data = response.initiativeRelations;
                return new InitiativeRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable InitiativeToProject Query
     *
     * @param request - function to call the graphql client
     */
    class InitiativeToProjectQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the InitiativeToProject query and return a InitiativeToProject
         *
         * @param id - required id to pass to initiativeToProject
         * @returns parsed response from InitiativeToProjectQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(InitiativeToProjectDocument, {
                    id,
                });
                const data = response.initiativeToProject;
                return new InitiativeToProject(this._request, data);
            });
        }
    }
    /**
     * A fetchable InitiativeToProjects Query
     *
     * @param request - function to call the graphql client
     */
    class InitiativeToProjectsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the InitiativeToProjects query and return a InitiativeToProjectConnection
         *
         * @param variables - variables to pass into the InitiativeToProjectsQuery
         * @returns parsed response from InitiativeToProjectsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(InitiativeToProjectsDocument, variables);
                const data = response.initiativeToProjects;
                return new InitiativeToProjectConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable InitiativeUpdate Query
     *
     * @param request - function to call the graphql client
     */
    class InitiativeUpdateQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the InitiativeUpdate query and return a InitiativeUpdate
         *
         * @param id - required id to pass to initiativeUpdate
         * @returns parsed response from InitiativeUpdateQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(InitiativeUpdateDocument, {
                    id,
                });
                const data = response.initiativeUpdate;
                return new InitiativeUpdate(this._request, data);
            });
        }
    }
    /**
     * A fetchable InitiativeUpdates Query
     *
     * @param request - function to call the graphql client
     */
    class InitiativeUpdatesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the InitiativeUpdates query and return a InitiativeUpdateConnection
         *
         * @param variables - variables to pass into the InitiativeUpdatesQuery
         * @returns parsed response from InitiativeUpdatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(InitiativeUpdatesDocument, variables);
                const data = response.initiativeUpdates;
                return new InitiativeUpdateConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Initiatives Query
     *
     * @param request - function to call the graphql client
     */
    class InitiativesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Initiatives query and return a InitiativeConnection
         *
         * @param variables - variables to pass into the InitiativesQuery
         * @returns parsed response from InitiativesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(InitiativesDocument, variables);
                const data = response.initiatives;
                return new InitiativeConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Integration Query
     *
     * @param request - function to call the graphql client
     */
    class IntegrationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Integration query and return a Integration
         *
         * @param id - required id to pass to integration
         * @returns parsed response from IntegrationQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationDocument, {
                    id,
                });
                const data = response.integration;
                return new Integration(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationHasScopes Query
     *
     * @param request - function to call the graphql client
     */
    class IntegrationHasScopesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationHasScopes query and return a IntegrationHasScopesPayload
         *
         * @param integrationId - required integrationId to pass to integrationHasScopes
         * @param scopes - required scopes to pass to integrationHasScopes
         * @returns parsed response from IntegrationHasScopesQuery
         */
        fetch(integrationId, scopes) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationHasScopesDocument, {
                    integrationId,
                    scopes,
                });
                const data = response.integrationHasScopes;
                return new IntegrationHasScopesPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationTemplate Query
     *
     * @param request - function to call the graphql client
     */
    class IntegrationTemplateQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationTemplate query and return a IntegrationTemplate
         *
         * @param id - required id to pass to integrationTemplate
         * @returns parsed response from IntegrationTemplateQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationTemplateDocument, {
                    id,
                });
                const data = response.integrationTemplate;
                return new IntegrationTemplate(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationTemplates Query
     *
     * @param request - function to call the graphql client
     */
    class IntegrationTemplatesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationTemplates query and return a IntegrationTemplateConnection
         *
         * @param variables - variables to pass into the IntegrationTemplatesQuery
         * @returns parsed response from IntegrationTemplatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationTemplatesDocument, variables);
                const data = response.integrationTemplates;
                return new IntegrationTemplateConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Integrations Query
     *
     * @param request - function to call the graphql client
     */
    class IntegrationsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Integrations query and return a IntegrationConnection
         *
         * @param variables - variables to pass into the IntegrationsQuery
         * @returns parsed response from IntegrationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationsDocument, variables);
                const data = response.integrations;
                return new IntegrationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable IntegrationsSettings Query
     *
     * @param request - function to call the graphql client
     */
    class IntegrationsSettingsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationsSettings query and return a IntegrationsSettings
         *
         * @param id - required id to pass to integrationsSettings
         * @returns parsed response from IntegrationsSettingsQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationsSettingsDocument, {
                    id,
                });
                const data = response.integrationsSettings;
                return new IntegrationsSettings(this._request, data);
            });
        }
    }
    /**
     * A fetchable Issue Query
     *
     * @param request - function to call the graphql client
     */
    class IssueQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Issue query and return a Issue
         *
         * @param id - required id to pass to issue
         * @returns parsed response from IssueQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueDocument, {
                    id,
                });
                const data = response.issue;
                return new Issue(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueFigmaFileKeySearch Query
     *
     * @param request - function to call the graphql client
     */
    class IssueFigmaFileKeySearchQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueFigmaFileKeySearch query and return a IssueConnection
         *
         * @param fileKey - required fileKey to pass to issueFigmaFileKeySearch
         * @param variables - variables without 'fileKey' to pass into the IssueFigmaFileKeySearchQuery
         * @returns parsed response from IssueFigmaFileKeySearchQuery
         */
        fetch(fileKey, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueFigmaFileKeySearchDocument, Object.assign({ fileKey }, variables));
                const data = response.issueFigmaFileKeySearch;
                return new IssueConnection(this._request, connection => this.fetch(fileKey, defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable IssueFilterSuggestion Query
     *
     * @param request - function to call the graphql client
     */
    class IssueFilterSuggestionQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueFilterSuggestion query and return a IssueFilterSuggestionPayload
         *
         * @param prompt - required prompt to pass to issueFilterSuggestion
         * @param variables - variables without 'prompt' to pass into the IssueFilterSuggestionQuery
         * @returns parsed response from IssueFilterSuggestionQuery
         */
        fetch(prompt, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueFilterSuggestionDocument, Object.assign({ prompt }, variables));
                const data = response.issueFilterSuggestion;
                return new IssueFilterSuggestionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueImportCheckCsv Query
     *
     * @param request - function to call the graphql client
     */
    class IssueImportCheckCsvQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportCheckCsv query and return a IssueImportCheckPayload
         *
         * @param csvUrl - required csvUrl to pass to issueImportCheckCSV
         * @param service - required service to pass to issueImportCheckCSV
         * @returns parsed response from IssueImportCheckCsvQuery
         */
        fetch(csvUrl, service) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueImportCheckCsvDocument, {
                    csvUrl,
                    service,
                });
                const data = response.issueImportCheckCSV;
                return new IssueImportCheckPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueImportCheckSync Query
     *
     * @param request - function to call the graphql client
     */
    class IssueImportCheckSyncQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportCheckSync query and return a IssueImportSyncCheckPayload
         *
         * @param issueImportId - required issueImportId to pass to issueImportCheckSync
         * @returns parsed response from IssueImportCheckSyncQuery
         */
        fetch(issueImportId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueImportCheckSyncDocument, {
                    issueImportId,
                });
                const data = response.issueImportCheckSync;
                return new IssueImportSyncCheckPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueImportJqlCheck Query
     *
     * @param request - function to call the graphql client
     */
    class IssueImportJqlCheckQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportJqlCheck query and return a IssueImportJqlCheckPayload
         *
         * @param jiraEmail - required jiraEmail to pass to issueImportJqlCheck
         * @param jiraHostname - required jiraHostname to pass to issueImportJqlCheck
         * @param jiraProject - required jiraProject to pass to issueImportJqlCheck
         * @param jiraToken - required jiraToken to pass to issueImportJqlCheck
         * @param jql - required jql to pass to issueImportJqlCheck
         * @returns parsed response from IssueImportJqlCheckQuery
         */
        fetch(jiraEmail, jiraHostname, jiraProject, jiraToken, jql) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueImportJqlCheckDocument, {
                    jiraEmail,
                    jiraHostname,
                    jiraProject,
                    jiraToken,
                    jql,
                });
                const data = response.issueImportJqlCheck;
                return new IssueImportJqlCheckPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueLabel Query
     *
     * @param request - function to call the graphql client
     */
    class IssueLabelQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueLabel query and return a IssueLabel
         *
         * @param id - required id to pass to issueLabel
         * @returns parsed response from IssueLabelQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueLabelDocument, {
                    id,
                });
                const data = response.issueLabel;
                return new IssueLabel(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueLabels Query
     *
     * @param request - function to call the graphql client
     */
    class IssueLabelsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueLabels query and return a IssueLabelConnection
         *
         * @param variables - variables to pass into the IssueLabelsQuery
         * @returns parsed response from IssueLabelsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueLabelsDocument, variables);
                const data = response.issueLabels;
                return new IssueLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable IssuePriorityValues Query
     *
     * @param request - function to call the graphql client
     */
    class IssuePriorityValuesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssuePriorityValues query and return a IssuePriorityValue list
         *
         * @returns parsed response from IssuePriorityValuesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssuePriorityValuesDocument, {});
                const data = response.issuePriorityValues;
                return data.map(node => {
                    return new IssuePriorityValue(this._request, node);
                });
            });
        }
    }
    /**
     * A fetchable IssueRelation Query
     *
     * @param request - function to call the graphql client
     */
    class IssueRelationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueRelation query and return a IssueRelation
         *
         * @param id - required id to pass to issueRelation
         * @returns parsed response from IssueRelationQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueRelationDocument, {
                    id,
                });
                const data = response.issueRelation;
                return new IssueRelation(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueRelations Query
     *
     * @param request - function to call the graphql client
     */
    class IssueRelationsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueRelations query and return a IssueRelationConnection
         *
         * @param variables - variables to pass into the IssueRelationsQuery
         * @returns parsed response from IssueRelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueRelationsDocument, variables);
                const data = response.issueRelations;
                return new IssueRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable IssueSearch Query
     *
     * @param request - function to call the graphql client
     */
    class IssueSearchQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueSearch query and return a IssueConnection
         *
         * @param variables - variables to pass into the IssueSearchQuery
         * @returns parsed response from IssueSearchQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueSearchDocument, variables);
                const data = response.issueSearch;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable IssueTitleSuggestionFromCustomerRequest Query
     *
     * @param request - function to call the graphql client
     */
    class IssueTitleSuggestionFromCustomerRequestQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueTitleSuggestionFromCustomerRequest query and return a IssueTitleSuggestionFromCustomerRequestPayload
         *
         * @param request - required request to pass to issueTitleSuggestionFromCustomerRequest
         * @returns parsed response from IssueTitleSuggestionFromCustomerRequestQuery
         */
        fetch(request) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueTitleSuggestionFromCustomerRequestDocument, {
                    request,
                });
                const data = response.issueTitleSuggestionFromCustomerRequest;
                return new IssueTitleSuggestionFromCustomerRequestPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch Query
     *
     * @param request - function to call the graphql client
     */
    class IssueVcsBranchSearchQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueVcsBranchSearch query and return a Issue
         *
         * @param branchName - required branchName to pass to issueVcsBranchSearch
         * @returns parsed response from IssueVcsBranchSearchQuery
         */
        fetch(branchName) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearchDocument, {
                    branchName,
                });
                const data = response.issueVcsBranchSearch;
                return data ? new Issue(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable Issues Query
     *
     * @param request - function to call the graphql client
     */
    class IssuesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Issues query and return a IssueConnection
         *
         * @param variables - variables to pass into the IssuesQuery
         * @returns parsed response from IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssuesDocument, variables);
                const data = response.issues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Notification Query
     *
     * @param request - function to call the graphql client
     */
    class NotificationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Notification query and return a Notification
         *
         * @param id - required id to pass to notification
         * @returns parsed response from NotificationQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(NotificationDocument, {
                    id,
                });
                const data = response.notification;
                switch (data.__typename) {
                    case "CustomerNeedNotification":
                        return new CustomerNeedNotification(this._request, data);
                    case "CustomerNotification":
                        return new CustomerNotification(this._request, data);
                    case "DocumentNotification":
                        return new DocumentNotification(this._request, data);
                    case "InitiativeNotification":
                        return new InitiativeNotification(this._request, data);
                    case "IssueNotification":
                        return new IssueNotification(this._request, data);
                    case "OauthClientApprovalNotification":
                        return new OauthClientApprovalNotification(this._request, data);
                    case "PostNotification":
                        return new PostNotification(this._request, data);
                    case "ProjectNotification":
                        return new ProjectNotification(this._request, data);
                    case "PullRequestNotification":
                        return new PullRequestNotification(this._request, data);
                    default:
                        return new Notification(this._request, data);
                }
            });
        }
    }
    /**
     * A fetchable NotificationSubscription Query
     *
     * @param request - function to call the graphql client
     */
    class NotificationSubscriptionQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationSubscription query and return a NotificationSubscription
         *
         * @param id - required id to pass to notificationSubscription
         * @returns parsed response from NotificationSubscriptionQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(NotificationSubscriptionDocument, {
                    id,
                });
                const data = response.notificationSubscription;
                switch (data.__typename) {
                    case "CustomViewNotificationSubscription":
                        return new CustomViewNotificationSubscription(this._request, data);
                    case "CustomerNotificationSubscription":
                        return new CustomerNotificationSubscription(this._request, data);
                    case "CycleNotificationSubscription":
                        return new CycleNotificationSubscription(this._request, data);
                    case "InitiativeNotificationSubscription":
                        return new InitiativeNotificationSubscription(this._request, data);
                    case "LabelNotificationSubscription":
                        return new LabelNotificationSubscription(this._request, data);
                    case "ProjectNotificationSubscription":
                        return new ProjectNotificationSubscription(this._request, data);
                    case "TeamNotificationSubscription":
                        return new TeamNotificationSubscription(this._request, data);
                    case "UserNotificationSubscription":
                        return new UserNotificationSubscription(this._request, data);
                    default:
                        return new NotificationSubscription(this._request, data);
                }
            });
        }
    }
    /**
     * A fetchable NotificationSubscriptions Query
     *
     * @param request - function to call the graphql client
     */
    class NotificationSubscriptionsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationSubscriptions query and return a NotificationSubscriptionConnection
         *
         * @param variables - variables to pass into the NotificationSubscriptionsQuery
         * @returns parsed response from NotificationSubscriptionsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(NotificationSubscriptionsDocument, variables);
                const data = response.notificationSubscriptions;
                return new NotificationSubscriptionConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Notifications Query
     *
     * @param request - function to call the graphql client
     */
    class NotificationsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Notifications query and return a NotificationConnection
         *
         * @param variables - variables to pass into the NotificationsQuery
         * @returns parsed response from NotificationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(NotificationsDocument, variables);
                const data = response.notifications;
                return new NotificationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Organization Query
     *
     * @param request - function to call the graphql client
     */
    class OrganizationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Organization query and return a Organization
         *
         * @returns parsed response from OrganizationQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(OrganizationDocument, {});
                const data = response.organization;
                return new Organization(this._request, data);
            });
        }
    }
    /**
     * A fetchable OrganizationExists Query
     *
     * @param request - function to call the graphql client
     */
    class OrganizationExistsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationExists query and return a OrganizationExistsPayload
         *
         * @param urlKey - required urlKey to pass to organizationExists
         * @returns parsed response from OrganizationExistsQuery
         */
        fetch(urlKey) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(OrganizationExistsDocument, {
                    urlKey,
                });
                const data = response.organizationExists;
                return new OrganizationExistsPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable OrganizationInvite Query
     *
     * @param request - function to call the graphql client
     */
    class OrganizationInviteQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationInvite query and return a OrganizationInvite
         *
         * @param id - required id to pass to organizationInvite
         * @returns parsed response from OrganizationInviteQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(OrganizationInviteDocument, {
                    id,
                });
                const data = response.organizationInvite;
                return new OrganizationInvite(this._request, data);
            });
        }
    }
    /**
     * A fetchable OrganizationInvites Query
     *
     * @param request - function to call the graphql client
     */
    class OrganizationInvitesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationInvites query and return a OrganizationInviteConnection
         *
         * @param variables - variables to pass into the OrganizationInvitesQuery
         * @returns parsed response from OrganizationInvitesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(OrganizationInvitesDocument, variables);
                const data = response.organizationInvites;
                return new OrganizationInviteConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Project query and return a Project
         *
         * @param id - required id to pass to project
         * @returns parsed response from ProjectQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectDocument, {
                    id,
                });
                const data = response.project;
                return new Project(this._request, data);
            });
        }
    }
    /**
     * A fetchable ProjectFilterSuggestion Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectFilterSuggestionQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectFilterSuggestion query and return a ProjectFilterSuggestionPayload
         *
         * @param prompt - required prompt to pass to projectFilterSuggestion
         * @returns parsed response from ProjectFilterSuggestionQuery
         */
        fetch(prompt) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectFilterSuggestionDocument, {
                    prompt,
                });
                const data = response.projectFilterSuggestion;
                return new ProjectFilterSuggestionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ProjectLabel Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectLabelQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectLabel query and return a ProjectLabel
         *
         * @param id - required id to pass to projectLabel
         * @returns parsed response from ProjectLabelQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectLabelDocument, {
                    id,
                });
                const data = response.projectLabel;
                return new ProjectLabel(this._request, data);
            });
        }
    }
    /**
     * A fetchable ProjectLabels Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectLabelsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectLabels query and return a ProjectLabelConnection
         *
         * @param variables - variables to pass into the ProjectLabelsQuery
         * @returns parsed response from ProjectLabelsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectLabelsDocument, variables);
                const data = response.projectLabels;
                return new ProjectLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable ProjectMilestone Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectMilestoneQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectMilestone query and return a ProjectMilestone
         *
         * @param id - required id to pass to projectMilestone
         * @returns parsed response from ProjectMilestoneQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectMilestoneDocument, {
                    id,
                });
                const data = response.projectMilestone;
                return new ProjectMilestone(this._request, data);
            });
        }
    }
    /**
     * A fetchable ProjectMilestones Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectMilestonesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectMilestones query and return a ProjectMilestoneConnection
         *
         * @param variables - variables to pass into the ProjectMilestonesQuery
         * @returns parsed response from ProjectMilestonesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectMilestonesDocument, variables);
                const data = response.projectMilestones;
                return new ProjectMilestoneConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable ProjectRelation Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectRelationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectRelation query and return a ProjectRelation
         *
         * @param id - required id to pass to projectRelation
         * @returns parsed response from ProjectRelationQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectRelationDocument, {
                    id,
                });
                const data = response.projectRelation;
                return new ProjectRelation(this._request, data);
            });
        }
    }
    /**
     * A fetchable ProjectRelations Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectRelationsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectRelations query and return a ProjectRelationConnection
         *
         * @param variables - variables to pass into the ProjectRelationsQuery
         * @returns parsed response from ProjectRelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectRelationsDocument, variables);
                const data = response.projectRelations;
                return new ProjectRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable ProjectStatus Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectStatusQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectStatus query and return a ProjectStatus
         *
         * @param id - required id to pass to projectStatus
         * @returns parsed response from ProjectStatusQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectStatusDocument, {
                    id,
                });
                const data = response.projectStatus;
                return new ProjectStatus(this._request, data);
            });
        }
    }
    /**
     * A fetchable ProjectStatuses Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectStatusesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectStatuses query and return a ProjectStatusConnection
         *
         * @param variables - variables to pass into the ProjectStatusesQuery
         * @returns parsed response from ProjectStatusesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectStatusesDocument, variables);
                const data = response.projectStatuses;
                return new ProjectStatusConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable ProjectUpdate Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectUpdateQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectUpdate query and return a ProjectUpdate
         *
         * @param id - required id to pass to projectUpdate
         * @returns parsed response from ProjectUpdateQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectUpdateDocument, {
                    id,
                });
                const data = response.projectUpdate;
                return new ProjectUpdate(this._request, data);
            });
        }
    }
    /**
     * A fetchable ProjectUpdates Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectUpdatesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectUpdates query and return a ProjectUpdateConnection
         *
         * @param variables - variables to pass into the ProjectUpdatesQuery
         * @returns parsed response from ProjectUpdatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectUpdatesDocument, variables);
                const data = response.projectUpdates;
                return new ProjectUpdateConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Projects Query
     *
     * @param request - function to call the graphql client
     */
    class ProjectsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Projects query and return a ProjectConnection
         *
         * @param variables - variables to pass into the ProjectsQuery
         * @returns parsed response from ProjectsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectsDocument, variables);
                const data = response.projects;
                return new ProjectConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable PushSubscriptionTest Query
     *
     * @param request - function to call the graphql client
     */
    class PushSubscriptionTestQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the PushSubscriptionTest query and return a PushSubscriptionTestPayload
         *
         * @param variables - variables to pass into the PushSubscriptionTestQuery
         * @returns parsed response from PushSubscriptionTestQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(PushSubscriptionTestDocument, variables);
                const data = response.pushSubscriptionTest;
                return new PushSubscriptionTestPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable RateLimitStatus Query
     *
     * @param request - function to call the graphql client
     */
    class RateLimitStatusQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the RateLimitStatus query and return a RateLimitPayload
         *
         * @returns parsed response from RateLimitStatusQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(RateLimitStatusDocument, {});
                const data = response.rateLimitStatus;
                return new RateLimitPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable Roadmap Query
     *
     * @param request - function to call the graphql client
     */
    class RoadmapQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Roadmap query and return a Roadmap
         *
         * @param id - required id to pass to roadmap
         * @returns parsed response from RoadmapQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(RoadmapDocument, {
                    id,
                });
                const data = response.roadmap;
                return new Roadmap(this._request, data);
            });
        }
    }
    /**
     * A fetchable RoadmapToProject Query
     *
     * @param request - function to call the graphql client
     */
    class RoadmapToProjectQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the RoadmapToProject query and return a RoadmapToProject
         *
         * @param id - required id to pass to roadmapToProject
         * @returns parsed response from RoadmapToProjectQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(RoadmapToProjectDocument, {
                    id,
                });
                const data = response.roadmapToProject;
                return new RoadmapToProject(this._request, data);
            });
        }
    }
    /**
     * A fetchable RoadmapToProjects Query
     *
     * @param request - function to call the graphql client
     */
    class RoadmapToProjectsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the RoadmapToProjects query and return a RoadmapToProjectConnection
         *
         * @param variables - variables to pass into the RoadmapToProjectsQuery
         * @returns parsed response from RoadmapToProjectsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(RoadmapToProjectsDocument, variables);
                const data = response.roadmapToProjects;
                return new RoadmapToProjectConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Roadmaps Query
     *
     * @param request - function to call the graphql client
     */
    class RoadmapsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Roadmaps query and return a RoadmapConnection
         *
         * @param variables - variables to pass into the RoadmapsQuery
         * @returns parsed response from RoadmapsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(RoadmapsDocument, variables);
                const data = response.roadmaps;
                return new RoadmapConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable SearchDocuments Query
     *
     * @param request - function to call the graphql client
     */
    class SearchDocumentsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SearchDocuments query and return a DocumentSearchPayload
         *
         * @param term - required term to pass to searchDocuments
         * @param variables - variables without 'term' to pass into the SearchDocumentsQuery
         * @returns parsed response from SearchDocumentsQuery
         */
        fetch(term, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(SearchDocumentsDocument, Object.assign({ term }, variables));
                const data = response.searchDocuments;
                return new DocumentSearchPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable SearchIssues Query
     *
     * @param request - function to call the graphql client
     */
    class SearchIssuesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SearchIssues query and return a IssueSearchPayload
         *
         * @param term - required term to pass to searchIssues
         * @param variables - variables without 'term' to pass into the SearchIssuesQuery
         * @returns parsed response from SearchIssuesQuery
         */
        fetch(term, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(SearchIssuesDocument, Object.assign({ term }, variables));
                const data = response.searchIssues;
                return new IssueSearchPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable SearchProjects Query
     *
     * @param request - function to call the graphql client
     */
    class SearchProjectsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SearchProjects query and return a ProjectSearchPayload
         *
         * @param term - required term to pass to searchProjects
         * @param variables - variables without 'term' to pass into the SearchProjectsQuery
         * @returns parsed response from SearchProjectsQuery
         */
        fetch(term, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(SearchProjectsDocument, Object.assign({ term }, variables));
                const data = response.searchProjects;
                return new ProjectSearchPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable SemanticSearch Query
     *
     * @param request - function to call the graphql client
     */
    class SemanticSearchQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SemanticSearch query and return a SemanticSearchPayload
         *
         * @param query - required query to pass to semanticSearch
         * @param variables - variables without 'query' to pass into the SemanticSearchQuery
         * @returns parsed response from SemanticSearchQuery
         */
        fetch(query, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(SemanticSearchDocument, Object.assign({ query }, variables));
                const data = response.semanticSearch;
                return new SemanticSearchPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable SsoUrlFromEmail Query
     *
     * @param request - function to call the graphql client
     */
    class SsoUrlFromEmailQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SsoUrlFromEmail query and return a SsoUrlFromEmailResponse
         *
         * @param email - required email to pass to ssoUrlFromEmail
         * @param variables - variables without 'email' to pass into the SsoUrlFromEmailQuery
         * @returns parsed response from SsoUrlFromEmailQuery
         */
        fetch(email, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(SsoUrlFromEmailDocument, Object.assign({ email }, variables));
                const data = response.ssoUrlFromEmail;
                return new SsoUrlFromEmailResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable Team Query
     *
     * @param request - function to call the graphql client
     */
    class TeamQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Team query and return a Team
         *
         * @param id - required id to pass to team
         * @returns parsed response from TeamQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TeamDocument, {
                    id,
                });
                const data = response.team;
                return new Team(this._request, data);
            });
        }
    }
    /**
     * A fetchable TeamMembership Query
     *
     * @param request - function to call the graphql client
     */
    class TeamMembershipQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TeamMembership query and return a TeamMembership
         *
         * @param id - required id to pass to teamMembership
         * @returns parsed response from TeamMembershipQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TeamMembershipDocument, {
                    id,
                });
                const data = response.teamMembership;
                return new TeamMembership(this._request, data);
            });
        }
    }
    /**
     * A fetchable TeamMemberships Query
     *
     * @param request - function to call the graphql client
     */
    class TeamMembershipsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TeamMemberships query and return a TeamMembershipConnection
         *
         * @param variables - variables to pass into the TeamMembershipsQuery
         * @returns parsed response from TeamMembershipsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TeamMembershipsDocument, variables);
                const data = response.teamMemberships;
                return new TeamMembershipConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Teams Query
     *
     * @param request - function to call the graphql client
     */
    class TeamsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Teams query and return a TeamConnection
         *
         * @param variables - variables to pass into the TeamsQuery
         * @returns parsed response from TeamsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TeamsDocument, variables);
                const data = response.teams;
                return new TeamConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Template Query
     *
     * @param request - function to call the graphql client
     */
    class TemplateQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Template query and return a Template
         *
         * @param id - required id to pass to template
         * @returns parsed response from TemplateQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TemplateDocument, {
                    id,
                });
                const data = response.template;
                return new Template(this._request, data);
            });
        }
    }
    /**
     * A fetchable Templates Query
     *
     * @param request - function to call the graphql client
     */
    class TemplatesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Templates query and return a Template list
         *
         * @returns parsed response from TemplatesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TemplatesDocument, {});
                const data = response.templates;
                return data.map(node => {
                    return new Template(this._request, node);
                });
            });
        }
    }
    /**
     * A fetchable TemplatesForIntegration Query
     *
     * @param request - function to call the graphql client
     */
    class TemplatesForIntegrationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TemplatesForIntegration query and return a Template list
         *
         * @param integrationType - required integrationType to pass to templatesForIntegration
         * @returns parsed response from TemplatesForIntegrationQuery
         */
        fetch(integrationType) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TemplatesForIntegrationDocument, {
                    integrationType,
                });
                const data = response.templatesForIntegration;
                return data.map(node => {
                    return new Template(this._request, node);
                });
            });
        }
    }
    /**
     * A fetchable TimeSchedule Query
     *
     * @param request - function to call the graphql client
     */
    class TimeScheduleQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TimeSchedule query and return a TimeSchedule
         *
         * @param id - required id to pass to timeSchedule
         * @returns parsed response from TimeScheduleQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TimeScheduleDocument, {
                    id,
                });
                const data = response.timeSchedule;
                return new TimeSchedule(this._request, data);
            });
        }
    }
    /**
     * A fetchable TimeSchedules Query
     *
     * @param request - function to call the graphql client
     */
    class TimeSchedulesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TimeSchedules query and return a TimeScheduleConnection
         *
         * @param variables - variables to pass into the TimeSchedulesQuery
         * @returns parsed response from TimeSchedulesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TimeSchedulesDocument, variables);
                const data = response.timeSchedules;
                return new TimeScheduleConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable TriageResponsibilities Query
     *
     * @param request - function to call the graphql client
     */
    class TriageResponsibilitiesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TriageResponsibilities query and return a TriageResponsibilityConnection
         *
         * @param variables - variables to pass into the TriageResponsibilitiesQuery
         * @returns parsed response from TriageResponsibilitiesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TriageResponsibilitiesDocument, variables);
                const data = response.triageResponsibilities;
                return new TriageResponsibilityConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable TriageResponsibility Query
     *
     * @param request - function to call the graphql client
     */
    class TriageResponsibilityQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TriageResponsibility query and return a TriageResponsibility
         *
         * @param id - required id to pass to triageResponsibility
         * @returns parsed response from TriageResponsibilityQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TriageResponsibilityDocument, {
                    id,
                });
                const data = response.triageResponsibility;
                return new TriageResponsibility(this._request, data);
            });
        }
    }
    /**
     * A fetchable User Query
     *
     * @param request - function to call the graphql client
     */
    class UserQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the User query and return a User
         *
         * @param id - required id to pass to user
         * @returns parsed response from UserQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserDocument, {
                    id,
                });
                const data = response.user;
                return new User(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettingsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings query and return a UserSettings
         *
         * @returns parsed response from UserSettingsQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettingsDocument, {});
                const data = response.userSettings;
                return new UserSettings(this._request, data);
            });
        }
    }
    /**
     * A fetchable Users Query
     *
     * @param request - function to call the graphql client
     */
    class UsersQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Users query and return a UserConnection
         *
         * @param variables - variables to pass into the UsersQuery
         * @returns parsed response from UsersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UsersDocument, variables);
                const data = response.users;
                return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable VerifyGitHubEnterpriseServerInstallation Query
     *
     * @param request - function to call the graphql client
     */
    class VerifyGitHubEnterpriseServerInstallationQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the VerifyGitHubEnterpriseServerInstallation query and return a GitHubEnterpriseServerInstallVerificationPayload
         *
         * @param integrationId - required integrationId to pass to verifyGitHubEnterpriseServerInstallation
         * @returns parsed response from VerifyGitHubEnterpriseServerInstallationQuery
         */
        fetch(integrationId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(VerifyGitHubEnterpriseServerInstallationDocument, {
                    integrationId,
                });
                const data = response.verifyGitHubEnterpriseServerInstallation;
                return new GitHubEnterpriseServerInstallVerificationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable Viewer Query
     *
     * @param request - function to call the graphql client
     */
    class ViewerQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Viewer query and return a User
         *
         * @returns parsed response from ViewerQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ViewerDocument, {});
                const data = response.viewer;
                return new User(this._request, data);
            });
        }
    }
    /**
     * A fetchable Webhook Query
     *
     * @param request - function to call the graphql client
     */
    class WebhookQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Webhook query and return a Webhook
         *
         * @param id - required id to pass to webhook
         * @returns parsed response from WebhookQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(WebhookDocument, {
                    id,
                });
                const data = response.webhook;
                return new Webhook(this._request, data);
            });
        }
    }
    /**
     * A fetchable Webhooks Query
     *
     * @param request - function to call the graphql client
     */
    class WebhooksQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Webhooks query and return a WebhookConnection
         *
         * @param variables - variables to pass into the WebhooksQuery
         * @returns parsed response from WebhooksQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(WebhooksDocument, variables);
                const data = response.webhooks;
                return new WebhookConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable WorkflowState Query
     *
     * @param request - function to call the graphql client
     */
    class WorkflowStateQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the WorkflowState query and return a WorkflowState
         *
         * @param id - required id to pass to workflowState
         * @returns parsed response from WorkflowStateQuery
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(WorkflowStateDocument, {
                    id,
                });
                const data = response.workflowState;
                return new WorkflowState(this._request, data);
            });
        }
    }
    /**
     * A fetchable WorkflowStates Query
     *
     * @param request - function to call the graphql client
     */
    class WorkflowStatesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the WorkflowStates query and return a WorkflowStateConnection
         *
         * @param variables - variables to pass into the WorkflowStatesQuery
         * @returns parsed response from WorkflowStatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(WorkflowStatesDocument, variables);
                const data = response.workflowStates;
                return new WorkflowStateConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign({}, variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable CreateAgentActivity Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateAgentActivityMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateAgentActivity mutation and return a AgentActivityPayload
         *
         * @param input - required input to pass to createAgentActivity
         * @returns parsed response from CreateAgentActivityMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateAgentActivityDocument, {
                    input,
                });
                const data = response.agentActivityCreate;
                return new AgentActivityPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AgentSessionCreateOnComment Mutation
     *
     * @param request - function to call the graphql client
     */
    class AgentSessionCreateOnCommentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AgentSessionCreateOnComment mutation and return a AgentSessionPayload
         *
         * @param input - required input to pass to agentSessionCreateOnComment
         * @returns parsed response from AgentSessionCreateOnCommentMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AgentSessionCreateOnCommentDocument, {
                    input,
                });
                const data = response.agentSessionCreateOnComment;
                return new AgentSessionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AgentSessionCreateOnIssue Mutation
     *
     * @param request - function to call the graphql client
     */
    class AgentSessionCreateOnIssueMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AgentSessionCreateOnIssue mutation and return a AgentSessionPayload
         *
         * @param input - required input to pass to agentSessionCreateOnIssue
         * @returns parsed response from AgentSessionCreateOnIssueMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AgentSessionCreateOnIssueDocument, {
                    input,
                });
                const data = response.agentSessionCreateOnIssue;
                return new AgentSessionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AgentSessionUpdateExternalUrl Mutation
     *
     * @param request - function to call the graphql client
     */
    class AgentSessionUpdateExternalUrlMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AgentSessionUpdateExternalUrl mutation and return a AgentSessionPayload
         *
         * @param id - required id to pass to agentSessionUpdateExternalUrl
         * @param input - required input to pass to agentSessionUpdateExternalUrl
         * @returns parsed response from AgentSessionUpdateExternalUrlMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AgentSessionUpdateExternalUrlDocument, {
                    id,
                    input,
                });
                const data = response.agentSessionUpdateExternalUrl;
                return new AgentSessionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AirbyteIntegrationConnect Mutation
     *
     * @param request - function to call the graphql client
     */
    class AirbyteIntegrationConnectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AirbyteIntegrationConnect mutation and return a IntegrationPayload
         *
         * @param input - required input to pass to airbyteIntegrationConnect
         * @returns parsed response from AirbyteIntegrationConnectMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AirbyteIntegrationConnectDocument, {
                    input,
                });
                const data = response.airbyteIntegrationConnect;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateAttachment Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateAttachmentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateAttachment mutation and return a AttachmentPayload
         *
         * @param input - required input to pass to createAttachment
         * @returns parsed response from CreateAttachmentMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateAttachmentDocument, {
                    input,
                });
                const data = response.attachmentCreate;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteAttachment Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteAttachmentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteAttachment mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteAttachment
         * @returns parsed response from DeleteAttachmentMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteAttachmentDocument, {
                    id,
                });
                const data = response.attachmentDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkDiscord Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkDiscordMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkDiscord mutation and return a AttachmentPayload
         *
         * @param channelId - required channelId to pass to attachmentLinkDiscord
         * @param issueId - required issueId to pass to attachmentLinkDiscord
         * @param messageId - required messageId to pass to attachmentLinkDiscord
         * @param url - required url to pass to attachmentLinkDiscord
         * @param variables - variables without 'channelId', 'issueId', 'messageId', 'url' to pass into the AttachmentLinkDiscordMutation
         * @returns parsed response from AttachmentLinkDiscordMutation
         */
        fetch(channelId, issueId, messageId, url, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkDiscordDocument, Object.assign({ channelId,
                    issueId,
                    messageId,
                    url }, variables));
                const data = response.attachmentLinkDiscord;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkFront Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkFrontMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkFront mutation and return a FrontAttachmentPayload
         *
         * @param conversationId - required conversationId to pass to attachmentLinkFront
         * @param issueId - required issueId to pass to attachmentLinkFront
         * @param variables - variables without 'conversationId', 'issueId' to pass into the AttachmentLinkFrontMutation
         * @returns parsed response from AttachmentLinkFrontMutation
         */
        fetch(conversationId, issueId, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkFrontDocument, Object.assign({ conversationId,
                    issueId }, variables));
                const data = response.attachmentLinkFront;
                return new FrontAttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkGitHubIssue Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkGitHubIssueMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkGitHubIssue mutation and return a AttachmentPayload
         *
         * @param issueId - required issueId to pass to attachmentLinkGitHubIssue
         * @param url - required url to pass to attachmentLinkGitHubIssue
         * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkGitHubIssueMutation
         * @returns parsed response from AttachmentLinkGitHubIssueMutation
         */
        fetch(issueId, url, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkGitHubIssueDocument, Object.assign({ issueId,
                    url }, variables));
                const data = response.attachmentLinkGitHubIssue;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkGitHubPr Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkGitHubPrMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkGitHubPr mutation and return a AttachmentPayload
         *
         * @param issueId - required issueId to pass to attachmentLinkGitHubPR
         * @param url - required url to pass to attachmentLinkGitHubPR
         * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkGitHubPrMutation
         * @returns parsed response from AttachmentLinkGitHubPrMutation
         */
        fetch(issueId, url, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkGitHubPrDocument, Object.assign({ issueId,
                    url }, variables));
                const data = response.attachmentLinkGitHubPR;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkGitLabMr Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkGitLabMrMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkGitLabMr mutation and return a AttachmentPayload
         *
         * @param issueId - required issueId to pass to attachmentLinkGitLabMR
         * @param number - required number to pass to attachmentLinkGitLabMR
         * @param projectPathWithNamespace - required projectPathWithNamespace to pass to attachmentLinkGitLabMR
         * @param url - required url to pass to attachmentLinkGitLabMR
         * @param variables - variables without 'issueId', 'number', 'projectPathWithNamespace', 'url' to pass into the AttachmentLinkGitLabMrMutation
         * @returns parsed response from AttachmentLinkGitLabMrMutation
         */
        fetch(issueId, number, projectPathWithNamespace, url, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkGitLabMrDocument, Object.assign({ issueId,
                    number,
                    projectPathWithNamespace,
                    url }, variables));
                const data = response.attachmentLinkGitLabMR;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkIntercom Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkIntercomMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkIntercom mutation and return a AttachmentPayload
         *
         * @param conversationId - required conversationId to pass to attachmentLinkIntercom
         * @param issueId - required issueId to pass to attachmentLinkIntercom
         * @param variables - variables without 'conversationId', 'issueId' to pass into the AttachmentLinkIntercomMutation
         * @returns parsed response from AttachmentLinkIntercomMutation
         */
        fetch(conversationId, issueId, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkIntercomDocument, Object.assign({ conversationId,
                    issueId }, variables));
                const data = response.attachmentLinkIntercom;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkJiraIssue Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkJiraIssueMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkJiraIssue mutation and return a AttachmentPayload
         *
         * @param issueId - required issueId to pass to attachmentLinkJiraIssue
         * @param jiraIssueId - required jiraIssueId to pass to attachmentLinkJiraIssue
         * @param variables - variables without 'issueId', 'jiraIssueId' to pass into the AttachmentLinkJiraIssueMutation
         * @returns parsed response from AttachmentLinkJiraIssueMutation
         */
        fetch(issueId, jiraIssueId, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkJiraIssueDocument, Object.assign({ issueId,
                    jiraIssueId }, variables));
                const data = response.attachmentLinkJiraIssue;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkSalesforce Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkSalesforceMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkSalesforce mutation and return a AttachmentPayload
         *
         * @param issueId - required issueId to pass to attachmentLinkSalesforce
         * @param url - required url to pass to attachmentLinkSalesforce
         * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkSalesforceMutation
         * @returns parsed response from AttachmentLinkSalesforceMutation
         */
        fetch(issueId, url, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkSalesforceDocument, Object.assign({ issueId,
                    url }, variables));
                const data = response.attachmentLinkSalesforce;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkSlack Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkSlackMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkSlack mutation and return a AttachmentPayload
         *
         * @param issueId - required issueId to pass to attachmentLinkSlack
         * @param url - required url to pass to attachmentLinkSlack
         * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkSlackMutation
         * @returns parsed response from AttachmentLinkSlackMutation
         */
        fetch(issueId, url, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkSlackDocument, Object.assign({ issueId,
                    url }, variables));
                const data = response.attachmentLinkSlack;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkUrl Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkUrlMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkUrl mutation and return a AttachmentPayload
         *
         * @param issueId - required issueId to pass to attachmentLinkURL
         * @param url - required url to pass to attachmentLinkURL
         * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkUrlMutation
         * @returns parsed response from AttachmentLinkUrlMutation
         */
        fetch(issueId, url, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkUrlDocument, Object.assign({ issueId,
                    url }, variables));
                const data = response.attachmentLinkURL;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentLinkZendesk Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentLinkZendeskMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentLinkZendesk mutation and return a AttachmentPayload
         *
         * @param issueId - required issueId to pass to attachmentLinkZendesk
         * @param ticketId - required ticketId to pass to attachmentLinkZendesk
         * @param variables - variables without 'issueId', 'ticketId' to pass into the AttachmentLinkZendeskMutation
         * @returns parsed response from AttachmentLinkZendeskMutation
         */
        fetch(issueId, ticketId, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentLinkZendeskDocument, Object.assign({ issueId,
                    ticketId }, variables));
                const data = response.attachmentLinkZendesk;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AttachmentSyncToSlack Mutation
     *
     * @param request - function to call the graphql client
     */
    class AttachmentSyncToSlackMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the AttachmentSyncToSlack mutation and return a AttachmentPayload
         *
         * @param id - required id to pass to attachmentSyncToSlack
         * @returns parsed response from AttachmentSyncToSlackMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentSyncToSlackDocument, {
                    id,
                });
                const data = response.attachmentSyncToSlack;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateAttachment Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateAttachmentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateAttachment mutation and return a AttachmentPayload
         *
         * @param id - required id to pass to updateAttachment
         * @param input - required input to pass to updateAttachment
         * @returns parsed response from UpdateAttachmentMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateAttachmentDocument, {
                    id,
                    input,
                });
                const data = response.attachmentUpdate;
                return new AttachmentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateComment Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateCommentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateComment mutation and return a CommentPayload
         *
         * @param input - required input to pass to createComment
         * @returns parsed response from CreateCommentMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateCommentDocument, {
                    input,
                });
                const data = response.commentCreate;
                return new CommentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteComment Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteCommentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteComment mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteComment
         * @returns parsed response from DeleteCommentMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteCommentDocument, {
                    id,
                });
                const data = response.commentDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CommentResolve Mutation
     *
     * @param request - function to call the graphql client
     */
    class CommentResolveMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CommentResolve mutation and return a CommentPayload
         *
         * @param id - required id to pass to commentResolve
         * @param variables - variables without 'id' to pass into the CommentResolveMutation
         * @returns parsed response from CommentResolveMutation
         */
        fetch(id, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CommentResolveDocument, Object.assign({ id }, variables));
                const data = response.commentResolve;
                return new CommentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CommentUnresolve Mutation
     *
     * @param request - function to call the graphql client
     */
    class CommentUnresolveMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CommentUnresolve mutation and return a CommentPayload
         *
         * @param id - required id to pass to commentUnresolve
         * @returns parsed response from CommentUnresolveMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CommentUnresolveDocument, {
                    id,
                });
                const data = response.commentUnresolve;
                return new CommentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateComment Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateCommentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateComment mutation and return a CommentPayload
         *
         * @param id - required id to pass to updateComment
         * @param input - required input to pass to updateComment
         * @returns parsed response from UpdateCommentMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateCommentDocument, {
                    id,
                    input,
                });
                const data = response.commentUpdate;
                return new CommentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateContact Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateContactMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateContact mutation and return a ContactPayload
         *
         * @param input - required input to pass to createContact
         * @returns parsed response from CreateContactMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateContactDocument, {
                    input,
                });
                const data = response.contactCreate;
                return new ContactPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateCsvExportReport Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateCsvExportReportMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateCsvExportReport mutation and return a CreateCsvExportReportPayload
         *
         * @param variables - variables to pass into the CreateCsvExportReportMutation
         * @returns parsed response from CreateCsvExportReportMutation
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateCsvExportReportDocument, variables);
                const data = response.createCsvExportReport;
                return new CreateCsvExportReportPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateInitiativeUpdateReminder Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateInitiativeUpdateReminderMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateInitiativeUpdateReminder mutation and return a InitiativeUpdateReminderPayload
         *
         * @param initiativeId - required initiativeId to pass to createInitiativeUpdateReminder
         * @param variables - variables without 'initiativeId' to pass into the CreateInitiativeUpdateReminderMutation
         * @returns parsed response from CreateInitiativeUpdateReminderMutation
         */
        fetch(initiativeId, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateInitiativeUpdateReminderDocument, Object.assign({ initiativeId }, variables));
                const data = response.createInitiativeUpdateReminder;
                return new InitiativeUpdateReminderPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateOrganizationFromOnboarding Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateOrganizationFromOnboardingMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateOrganizationFromOnboarding mutation and return a CreateOrJoinOrganizationResponse
         *
         * @param input - required input to pass to createOrganizationFromOnboarding
         * @param variables - variables without 'input' to pass into the CreateOrganizationFromOnboardingMutation
         * @returns parsed response from CreateOrganizationFromOnboardingMutation
         */
        fetch(input, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateOrganizationFromOnboardingDocument, Object.assign({ input }, variables));
                const data = response.createOrganizationFromOnboarding;
                return new CreateOrJoinOrganizationResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateProjectUpdateReminder Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateProjectUpdateReminderMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateProjectUpdateReminder mutation and return a ProjectUpdateReminderPayload
         *
         * @param projectId - required projectId to pass to createProjectUpdateReminder
         * @param variables - variables without 'projectId' to pass into the CreateProjectUpdateReminderMutation
         * @returns parsed response from CreateProjectUpdateReminderMutation
         */
        fetch(projectId, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateProjectUpdateReminderDocument, Object.assign({ projectId }, variables));
                const data = response.createProjectUpdateReminder;
                return new ProjectUpdateReminderPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateCustomView Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateCustomViewMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateCustomView mutation and return a CustomViewPayload
         *
         * @param input - required input to pass to createCustomView
         * @returns parsed response from CreateCustomViewMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateCustomViewDocument, {
                    input,
                });
                const data = response.customViewCreate;
                return new CustomViewPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteCustomView Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteCustomViewMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteCustomView mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteCustomView
         * @returns parsed response from DeleteCustomViewMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteCustomViewDocument, {
                    id,
                });
                const data = response.customViewDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateCustomView Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateCustomViewMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateCustomView mutation and return a CustomViewPayload
         *
         * @param id - required id to pass to updateCustomView
         * @param input - required input to pass to updateCustomView
         * @returns parsed response from UpdateCustomViewMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateCustomViewDocument, {
                    id,
                    input,
                });
                const data = response.customViewUpdate;
                return new CustomViewPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateCustomer Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateCustomerMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateCustomer mutation and return a CustomerPayload
         *
         * @param input - required input to pass to createCustomer
         * @returns parsed response from CreateCustomerMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateCustomerDocument, {
                    input,
                });
                const data = response.customerCreate;
                return new CustomerPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteCustomer Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteCustomerMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteCustomer mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteCustomer
         * @returns parsed response from DeleteCustomerMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteCustomerDocument, {
                    id,
                });
                const data = response.customerDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CustomerMerge Mutation
     *
     * @param request - function to call the graphql client
     */
    class CustomerMergeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomerMerge mutation and return a CustomerPayload
         *
         * @param sourceCustomerId - required sourceCustomerId to pass to customerMerge
         * @param targetCustomerId - required targetCustomerId to pass to customerMerge
         * @returns parsed response from CustomerMergeMutation
         */
        fetch(sourceCustomerId, targetCustomerId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomerMergeDocument, {
                    sourceCustomerId,
                    targetCustomerId,
                });
                const data = response.customerMerge;
                return new CustomerPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveCustomerNeed Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveCustomerNeedMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveCustomerNeed mutation and return a CustomerNeedArchivePayload
         *
         * @param id - required id to pass to archiveCustomerNeed
         * @returns parsed response from ArchiveCustomerNeedMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveCustomerNeedDocument, {
                    id,
                });
                const data = response.customerNeedArchive;
                return new CustomerNeedArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateCustomerNeed Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateCustomerNeedMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateCustomerNeed mutation and return a CustomerNeedPayload
         *
         * @param input - required input to pass to createCustomerNeed
         * @returns parsed response from CreateCustomerNeedMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateCustomerNeedDocument, {
                    input,
                });
                const data = response.customerNeedCreate;
                return new CustomerNeedPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CustomerNeedCreateFromAttachment Mutation
     *
     * @param request - function to call the graphql client
     */
    class CustomerNeedCreateFromAttachmentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomerNeedCreateFromAttachment mutation and return a CustomerNeedPayload
         *
         * @param input - required input to pass to customerNeedCreateFromAttachment
         * @returns parsed response from CustomerNeedCreateFromAttachmentMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomerNeedCreateFromAttachmentDocument, {
                    input,
                });
                const data = response.customerNeedCreateFromAttachment;
                return new CustomerNeedPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteCustomerNeed Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteCustomerNeedMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteCustomerNeed mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteCustomerNeed
         * @param variables - variables without 'id' to pass into the DeleteCustomerNeedMutation
         * @returns parsed response from DeleteCustomerNeedMutation
         */
        fetch(id, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteCustomerNeedDocument, Object.assign({ id }, variables));
                const data = response.customerNeedDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnarchiveCustomerNeed Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnarchiveCustomerNeedMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnarchiveCustomerNeed mutation and return a CustomerNeedArchivePayload
         *
         * @param id - required id to pass to unarchiveCustomerNeed
         * @returns parsed response from UnarchiveCustomerNeedMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnarchiveCustomerNeedDocument, {
                    id,
                });
                const data = response.customerNeedUnarchive;
                return new CustomerNeedArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateCustomerNeed Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateCustomerNeedMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateCustomerNeed mutation and return a CustomerNeedUpdatePayload
         *
         * @param id - required id to pass to updateCustomerNeed
         * @param input - required input to pass to updateCustomerNeed
         * @returns parsed response from UpdateCustomerNeedMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateCustomerNeedDocument, {
                    id,
                    input,
                });
                const data = response.customerNeedUpdate;
                return new CustomerNeedUpdatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateCustomerStatus Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateCustomerStatusMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateCustomerStatus mutation and return a CustomerStatusPayload
         *
         * @param input - required input to pass to createCustomerStatus
         * @returns parsed response from CreateCustomerStatusMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateCustomerStatusDocument, {
                    input,
                });
                const data = response.customerStatusCreate;
                return new CustomerStatusPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteCustomerStatus Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteCustomerStatusMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteCustomerStatus mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteCustomerStatus
         * @returns parsed response from DeleteCustomerStatusMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteCustomerStatusDocument, {
                    id,
                });
                const data = response.customerStatusDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateCustomerStatus Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateCustomerStatusMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateCustomerStatus mutation and return a CustomerStatusPayload
         *
         * @param id - required id to pass to updateCustomerStatus
         * @param input - required input to pass to updateCustomerStatus
         * @returns parsed response from UpdateCustomerStatusMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateCustomerStatusDocument, {
                    id,
                    input,
                });
                const data = response.customerStatusUpdate;
                return new CustomerStatusPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateCustomerTier Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateCustomerTierMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateCustomerTier mutation and return a CustomerTierPayload
         *
         * @param input - required input to pass to createCustomerTier
         * @returns parsed response from CreateCustomerTierMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateCustomerTierDocument, {
                    input,
                });
                const data = response.customerTierCreate;
                return new CustomerTierPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteCustomerTier Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteCustomerTierMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteCustomerTier mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteCustomerTier
         * @returns parsed response from DeleteCustomerTierMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteCustomerTierDocument, {
                    id,
                });
                const data = response.customerTierDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateCustomerTier Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateCustomerTierMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateCustomerTier mutation and return a CustomerTierPayload
         *
         * @param id - required id to pass to updateCustomerTier
         * @param input - required input to pass to updateCustomerTier
         * @returns parsed response from UpdateCustomerTierMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateCustomerTierDocument, {
                    id,
                    input,
                });
                const data = response.customerTierUpdate;
                return new CustomerTierPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateCustomer Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateCustomerMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateCustomer mutation and return a CustomerPayload
         *
         * @param id - required id to pass to updateCustomer
         * @param input - required input to pass to updateCustomer
         * @returns parsed response from UpdateCustomerMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateCustomerDocument, {
                    id,
                    input,
                });
                const data = response.customerUpdate;
                return new CustomerPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CustomerUpsert Mutation
     *
     * @param request - function to call the graphql client
     */
    class CustomerUpsertMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CustomerUpsert mutation and return a CustomerPayload
         *
         * @param input - required input to pass to customerUpsert
         * @returns parsed response from CustomerUpsertMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomerUpsertDocument, {
                    input,
                });
                const data = response.customerUpsert;
                return new CustomerPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveCycle Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveCycleMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveCycle mutation and return a CycleArchivePayload
         *
         * @param id - required id to pass to archiveCycle
         * @returns parsed response from ArchiveCycleMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveCycleDocument, {
                    id,
                });
                const data = response.cycleArchive;
                return new CycleArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateCycle Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateCycleMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateCycle mutation and return a CyclePayload
         *
         * @param input - required input to pass to createCycle
         * @returns parsed response from CreateCycleMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateCycleDocument, {
                    input,
                });
                const data = response.cycleCreate;
                return new CyclePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CycleShiftAll Mutation
     *
     * @param request - function to call the graphql client
     */
    class CycleShiftAllMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CycleShiftAll mutation and return a CyclePayload
         *
         * @param input - required input to pass to cycleShiftAll
         * @returns parsed response from CycleShiftAllMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CycleShiftAllDocument, {
                    input,
                });
                const data = response.cycleShiftAll;
                return new CyclePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CycleStartUpcomingCycleToday Mutation
     *
     * @param request - function to call the graphql client
     */
    class CycleStartUpcomingCycleTodayMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CycleStartUpcomingCycleToday mutation and return a CyclePayload
         *
         * @param id - required id to pass to cycleStartUpcomingCycleToday
         * @returns parsed response from CycleStartUpcomingCycleTodayMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CycleStartUpcomingCycleTodayDocument, {
                    id,
                });
                const data = response.cycleStartUpcomingCycleToday;
                return new CyclePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateCycle Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateCycleMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateCycle mutation and return a CyclePayload
         *
         * @param id - required id to pass to updateCycle
         * @param input - required input to pass to updateCycle
         * @returns parsed response from UpdateCycleMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateCycleDocument, {
                    id,
                    input,
                });
                const data = response.cycleUpdate;
                return new CyclePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateDocument Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateDocumentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateDocument mutation and return a DocumentPayload
         *
         * @param input - required input to pass to createDocument
         * @returns parsed response from CreateDocumentMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateDocumentDocument, {
                    input,
                });
                const data = response.documentCreate;
                return new DocumentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteDocument Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteDocumentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteDocument mutation and return a DocumentArchivePayload
         *
         * @param id - required id to pass to deleteDocument
         * @returns parsed response from DeleteDocumentMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteDocumentDocument, {
                    id,
                });
                const data = response.documentDelete;
                return new DocumentArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnarchiveDocument Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnarchiveDocumentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnarchiveDocument mutation and return a DocumentArchivePayload
         *
         * @param id - required id to pass to unarchiveDocument
         * @returns parsed response from UnarchiveDocumentMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnarchiveDocumentDocument, {
                    id,
                });
                const data = response.documentUnarchive;
                return new DocumentArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateDocument Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateDocumentMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateDocument mutation and return a DocumentPayload
         *
         * @param id - required id to pass to updateDocument
         * @param input - required input to pass to updateDocument
         * @returns parsed response from UpdateDocumentMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateDocumentDocument, {
                    id,
                    input,
                });
                const data = response.documentUpdate;
                return new DocumentPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateEmailIntakeAddress Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateEmailIntakeAddressMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateEmailIntakeAddress mutation and return a EmailIntakeAddressPayload
         *
         * @param input - required input to pass to createEmailIntakeAddress
         * @returns parsed response from CreateEmailIntakeAddressMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateEmailIntakeAddressDocument, {
                    input,
                });
                const data = response.emailIntakeAddressCreate;
                return new EmailIntakeAddressPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteEmailIntakeAddress Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteEmailIntakeAddressMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteEmailIntakeAddress mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteEmailIntakeAddress
         * @returns parsed response from DeleteEmailIntakeAddressMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteEmailIntakeAddressDocument, {
                    id,
                });
                const data = response.emailIntakeAddressDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable EmailIntakeAddressRotate Mutation
     *
     * @param request - function to call the graphql client
     */
    class EmailIntakeAddressRotateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the EmailIntakeAddressRotate mutation and return a EmailIntakeAddressPayload
         *
         * @param id - required id to pass to emailIntakeAddressRotate
         * @returns parsed response from EmailIntakeAddressRotateMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(EmailIntakeAddressRotateDocument, {
                    id,
                });
                const data = response.emailIntakeAddressRotate;
                return new EmailIntakeAddressPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateEmailIntakeAddress Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateEmailIntakeAddressMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateEmailIntakeAddress mutation and return a EmailIntakeAddressPayload
         *
         * @param id - required id to pass to updateEmailIntakeAddress
         * @param input - required input to pass to updateEmailIntakeAddress
         * @returns parsed response from UpdateEmailIntakeAddressMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateEmailIntakeAddressDocument, {
                    id,
                    input,
                });
                const data = response.emailIntakeAddressUpdate;
                return new EmailIntakeAddressPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable EmailTokenUserAccountAuth Mutation
     *
     * @param request - function to call the graphql client
     */
    class EmailTokenUserAccountAuthMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the EmailTokenUserAccountAuth mutation and return a AuthResolverResponse
         *
         * @param input - required input to pass to emailTokenUserAccountAuth
         * @returns parsed response from EmailTokenUserAccountAuthMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(EmailTokenUserAccountAuthDocument, {
                    input,
                });
                const data = response.emailTokenUserAccountAuth;
                return new AuthResolverResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable EmailUnsubscribe Mutation
     *
     * @param request - function to call the graphql client
     */
    class EmailUnsubscribeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the EmailUnsubscribe mutation and return a EmailUnsubscribePayload
         *
         * @param input - required input to pass to emailUnsubscribe
         * @returns parsed response from EmailUnsubscribeMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(EmailUnsubscribeDocument, {
                    input,
                });
                const data = response.emailUnsubscribe;
                return new EmailUnsubscribePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable EmailUserAccountAuthChallenge Mutation
     *
     * @param request - function to call the graphql client
     */
    class EmailUserAccountAuthChallengeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the EmailUserAccountAuthChallenge mutation and return a EmailUserAccountAuthChallengeResponse
         *
         * @param input - required input to pass to emailUserAccountAuthChallenge
         * @returns parsed response from EmailUserAccountAuthChallengeMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(EmailUserAccountAuthChallengeDocument, {
                    input,
                });
                const data = response.emailUserAccountAuthChallenge;
                return new EmailUserAccountAuthChallengeResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateEmoji Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateEmojiMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateEmoji mutation and return a EmojiPayload
         *
         * @param input - required input to pass to createEmoji
         * @returns parsed response from CreateEmojiMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateEmojiDocument, {
                    input,
                });
                const data = response.emojiCreate;
                return new EmojiPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteEmoji Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteEmojiMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteEmoji mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteEmoji
         * @returns parsed response from DeleteEmojiMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteEmojiDocument, {
                    id,
                });
                const data = response.emojiDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateEntityExternalLink Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateEntityExternalLinkMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateEntityExternalLink mutation and return a EntityExternalLinkPayload
         *
         * @param input - required input to pass to createEntityExternalLink
         * @returns parsed response from CreateEntityExternalLinkMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateEntityExternalLinkDocument, {
                    input,
                });
                const data = response.entityExternalLinkCreate;
                return new EntityExternalLinkPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteEntityExternalLink Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteEntityExternalLinkMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteEntityExternalLink mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteEntityExternalLink
         * @returns parsed response from DeleteEntityExternalLinkMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteEntityExternalLinkDocument, {
                    id,
                });
                const data = response.entityExternalLinkDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateEntityExternalLink Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateEntityExternalLinkMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateEntityExternalLink mutation and return a EntityExternalLinkPayload
         *
         * @param id - required id to pass to updateEntityExternalLink
         * @param input - required input to pass to updateEntityExternalLink
         * @returns parsed response from UpdateEntityExternalLinkMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateEntityExternalLinkDocument, {
                    id,
                    input,
                });
                const data = response.entityExternalLinkUpdate;
                return new EntityExternalLinkPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateFavorite Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateFavoriteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateFavorite mutation and return a FavoritePayload
         *
         * @param input - required input to pass to createFavorite
         * @returns parsed response from CreateFavoriteMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateFavoriteDocument, {
                    input,
                });
                const data = response.favoriteCreate;
                return new FavoritePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteFavorite Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteFavoriteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteFavorite mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteFavorite
         * @returns parsed response from DeleteFavoriteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteFavoriteDocument, {
                    id,
                });
                const data = response.favoriteDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateFavorite Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateFavoriteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateFavorite mutation and return a FavoritePayload
         *
         * @param id - required id to pass to updateFavorite
         * @param input - required input to pass to updateFavorite
         * @returns parsed response from UpdateFavoriteMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateFavoriteDocument, {
                    id,
                    input,
                });
                const data = response.favoriteUpdate;
                return new FavoritePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable FileUpload Mutation
     *
     * @param request - function to call the graphql client
     */
    class FileUploadMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the FileUpload mutation and return a UploadPayload
         *
         * @param contentType - required contentType to pass to fileUpload
         * @param filename - required filename to pass to fileUpload
         * @param size - required size to pass to fileUpload
         * @param variables - variables without 'contentType', 'filename', 'size' to pass into the FileUploadMutation
         * @returns parsed response from FileUploadMutation
         */
        fetch(contentType, filename, size, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(FileUploadDocument, Object.assign({ contentType,
                    filename,
                    size }, variables));
                const data = response.fileUpload;
                return new UploadPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateGitAutomationState Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateGitAutomationStateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateGitAutomationState mutation and return a GitAutomationStatePayload
         *
         * @param input - required input to pass to createGitAutomationState
         * @returns parsed response from CreateGitAutomationStateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateGitAutomationStateDocument, {
                    input,
                });
                const data = response.gitAutomationStateCreate;
                return new GitAutomationStatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteGitAutomationState Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteGitAutomationStateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteGitAutomationState mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteGitAutomationState
         * @returns parsed response from DeleteGitAutomationStateMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteGitAutomationStateDocument, {
                    id,
                });
                const data = response.gitAutomationStateDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateGitAutomationState Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateGitAutomationStateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateGitAutomationState mutation and return a GitAutomationStatePayload
         *
         * @param id - required id to pass to updateGitAutomationState
         * @param input - required input to pass to updateGitAutomationState
         * @returns parsed response from UpdateGitAutomationStateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateGitAutomationStateDocument, {
                    id,
                    input,
                });
                const data = response.gitAutomationStateUpdate;
                return new GitAutomationStatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateGitAutomationTargetBranch Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateGitAutomationTargetBranchMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateGitAutomationTargetBranch mutation and return a GitAutomationTargetBranchPayload
         *
         * @param input - required input to pass to createGitAutomationTargetBranch
         * @returns parsed response from CreateGitAutomationTargetBranchMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateGitAutomationTargetBranchDocument, {
                    input,
                });
                const data = response.gitAutomationTargetBranchCreate;
                return new GitAutomationTargetBranchPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteGitAutomationTargetBranch Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteGitAutomationTargetBranchMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteGitAutomationTargetBranch mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteGitAutomationTargetBranch
         * @returns parsed response from DeleteGitAutomationTargetBranchMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteGitAutomationTargetBranchDocument, {
                    id,
                });
                const data = response.gitAutomationTargetBranchDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateGitAutomationTargetBranch Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateGitAutomationTargetBranchMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateGitAutomationTargetBranch mutation and return a GitAutomationTargetBranchPayload
         *
         * @param id - required id to pass to updateGitAutomationTargetBranch
         * @param input - required input to pass to updateGitAutomationTargetBranch
         * @returns parsed response from UpdateGitAutomationTargetBranchMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateGitAutomationTargetBranchDocument, {
                    id,
                    input,
                });
                const data = response.gitAutomationTargetBranchUpdate;
                return new GitAutomationTargetBranchPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable GoogleUserAccountAuth Mutation
     *
     * @param request - function to call the graphql client
     */
    class GoogleUserAccountAuthMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the GoogleUserAccountAuth mutation and return a AuthResolverResponse
         *
         * @param input - required input to pass to googleUserAccountAuth
         * @returns parsed response from GoogleUserAccountAuthMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(GoogleUserAccountAuthDocument, {
                    input,
                });
                const data = response.googleUserAccountAuth;
                return new AuthResolverResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable ImageUploadFromUrl Mutation
     *
     * @param request - function to call the graphql client
     */
    class ImageUploadFromUrlMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ImageUploadFromUrl mutation and return a ImageUploadFromUrlPayload
         *
         * @param url - required url to pass to imageUploadFromUrl
         * @returns parsed response from ImageUploadFromUrlMutation
         */
        fetch(url) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ImageUploadFromUrlDocument, {
                    url,
                });
                const data = response.imageUploadFromUrl;
                return new ImageUploadFromUrlPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ImportFileUpload Mutation
     *
     * @param request - function to call the graphql client
     */
    class ImportFileUploadMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ImportFileUpload mutation and return a UploadPayload
         *
         * @param contentType - required contentType to pass to importFileUpload
         * @param filename - required filename to pass to importFileUpload
         * @param size - required size to pass to importFileUpload
         * @param variables - variables without 'contentType', 'filename', 'size' to pass into the ImportFileUploadMutation
         * @returns parsed response from ImportFileUploadMutation
         */
        fetch(contentType, filename, size, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ImportFileUploadDocument, Object.assign({ contentType,
                    filename,
                    size }, variables));
                const data = response.importFileUpload;
                return new UploadPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveInitiative Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveInitiativeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveInitiative mutation and return a InitiativeArchivePayload
         *
         * @param id - required id to pass to archiveInitiative
         * @returns parsed response from ArchiveInitiativeMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveInitiativeDocument, {
                    id,
                });
                const data = response.initiativeArchive;
                return new InitiativeArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateInitiative Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateInitiativeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateInitiative mutation and return a InitiativePayload
         *
         * @param input - required input to pass to createInitiative
         * @returns parsed response from CreateInitiativeMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateInitiativeDocument, {
                    input,
                });
                const data = response.initiativeCreate;
                return new InitiativePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteInitiative Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteInitiativeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteInitiative mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteInitiative
         * @returns parsed response from DeleteInitiativeMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteInitiativeDocument, {
                    id,
                });
                const data = response.initiativeDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateInitiativeRelation Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateInitiativeRelationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateInitiativeRelation mutation and return a InitiativeRelationPayload
         *
         * @param input - required input to pass to createInitiativeRelation
         * @returns parsed response from CreateInitiativeRelationMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateInitiativeRelationDocument, {
                    input,
                });
                const data = response.initiativeRelationCreate;
                return new InitiativeRelationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteInitiativeRelation Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteInitiativeRelationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteInitiativeRelation mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteInitiativeRelation
         * @returns parsed response from DeleteInitiativeRelationMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteInitiativeRelationDocument, {
                    id,
                });
                const data = response.initiativeRelationDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateInitiativeRelation Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateInitiativeRelationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateInitiativeRelation mutation and return a DeletePayload
         *
         * @param id - required id to pass to updateInitiativeRelation
         * @param input - required input to pass to updateInitiativeRelation
         * @returns parsed response from UpdateInitiativeRelationMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateInitiativeRelationDocument, {
                    id,
                    input,
                });
                const data = response.initiativeRelationUpdate;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateInitiativeToProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateInitiativeToProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateInitiativeToProject mutation and return a InitiativeToProjectPayload
         *
         * @param input - required input to pass to createInitiativeToProject
         * @returns parsed response from CreateInitiativeToProjectMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateInitiativeToProjectDocument, {
                    input,
                });
                const data = response.initiativeToProjectCreate;
                return new InitiativeToProjectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteInitiativeToProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteInitiativeToProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteInitiativeToProject mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteInitiativeToProject
         * @returns parsed response from DeleteInitiativeToProjectMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteInitiativeToProjectDocument, {
                    id,
                });
                const data = response.initiativeToProjectDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateInitiativeToProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateInitiativeToProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateInitiativeToProject mutation and return a InitiativeToProjectPayload
         *
         * @param id - required id to pass to updateInitiativeToProject
         * @param input - required input to pass to updateInitiativeToProject
         * @returns parsed response from UpdateInitiativeToProjectMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateInitiativeToProjectDocument, {
                    id,
                    input,
                });
                const data = response.initiativeToProjectUpdate;
                return new InitiativeToProjectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnarchiveInitiative Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnarchiveInitiativeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnarchiveInitiative mutation and return a InitiativeArchivePayload
         *
         * @param id - required id to pass to unarchiveInitiative
         * @returns parsed response from UnarchiveInitiativeMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnarchiveInitiativeDocument, {
                    id,
                });
                const data = response.initiativeUnarchive;
                return new InitiativeArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateInitiative Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateInitiativeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateInitiative mutation and return a InitiativePayload
         *
         * @param id - required id to pass to updateInitiative
         * @param input - required input to pass to updateInitiative
         * @returns parsed response from UpdateInitiativeMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateInitiativeDocument, {
                    id,
                    input,
                });
                const data = response.initiativeUpdate;
                return new InitiativePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveInitiativeUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveInitiativeUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveInitiativeUpdate mutation and return a InitiativeUpdateArchivePayload
         *
         * @param id - required id to pass to archiveInitiativeUpdate
         * @returns parsed response from ArchiveInitiativeUpdateMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveInitiativeUpdateDocument, {
                    id,
                });
                const data = response.initiativeUpdateArchive;
                return new InitiativeUpdateArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateInitiativeUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateInitiativeUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateInitiativeUpdate mutation and return a InitiativeUpdatePayload
         *
         * @param input - required input to pass to createInitiativeUpdate
         * @returns parsed response from CreateInitiativeUpdateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateInitiativeUpdateDocument, {
                    input,
                });
                const data = response.initiativeUpdateCreate;
                return new InitiativeUpdatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnarchiveInitiativeUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnarchiveInitiativeUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnarchiveInitiativeUpdate mutation and return a InitiativeUpdateArchivePayload
         *
         * @param id - required id to pass to unarchiveInitiativeUpdate
         * @returns parsed response from UnarchiveInitiativeUpdateMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnarchiveInitiativeUpdateDocument, {
                    id,
                });
                const data = response.initiativeUpdateUnarchive;
                return new InitiativeUpdateArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateInitiativeUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateInitiativeUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateInitiativeUpdate mutation and return a InitiativeUpdatePayload
         *
         * @param id - required id to pass to updateInitiativeUpdate
         * @param input - required input to pass to updateInitiativeUpdate
         * @returns parsed response from UpdateInitiativeUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateInitiativeUpdateDocument, {
                    id,
                    input,
                });
                const data = response.initiativeUpdateUpdate;
                return new InitiativeUpdatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveIntegration Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveIntegrationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveIntegration mutation and return a DeletePayload
         *
         * @param id - required id to pass to archiveIntegration
         * @returns parsed response from ArchiveIntegrationMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveIntegrationDocument, {
                    id,
                });
                const data = response.integrationArchive;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationAsksConnectChannel Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationAsksConnectChannelMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationAsksConnectChannel mutation and return a AsksChannelConnectPayload
         *
         * @param code - required code to pass to integrationAsksConnectChannel
         * @param redirectUri - required redirectUri to pass to integrationAsksConnectChannel
         * @returns parsed response from IntegrationAsksConnectChannelMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationAsksConnectChannelDocument, {
                    code,
                    redirectUri,
                });
                const data = response.integrationAsksConnectChannel;
                return new AsksChannelConnectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteIntegration Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteIntegrationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteIntegration mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteIntegration
         * @param variables - variables without 'id' to pass into the DeleteIntegrationMutation
         * @returns parsed response from DeleteIntegrationMutation
         */
        fetch(id, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteIntegrationDocument, Object.assign({ id }, variables));
                const data = response.integrationDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationDiscord Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationDiscordMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationDiscord mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationDiscord
         * @param redirectUri - required redirectUri to pass to integrationDiscord
         * @returns parsed response from IntegrationDiscordMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationDiscordDocument, {
                    code,
                    redirectUri,
                });
                const data = response.integrationDiscord;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationFigma Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationFigmaMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationFigma mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationFigma
         * @param redirectUri - required redirectUri to pass to integrationFigma
         * @returns parsed response from IntegrationFigmaMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationFigmaDocument, {
                    code,
                    redirectUri,
                });
                const data = response.integrationFigma;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationFront Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationFrontMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationFront mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationFront
         * @param redirectUri - required redirectUri to pass to integrationFront
         * @returns parsed response from IntegrationFrontMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationFrontDocument, {
                    code,
                    redirectUri,
                });
                const data = response.integrationFront;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationGitHubEnterpriseServerConnect Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationGitHubEnterpriseServerConnectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationGitHubEnterpriseServerConnect mutation and return a GitHubEnterpriseServerPayload
         *
         * @param githubUrl - required githubUrl to pass to integrationGitHubEnterpriseServerConnect
         * @param organizationName - required organizationName to pass to integrationGitHubEnterpriseServerConnect
         * @returns parsed response from IntegrationGitHubEnterpriseServerConnectMutation
         */
        fetch(githubUrl, organizationName) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationGitHubEnterpriseServerConnectDocument, {
                    githubUrl,
                    organizationName,
                });
                const data = response.integrationGitHubEnterpriseServerConnect;
                return new GitHubEnterpriseServerPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationGitHubPersonal Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationGitHubPersonalMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationGitHubPersonal mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationGitHubPersonal
         * @param variables - variables without 'code' to pass into the IntegrationGitHubPersonalMutation
         * @returns parsed response from IntegrationGitHubPersonalMutation
         */
        fetch(code, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationGitHubPersonalDocument, Object.assign({ code }, variables));
                const data = response.integrationGitHubPersonal;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateIntegrationGithubCommit Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateIntegrationGithubCommitMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateIntegrationGithubCommit mutation and return a GitHubCommitIntegrationPayload
         *
         * @returns parsed response from CreateIntegrationGithubCommitMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateIntegrationGithubCommitDocument, {});
                const data = response.integrationGithubCommitCreate;
                return new GitHubCommitIntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationGithubConnect Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationGithubConnectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationGithubConnect mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationGithubConnect
         * @param installationId - required installationId to pass to integrationGithubConnect
         * @param variables - variables without 'code', 'installationId' to pass into the IntegrationGithubConnectMutation
         * @returns parsed response from IntegrationGithubConnectMutation
         */
        fetch(code, installationId, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationGithubConnectDocument, Object.assign({ code,
                    installationId }, variables));
                const data = response.integrationGithubConnect;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationGithubImportConnect Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationGithubImportConnectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationGithubImportConnect mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationGithubImportConnect
         * @param installationId - required installationId to pass to integrationGithubImportConnect
         * @returns parsed response from IntegrationGithubImportConnectMutation
         */
        fetch(code, installationId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationGithubImportConnectDocument, {
                    code,
                    installationId,
                });
                const data = response.integrationGithubImportConnect;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationGithubImportRefresh Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationGithubImportRefreshMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationGithubImportRefresh mutation and return a IntegrationPayload
         *
         * @param id - required id to pass to integrationGithubImportRefresh
         * @returns parsed response from IntegrationGithubImportRefreshMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationGithubImportRefreshDocument, {
                    id,
                });
                const data = response.integrationGithubImportRefresh;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationGitlabConnect Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationGitlabConnectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationGitlabConnect mutation and return a GitLabIntegrationCreatePayload
         *
         * @param accessToken - required accessToken to pass to integrationGitlabConnect
         * @param gitlabUrl - required gitlabUrl to pass to integrationGitlabConnect
         * @returns parsed response from IntegrationGitlabConnectMutation
         */
        fetch(accessToken, gitlabUrl) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationGitlabConnectDocument, {
                    accessToken,
                    gitlabUrl,
                });
                const data = response.integrationGitlabConnect;
                return new GitLabIntegrationCreatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationGong Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationGongMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationGong mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationGong
         * @param redirectUri - required redirectUri to pass to integrationGong
         * @returns parsed response from IntegrationGongMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationGongDocument, {
                    code,
                    redirectUri,
                });
                const data = response.integrationGong;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationGoogleSheets Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationGoogleSheetsMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationGoogleSheets mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationGoogleSheets
         * @returns parsed response from IntegrationGoogleSheetsMutation
         */
        fetch(code) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationGoogleSheetsDocument, {
                    code,
                });
                const data = response.integrationGoogleSheets;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationIntercom Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationIntercomMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationIntercom mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationIntercom
         * @param redirectUri - required redirectUri to pass to integrationIntercom
         * @param variables - variables without 'code', 'redirectUri' to pass into the IntegrationIntercomMutation
         * @returns parsed response from IntegrationIntercomMutation
         */
        fetch(code, redirectUri, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationIntercomDocument, Object.assign({ code,
                    redirectUri }, variables));
                const data = response.integrationIntercom;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteIntegrationIntercom Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteIntegrationIntercomMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteIntegrationIntercom mutation and return a IntegrationPayload
         *
         * @returns parsed response from DeleteIntegrationIntercomMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteIntegrationIntercomDocument, {});
                const data = response.integrationIntercomDelete;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateIntegrationIntercomSettings Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateIntegrationIntercomSettingsMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateIntegrationIntercomSettings mutation and return a IntegrationPayload
         *
         * @param input - required input to pass to updateIntegrationIntercomSettings
         * @returns parsed response from UpdateIntegrationIntercomSettingsMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateIntegrationIntercomSettingsDocument, {
                    input,
                });
                const data = response.integrationIntercomSettingsUpdate;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationJiraPersonal Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationJiraPersonalMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationJiraPersonal mutation and return a IntegrationPayload
         *
         * @param variables - variables to pass into the IntegrationJiraPersonalMutation
         * @returns parsed response from IntegrationJiraPersonalMutation
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationJiraPersonalDocument, variables);
                const data = response.integrationJiraPersonal;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationLoom Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationLoomMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationLoom mutation and return a IntegrationPayload
         *
         * @returns parsed response from IntegrationLoomMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationLoomDocument, {});
                const data = response.integrationLoom;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationRequest Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationRequestMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationRequest mutation and return a IntegrationRequestPayload
         *
         * @param input - required input to pass to integrationRequest
         * @returns parsed response from IntegrationRequestMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationRequestDocument, {
                    input,
                });
                const data = response.integrationRequest;
                return new IntegrationRequestPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSalesforce Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSalesforceMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSalesforce mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationSalesforce
         * @param redirectUri - required redirectUri to pass to integrationSalesforce
         * @param subdomain - required subdomain to pass to integrationSalesforce
         * @returns parsed response from IntegrationSalesforceMutation
         */
        fetch(code, redirectUri, subdomain) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSalesforceDocument, {
                    code,
                    redirectUri,
                    subdomain,
                });
                const data = response.integrationSalesforce;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSentryConnect Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSentryConnectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSentryConnect mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationSentryConnect
         * @param installationId - required installationId to pass to integrationSentryConnect
         * @param organizationSlug - required organizationSlug to pass to integrationSentryConnect
         * @returns parsed response from IntegrationSentryConnectMutation
         */
        fetch(code, installationId, organizationSlug) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSentryConnectDocument, {
                    code,
                    installationId,
                    organizationSlug,
                });
                const data = response.integrationSentryConnect;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSlack Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlack mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationSlack
         * @param redirectUri - required redirectUri to pass to integrationSlack
         * @param variables - variables without 'code', 'redirectUri' to pass into the IntegrationSlackMutation
         * @returns parsed response from IntegrationSlackMutation
         */
        fetch(code, redirectUri, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSlackDocument, Object.assign({ code,
                    redirectUri }, variables));
                const data = response.integrationSlack;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSlackAsks Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackAsksMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackAsks mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationSlackAsks
         * @param redirectUri - required redirectUri to pass to integrationSlackAsks
         * @returns parsed response from IntegrationSlackAsksMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSlackAsksDocument, {
                    code,
                    redirectUri,
                });
                const data = response.integrationSlackAsks;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSlackCustomViewNotifications Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackCustomViewNotificationsMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackCustomViewNotifications mutation and return a SlackChannelConnectPayload
         *
         * @param code - required code to pass to integrationSlackCustomViewNotifications
         * @param customViewId - required customViewId to pass to integrationSlackCustomViewNotifications
         * @param redirectUri - required redirectUri to pass to integrationSlackCustomViewNotifications
         * @returns parsed response from IntegrationSlackCustomViewNotificationsMutation
         */
        fetch(code, customViewId, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSlackCustomViewNotificationsDocument, {
                    code,
                    customViewId,
                    redirectUri,
                });
                const data = response.integrationSlackCustomViewNotifications;
                return new SlackChannelConnectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSlackCustomerChannelLink Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackCustomerChannelLinkMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackCustomerChannelLink mutation and return a SuccessPayload
         *
         * @param code - required code to pass to integrationSlackCustomerChannelLink
         * @param customerId - required customerId to pass to integrationSlackCustomerChannelLink
         * @param redirectUri - required redirectUri to pass to integrationSlackCustomerChannelLink
         * @returns parsed response from IntegrationSlackCustomerChannelLinkMutation
         */
        fetch(code, customerId, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSlackCustomerChannelLinkDocument, {
                    code,
                    customerId,
                    redirectUri,
                });
                const data = response.integrationSlackCustomerChannelLink;
                return new SuccessPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSlackImportEmojis Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackImportEmojisMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackImportEmojis mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationSlackImportEmojis
         * @param redirectUri - required redirectUri to pass to integrationSlackImportEmojis
         * @returns parsed response from IntegrationSlackImportEmojisMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSlackImportEmojisDocument, {
                    code,
                    redirectUri,
                });
                const data = response.integrationSlackImportEmojis;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSlackOrAsksUpdateSlackTeamName Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackOrAsksUpdateSlackTeamNameMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackOrAsksUpdateSlackTeamName mutation and return a IntegrationSlackWorkspaceNamePayload
         *
         * @param integrationId - required integrationId to pass to integrationSlackOrAsksUpdateSlackTeamName
         * @returns parsed response from IntegrationSlackOrAsksUpdateSlackTeamNameMutation
         */
        fetch(integrationId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSlackOrAsksUpdateSlackTeamNameDocument, {
                    integrationId,
                });
                const data = response.integrationSlackOrAsksUpdateSlackTeamName;
                return new IntegrationSlackWorkspaceNamePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSlackOrgProjectUpdatesPost Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackOrgProjectUpdatesPostMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackOrgProjectUpdatesPost mutation and return a SlackChannelConnectPayload
         *
         * @param code - required code to pass to integrationSlackOrgProjectUpdatesPost
         * @param redirectUri - required redirectUri to pass to integrationSlackOrgProjectUpdatesPost
         * @returns parsed response from IntegrationSlackOrgProjectUpdatesPostMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSlackOrgProjectUpdatesPostDocument, {
                    code,
                    redirectUri,
                });
                const data = response.integrationSlackOrgProjectUpdatesPost;
                return new SlackChannelConnectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSlackPersonal Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackPersonalMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackPersonal mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationSlackPersonal
         * @param redirectUri - required redirectUri to pass to integrationSlackPersonal
         * @returns parsed response from IntegrationSlackPersonalMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSlackPersonalDocument, {
                    code,
                    redirectUri,
                });
                const data = response.integrationSlackPersonal;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSlackPost Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackPostMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackPost mutation and return a SlackChannelConnectPayload
         *
         * @param code - required code to pass to integrationSlackPost
         * @param redirectUri - required redirectUri to pass to integrationSlackPost
         * @param teamId - required teamId to pass to integrationSlackPost
         * @param variables - variables without 'code', 'redirectUri', 'teamId' to pass into the IntegrationSlackPostMutation
         * @returns parsed response from IntegrationSlackPostMutation
         */
        fetch(code, redirectUri, teamId, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSlackPostDocument, Object.assign({ code,
                    redirectUri,
                    teamId }, variables));
                const data = response.integrationSlackPost;
                return new SlackChannelConnectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationSlackProjectPost Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationSlackProjectPostMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationSlackProjectPost mutation and return a SlackChannelConnectPayload
         *
         * @param code - required code to pass to integrationSlackProjectPost
         * @param projectId - required projectId to pass to integrationSlackProjectPost
         * @param redirectUri - required redirectUri to pass to integrationSlackProjectPost
         * @param service - required service to pass to integrationSlackProjectPost
         * @returns parsed response from IntegrationSlackProjectPostMutation
         */
        fetch(code, projectId, redirectUri, service) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationSlackProjectPostDocument, {
                    code,
                    projectId,
                    redirectUri,
                    service,
                });
                const data = response.integrationSlackProjectPost;
                return new SlackChannelConnectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateIntegrationTemplate Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateIntegrationTemplateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateIntegrationTemplate mutation and return a IntegrationTemplatePayload
         *
         * @param input - required input to pass to createIntegrationTemplate
         * @returns parsed response from CreateIntegrationTemplateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateIntegrationTemplateDocument, {
                    input,
                });
                const data = response.integrationTemplateCreate;
                return new IntegrationTemplatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteIntegrationTemplate Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteIntegrationTemplateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteIntegrationTemplate mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteIntegrationTemplate
         * @returns parsed response from DeleteIntegrationTemplateMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteIntegrationTemplateDocument, {
                    id,
                });
                const data = response.integrationTemplateDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IntegrationZendesk Mutation
     *
     * @param request - function to call the graphql client
     */
    class IntegrationZendeskMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IntegrationZendesk mutation and return a IntegrationPayload
         *
         * @param code - required code to pass to integrationZendesk
         * @param redirectUri - required redirectUri to pass to integrationZendesk
         * @param scope - required scope to pass to integrationZendesk
         * @param subdomain - required subdomain to pass to integrationZendesk
         * @returns parsed response from IntegrationZendeskMutation
         */
        fetch(code, redirectUri, scope, subdomain) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IntegrationZendeskDocument, {
                    code,
                    redirectUri,
                    scope,
                    subdomain,
                });
                const data = response.integrationZendesk;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateIntegrationsSettings Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateIntegrationsSettingsMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateIntegrationsSettings mutation and return a IntegrationsSettingsPayload
         *
         * @param input - required input to pass to createIntegrationsSettings
         * @returns parsed response from CreateIntegrationsSettingsMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateIntegrationsSettingsDocument, {
                    input,
                });
                const data = response.integrationsSettingsCreate;
                return new IntegrationsSettingsPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateIntegrationsSettings Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateIntegrationsSettingsMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateIntegrationsSettings mutation and return a IntegrationsSettingsPayload
         *
         * @param id - required id to pass to updateIntegrationsSettings
         * @param input - required input to pass to updateIntegrationsSettings
         * @returns parsed response from UpdateIntegrationsSettingsMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateIntegrationsSettingsDocument, {
                    id,
                    input,
                });
                const data = response.integrationsSettingsUpdate;
                return new IntegrationsSettingsPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueAddLabel Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueAddLabelMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueAddLabel mutation and return a IssuePayload
         *
         * @param id - required id to pass to issueAddLabel
         * @param labelId - required labelId to pass to issueAddLabel
         * @returns parsed response from IssueAddLabelMutation
         */
        fetch(id, labelId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueAddLabelDocument, {
                    id,
                    labelId,
                });
                const data = response.issueAddLabel;
                return new IssuePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveIssue Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveIssueMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveIssue mutation and return a IssueArchivePayload
         *
         * @param id - required id to pass to archiveIssue
         * @param variables - variables without 'id' to pass into the ArchiveIssueMutation
         * @returns parsed response from ArchiveIssueMutation
         */
        fetch(id, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveIssueDocument, Object.assign({ id }, variables));
                const data = response.issueArchive;
                return new IssueArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateIssueBatch Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateIssueBatchMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateIssueBatch mutation and return a IssueBatchPayload
         *
         * @param input - required input to pass to createIssueBatch
         * @returns parsed response from CreateIssueBatchMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateIssueBatchDocument, {
                    input,
                });
                const data = response.issueBatchCreate;
                return new IssueBatchPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateIssueBatch Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateIssueBatchMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateIssueBatch mutation and return a IssueBatchPayload
         *
         * @param ids - required ids to pass to updateIssueBatch
         * @param input - required input to pass to updateIssueBatch
         * @returns parsed response from UpdateIssueBatchMutation
         */
        fetch(ids, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateIssueBatchDocument, {
                    ids,
                    input,
                });
                const data = response.issueBatchUpdate;
                return new IssueBatchPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateIssue Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateIssueMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateIssue mutation and return a IssuePayload
         *
         * @param input - required input to pass to createIssue
         * @returns parsed response from CreateIssueMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateIssueDocument, {
                    input,
                });
                const data = response.issueCreate;
                return new IssuePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteIssue Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteIssueMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteIssue mutation and return a IssueArchivePayload
         *
         * @param id - required id to pass to deleteIssue
         * @param variables - variables without 'id' to pass into the DeleteIssueMutation
         * @returns parsed response from DeleteIssueMutation
         */
        fetch(id, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteIssueDocument, Object.assign({ id }, variables));
                const data = response.issueDelete;
                return new IssueArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueExternalSyncDisable Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueExternalSyncDisableMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueExternalSyncDisable mutation and return a IssuePayload
         *
         * @param attachmentId - required attachmentId to pass to issueExternalSyncDisable
         * @returns parsed response from IssueExternalSyncDisableMutation
         */
        fetch(attachmentId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueExternalSyncDisableDocument, {
                    attachmentId,
                });
                const data = response.issueExternalSyncDisable;
                return new IssuePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueImportCreateAsana Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueImportCreateAsanaMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportCreateAsana mutation and return a IssueImportPayload
         *
         * @param asanaTeamName - required asanaTeamName to pass to issueImportCreateAsana
         * @param asanaToken - required asanaToken to pass to issueImportCreateAsana
         * @param variables - variables without 'asanaTeamName', 'asanaToken' to pass into the IssueImportCreateAsanaMutation
         * @returns parsed response from IssueImportCreateAsanaMutation
         */
        fetch(asanaTeamName, asanaToken, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueImportCreateAsanaDocument, Object.assign({ asanaTeamName,
                    asanaToken }, variables));
                const data = response.issueImportCreateAsana;
                return new IssueImportPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueImportCreateCsvJira Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueImportCreateCsvJiraMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportCreateCsvJira mutation and return a IssueImportPayload
         *
         * @param csvUrl - required csvUrl to pass to issueImportCreateCSVJira
         * @param variables - variables without 'csvUrl' to pass into the IssueImportCreateCsvJiraMutation
         * @returns parsed response from IssueImportCreateCsvJiraMutation
         */
        fetch(csvUrl, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueImportCreateCsvJiraDocument, Object.assign({ csvUrl }, variables));
                const data = response.issueImportCreateCSVJira;
                return new IssueImportPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueImportCreateClubhouse Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueImportCreateClubhouseMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportCreateClubhouse mutation and return a IssueImportPayload
         *
         * @param clubhouseGroupName - required clubhouseGroupName to pass to issueImportCreateClubhouse
         * @param clubhouseToken - required clubhouseToken to pass to issueImportCreateClubhouse
         * @param variables - variables without 'clubhouseGroupName', 'clubhouseToken' to pass into the IssueImportCreateClubhouseMutation
         * @returns parsed response from IssueImportCreateClubhouseMutation
         */
        fetch(clubhouseGroupName, clubhouseToken, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueImportCreateClubhouseDocument, Object.assign({ clubhouseGroupName,
                    clubhouseToken }, variables));
                const data = response.issueImportCreateClubhouse;
                return new IssueImportPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueImportCreateGithub Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueImportCreateGithubMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportCreateGithub mutation and return a IssueImportPayload
         *
         * @param variables - variables to pass into the IssueImportCreateGithubMutation
         * @returns parsed response from IssueImportCreateGithubMutation
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueImportCreateGithubDocument, variables);
                const data = response.issueImportCreateGithub;
                return new IssueImportPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueImportCreateJira Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueImportCreateJiraMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportCreateJira mutation and return a IssueImportPayload
         *
         * @param jiraEmail - required jiraEmail to pass to issueImportCreateJira
         * @param jiraHostname - required jiraHostname to pass to issueImportCreateJira
         * @param jiraProject - required jiraProject to pass to issueImportCreateJira
         * @param jiraToken - required jiraToken to pass to issueImportCreateJira
         * @param variables - variables without 'jiraEmail', 'jiraHostname', 'jiraProject', 'jiraToken' to pass into the IssueImportCreateJiraMutation
         * @returns parsed response from IssueImportCreateJiraMutation
         */
        fetch(jiraEmail, jiraHostname, jiraProject, jiraToken, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueImportCreateJiraDocument, Object.assign({ jiraEmail,
                    jiraHostname,
                    jiraProject,
                    jiraToken }, variables));
                const data = response.issueImportCreateJira;
                return new IssueImportPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteIssueImport Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteIssueImportMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteIssueImport mutation and return a IssueImportDeletePayload
         *
         * @param issueImportId - required issueImportId to pass to deleteIssueImport
         * @returns parsed response from DeleteIssueImportMutation
         */
        fetch(issueImportId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteIssueImportDocument, {
                    issueImportId,
                });
                const data = response.issueImportDelete;
                return new IssueImportDeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueImportProcess Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueImportProcessMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueImportProcess mutation and return a IssueImportPayload
         *
         * @param issueImportId - required issueImportId to pass to issueImportProcess
         * @param mapping - required mapping to pass to issueImportProcess
         * @returns parsed response from IssueImportProcessMutation
         */
        fetch(issueImportId, mapping) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueImportProcessDocument, {
                    issueImportId,
                    mapping,
                });
                const data = response.issueImportProcess;
                return new IssueImportPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateIssueImport Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateIssueImportMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateIssueImport mutation and return a IssueImportPayload
         *
         * @param id - required id to pass to updateIssueImport
         * @param input - required input to pass to updateIssueImport
         * @returns parsed response from UpdateIssueImportMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateIssueImportDocument, {
                    id,
                    input,
                });
                const data = response.issueImportUpdate;
                return new IssueImportPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateIssueLabel Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateIssueLabelMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateIssueLabel mutation and return a IssueLabelPayload
         *
         * @param input - required input to pass to createIssueLabel
         * @param variables - variables without 'input' to pass into the CreateIssueLabelMutation
         * @returns parsed response from CreateIssueLabelMutation
         */
        fetch(input, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateIssueLabelDocument, Object.assign({ input }, variables));
                const data = response.issueLabelCreate;
                return new IssueLabelPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteIssueLabel Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteIssueLabelMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteIssueLabel mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteIssueLabel
         * @returns parsed response from DeleteIssueLabelMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteIssueLabelDocument, {
                    id,
                });
                const data = response.issueLabelDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateIssueLabel Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateIssueLabelMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateIssueLabel mutation and return a IssueLabelPayload
         *
         * @param id - required id to pass to updateIssueLabel
         * @param input - required input to pass to updateIssueLabel
         * @param variables - variables without 'id', 'input' to pass into the UpdateIssueLabelMutation
         * @returns parsed response from UpdateIssueLabelMutation
         */
        fetch(id, input, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateIssueLabelDocument, Object.assign({ id,
                    input }, variables));
                const data = response.issueLabelUpdate;
                return new IssueLabelPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateIssueRelation Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateIssueRelationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateIssueRelation mutation and return a IssueRelationPayload
         *
         * @param input - required input to pass to createIssueRelation
         * @param variables - variables without 'input' to pass into the CreateIssueRelationMutation
         * @returns parsed response from CreateIssueRelationMutation
         */
        fetch(input, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateIssueRelationDocument, Object.assign({ input }, variables));
                const data = response.issueRelationCreate;
                return new IssueRelationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteIssueRelation Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteIssueRelationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteIssueRelation mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteIssueRelation
         * @returns parsed response from DeleteIssueRelationMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteIssueRelationDocument, {
                    id,
                });
                const data = response.issueRelationDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateIssueRelation Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateIssueRelationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateIssueRelation mutation and return a IssueRelationPayload
         *
         * @param id - required id to pass to updateIssueRelation
         * @param input - required input to pass to updateIssueRelation
         * @returns parsed response from UpdateIssueRelationMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateIssueRelationDocument, {
                    id,
                    input,
                });
                const data = response.issueRelationUpdate;
                return new IssueRelationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueReminder Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueReminderMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueReminder mutation and return a IssuePayload
         *
         * @param id - required id to pass to issueReminder
         * @param reminderAt - required reminderAt to pass to issueReminder
         * @returns parsed response from IssueReminderMutation
         */
        fetch(id, reminderAt) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueReminderDocument, {
                    id,
                    reminderAt,
                });
                const data = response.issueReminder;
                return new IssuePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueRemoveLabel Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueRemoveLabelMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueRemoveLabel mutation and return a IssuePayload
         *
         * @param id - required id to pass to issueRemoveLabel
         * @param labelId - required labelId to pass to issueRemoveLabel
         * @returns parsed response from IssueRemoveLabelMutation
         */
        fetch(id, labelId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueRemoveLabelDocument, {
                    id,
                    labelId,
                });
                const data = response.issueRemoveLabel;
                return new IssuePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueSubscribe Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueSubscribeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueSubscribe mutation and return a IssuePayload
         *
         * @param id - required id to pass to issueSubscribe
         * @param variables - variables without 'id' to pass into the IssueSubscribeMutation
         * @returns parsed response from IssueSubscribeMutation
         */
        fetch(id, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueSubscribeDocument, Object.assign({ id }, variables));
                const data = response.issueSubscribe;
                return new IssuePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnarchiveIssue Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnarchiveIssueMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnarchiveIssue mutation and return a IssueArchivePayload
         *
         * @param id - required id to pass to unarchiveIssue
         * @returns parsed response from UnarchiveIssueMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnarchiveIssueDocument, {
                    id,
                });
                const data = response.issueUnarchive;
                return new IssueArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable IssueUnsubscribe Mutation
     *
     * @param request - function to call the graphql client
     */
    class IssueUnsubscribeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the IssueUnsubscribe mutation and return a IssuePayload
         *
         * @param id - required id to pass to issueUnsubscribe
         * @param variables - variables without 'id' to pass into the IssueUnsubscribeMutation
         * @returns parsed response from IssueUnsubscribeMutation
         */
        fetch(id, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueUnsubscribeDocument, Object.assign({ id }, variables));
                const data = response.issueUnsubscribe;
                return new IssuePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateIssue Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateIssueMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateIssue mutation and return a IssuePayload
         *
         * @param id - required id to pass to updateIssue
         * @param input - required input to pass to updateIssue
         * @returns parsed response from UpdateIssueMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateIssueDocument, {
                    id,
                    input,
                });
                const data = response.issueUpdate;
                return new IssuePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable JoinOrganizationFromOnboarding Mutation
     *
     * @param request - function to call the graphql client
     */
    class JoinOrganizationFromOnboardingMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the JoinOrganizationFromOnboarding mutation and return a CreateOrJoinOrganizationResponse
         *
         * @param input - required input to pass to joinOrganizationFromOnboarding
         * @returns parsed response from JoinOrganizationFromOnboardingMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(JoinOrganizationFromOnboardingDocument, {
                    input,
                });
                const data = response.joinOrganizationFromOnboarding;
                return new CreateOrJoinOrganizationResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable LeaveOrganization Mutation
     *
     * @param request - function to call the graphql client
     */
    class LeaveOrganizationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the LeaveOrganization mutation and return a CreateOrJoinOrganizationResponse
         *
         * @param organizationId - required organizationId to pass to leaveOrganization
         * @returns parsed response from LeaveOrganizationMutation
         */
        fetch(organizationId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(LeaveOrganizationDocument, {
                    organizationId,
                });
                const data = response.leaveOrganization;
                return new CreateOrJoinOrganizationResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable Logout Mutation
     *
     * @param request - function to call the graphql client
     */
    class LogoutMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Logout mutation and return a LogoutResponse
         *
         * @param variables - variables to pass into the LogoutMutation
         * @returns parsed response from LogoutMutation
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(LogoutDocument, variables);
                const data = response.logout;
                return new LogoutResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable LogoutAllSessions Mutation
     *
     * @param request - function to call the graphql client
     */
    class LogoutAllSessionsMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the LogoutAllSessions mutation and return a LogoutResponse
         *
         * @param variables - variables to pass into the LogoutAllSessionsMutation
         * @returns parsed response from LogoutAllSessionsMutation
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(LogoutAllSessionsDocument, variables);
                const data = response.logoutAllSessions;
                return new LogoutResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable LogoutOtherSessions Mutation
     *
     * @param request - function to call the graphql client
     */
    class LogoutOtherSessionsMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the LogoutOtherSessions mutation and return a LogoutResponse
         *
         * @param variables - variables to pass into the LogoutOtherSessionsMutation
         * @returns parsed response from LogoutOtherSessionsMutation
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(LogoutOtherSessionsDocument, variables);
                const data = response.logoutOtherSessions;
                return new LogoutResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable LogoutSession Mutation
     *
     * @param request - function to call the graphql client
     */
    class LogoutSessionMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the LogoutSession mutation and return a LogoutResponse
         *
         * @param sessionId - required sessionId to pass to logoutSession
         * @returns parsed response from LogoutSessionMutation
         */
        fetch(sessionId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(LogoutSessionDocument, {
                    sessionId,
                });
                const data = response.logoutSession;
                return new LogoutResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveNotification Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveNotificationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveNotification mutation and return a NotificationArchivePayload
         *
         * @param id - required id to pass to archiveNotification
         * @returns parsed response from ArchiveNotificationMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveNotificationDocument, {
                    id,
                });
                const data = response.notificationArchive;
                return new NotificationArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable NotificationArchiveAll Mutation
     *
     * @param request - function to call the graphql client
     */
    class NotificationArchiveAllMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationArchiveAll mutation and return a NotificationBatchActionPayload
         *
         * @param input - required input to pass to notificationArchiveAll
         * @returns parsed response from NotificationArchiveAllMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(NotificationArchiveAllDocument, {
                    input,
                });
                const data = response.notificationArchiveAll;
                return new NotificationBatchActionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateNotificationCategoryChannelSubscription Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateNotificationCategoryChannelSubscriptionMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateNotificationCategoryChannelSubscription mutation and return a UserSettingsPayload
         *
         * @param category - required category to pass to updateNotificationCategoryChannelSubscription
         * @param channel - required channel to pass to updateNotificationCategoryChannelSubscription
         * @param subscribe - required subscribe to pass to updateNotificationCategoryChannelSubscription
         * @returns parsed response from UpdateNotificationCategoryChannelSubscriptionMutation
         */
        fetch(category, channel, subscribe) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateNotificationCategoryChannelSubscriptionDocument, {
                    category,
                    channel,
                    subscribe,
                });
                const data = response.notificationCategoryChannelSubscriptionUpdate;
                return new UserSettingsPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable NotificationMarkReadAll Mutation
     *
     * @param request - function to call the graphql client
     */
    class NotificationMarkReadAllMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationMarkReadAll mutation and return a NotificationBatchActionPayload
         *
         * @param input - required input to pass to notificationMarkReadAll
         * @param readAt - required readAt to pass to notificationMarkReadAll
         * @returns parsed response from NotificationMarkReadAllMutation
         */
        fetch(input, readAt) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(NotificationMarkReadAllDocument, {
                    input,
                    readAt,
                });
                const data = response.notificationMarkReadAll;
                return new NotificationBatchActionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable NotificationMarkUnreadAll Mutation
     *
     * @param request - function to call the graphql client
     */
    class NotificationMarkUnreadAllMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationMarkUnreadAll mutation and return a NotificationBatchActionPayload
         *
         * @param input - required input to pass to notificationMarkUnreadAll
         * @returns parsed response from NotificationMarkUnreadAllMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(NotificationMarkUnreadAllDocument, {
                    input,
                });
                const data = response.notificationMarkUnreadAll;
                return new NotificationBatchActionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable NotificationSnoozeAll Mutation
     *
     * @param request - function to call the graphql client
     */
    class NotificationSnoozeAllMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationSnoozeAll mutation and return a NotificationBatchActionPayload
         *
         * @param input - required input to pass to notificationSnoozeAll
         * @param snoozedUntilAt - required snoozedUntilAt to pass to notificationSnoozeAll
         * @returns parsed response from NotificationSnoozeAllMutation
         */
        fetch(input, snoozedUntilAt) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(NotificationSnoozeAllDocument, {
                    input,
                    snoozedUntilAt,
                });
                const data = response.notificationSnoozeAll;
                return new NotificationBatchActionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateNotificationSubscription Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateNotificationSubscriptionMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateNotificationSubscription mutation and return a NotificationSubscriptionPayload
         *
         * @param input - required input to pass to createNotificationSubscription
         * @returns parsed response from CreateNotificationSubscriptionMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateNotificationSubscriptionDocument, {
                    input,
                });
                const data = response.notificationSubscriptionCreate;
                return new NotificationSubscriptionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteNotificationSubscription Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteNotificationSubscriptionMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteNotificationSubscription mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteNotificationSubscription
         * @returns parsed response from DeleteNotificationSubscriptionMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteNotificationSubscriptionDocument, {
                    id,
                });
                const data = response.notificationSubscriptionDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateNotificationSubscription Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateNotificationSubscriptionMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateNotificationSubscription mutation and return a NotificationSubscriptionPayload
         *
         * @param id - required id to pass to updateNotificationSubscription
         * @param input - required input to pass to updateNotificationSubscription
         * @returns parsed response from UpdateNotificationSubscriptionMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateNotificationSubscriptionDocument, {
                    id,
                    input,
                });
                const data = response.notificationSubscriptionUpdate;
                return new NotificationSubscriptionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnarchiveNotification Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnarchiveNotificationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnarchiveNotification mutation and return a NotificationArchivePayload
         *
         * @param id - required id to pass to unarchiveNotification
         * @returns parsed response from UnarchiveNotificationMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnarchiveNotificationDocument, {
                    id,
                });
                const data = response.notificationUnarchive;
                return new NotificationArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable NotificationUnsnoozeAll Mutation
     *
     * @param request - function to call the graphql client
     */
    class NotificationUnsnoozeAllMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the NotificationUnsnoozeAll mutation and return a NotificationBatchActionPayload
         *
         * @param input - required input to pass to notificationUnsnoozeAll
         * @param unsnoozedAt - required unsnoozedAt to pass to notificationUnsnoozeAll
         * @returns parsed response from NotificationUnsnoozeAllMutation
         */
        fetch(input, unsnoozedAt) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(NotificationUnsnoozeAllDocument, {
                    input,
                    unsnoozedAt,
                });
                const data = response.notificationUnsnoozeAll;
                return new NotificationBatchActionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateNotification Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateNotificationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateNotification mutation and return a NotificationPayload
         *
         * @param id - required id to pass to updateNotification
         * @param input - required input to pass to updateNotification
         * @returns parsed response from UpdateNotificationMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateNotificationDocument, {
                    id,
                    input,
                });
                const data = response.notificationUpdate;
                return new NotificationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteOrganizationCancel Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteOrganizationCancelMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteOrganizationCancel mutation and return a OrganizationCancelDeletePayload
         *
         * @returns parsed response from DeleteOrganizationCancelMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteOrganizationCancelDocument, {});
                const data = response.organizationCancelDelete;
                return new OrganizationCancelDeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteOrganization Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteOrganizationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteOrganization mutation and return a OrganizationDeletePayload
         *
         * @param input - required input to pass to deleteOrganization
         * @returns parsed response from DeleteOrganizationMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteOrganizationDocument, {
                    input,
                });
                const data = response.organizationDelete;
                return new OrganizationDeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable OrganizationDeleteChallenge Mutation
     *
     * @param request - function to call the graphql client
     */
    class OrganizationDeleteChallengeMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationDeleteChallenge mutation and return a OrganizationDeletePayload
         *
         * @returns parsed response from OrganizationDeleteChallengeMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(OrganizationDeleteChallengeDocument, {});
                const data = response.organizationDeleteChallenge;
                return new OrganizationDeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteOrganizationDomain Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteOrganizationDomainMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteOrganizationDomain mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteOrganizationDomain
         * @returns parsed response from DeleteOrganizationDomainMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteOrganizationDomainDocument, {
                    id,
                });
                const data = response.organizationDomainDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateOrganizationInvite Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateOrganizationInviteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateOrganizationInvite mutation and return a OrganizationInvitePayload
         *
         * @param input - required input to pass to createOrganizationInvite
         * @returns parsed response from CreateOrganizationInviteMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateOrganizationInviteDocument, {
                    input,
                });
                const data = response.organizationInviteCreate;
                return new OrganizationInvitePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteOrganizationInvite Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteOrganizationInviteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteOrganizationInvite mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteOrganizationInvite
         * @returns parsed response from DeleteOrganizationInviteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteOrganizationInviteDocument, {
                    id,
                });
                const data = response.organizationInviteDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateOrganizationInvite Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateOrganizationInviteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateOrganizationInvite mutation and return a OrganizationInvitePayload
         *
         * @param id - required id to pass to updateOrganizationInvite
         * @param input - required input to pass to updateOrganizationInvite
         * @returns parsed response from UpdateOrganizationInviteMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateOrganizationInviteDocument, {
                    id,
                    input,
                });
                const data = response.organizationInviteUpdate;
                return new OrganizationInvitePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable OrganizationStartTrial Mutation
     *
     * @param request - function to call the graphql client
     */
    class OrganizationStartTrialMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationStartTrial mutation and return a OrganizationStartTrialPayload
         *
         * @returns parsed response from OrganizationStartTrialMutation
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(OrganizationStartTrialDocument, {});
                const data = response.organizationStartTrial;
                return new OrganizationStartTrialPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable OrganizationStartTrialForPlan Mutation
     *
     * @param request - function to call the graphql client
     */
    class OrganizationStartTrialForPlanMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the OrganizationStartTrialForPlan mutation and return a OrganizationStartTrialPayload
         *
         * @param input - required input to pass to organizationStartTrialForPlan
         * @returns parsed response from OrganizationStartTrialForPlanMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(OrganizationStartTrialForPlanDocument, {
                    input,
                });
                const data = response.organizationStartTrialForPlan;
                return new OrganizationStartTrialPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateOrganization Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateOrganizationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateOrganization mutation and return a OrganizationPayload
         *
         * @param input - required input to pass to updateOrganization
         * @returns parsed response from UpdateOrganizationMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateOrganizationDocument, {
                    input,
                });
                const data = response.organizationUpdate;
                return new OrganizationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ProjectAddLabel Mutation
     *
     * @param request - function to call the graphql client
     */
    class ProjectAddLabelMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectAddLabel mutation and return a ProjectPayload
         *
         * @param id - required id to pass to projectAddLabel
         * @param labelId - required labelId to pass to projectAddLabel
         * @returns parsed response from ProjectAddLabelMutation
         */
        fetch(id, labelId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectAddLabelDocument, {
                    id,
                    labelId,
                });
                const data = response.projectAddLabel;
                return new ProjectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveProject mutation and return a ProjectArchivePayload
         *
         * @param id - required id to pass to archiveProject
         * @param variables - variables without 'id' to pass into the ArchiveProjectMutation
         * @returns parsed response from ArchiveProjectMutation
         */
        fetch(id, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveProjectDocument, Object.assign({ id }, variables));
                const data = response.projectArchive;
                return new ProjectArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateProject mutation and return a ProjectPayload
         *
         * @param input - required input to pass to createProject
         * @param variables - variables without 'input' to pass into the CreateProjectMutation
         * @returns parsed response from CreateProjectMutation
         */
        fetch(input, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateProjectDocument, Object.assign({ input }, variables));
                const data = response.projectCreate;
                return new ProjectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteProject mutation and return a ProjectArchivePayload
         *
         * @param id - required id to pass to deleteProject
         * @returns parsed response from DeleteProjectMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteProjectDocument, {
                    id,
                });
                const data = response.projectDelete;
                return new ProjectArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateProjectLabel Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateProjectLabelMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateProjectLabel mutation and return a ProjectLabelPayload
         *
         * @param input - required input to pass to createProjectLabel
         * @returns parsed response from CreateProjectLabelMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateProjectLabelDocument, {
                    input,
                });
                const data = response.projectLabelCreate;
                return new ProjectLabelPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteProjectLabel Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteProjectLabelMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteProjectLabel mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteProjectLabel
         * @returns parsed response from DeleteProjectLabelMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteProjectLabelDocument, {
                    id,
                });
                const data = response.projectLabelDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateProjectLabel Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateProjectLabelMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateProjectLabel mutation and return a ProjectLabelPayload
         *
         * @param id - required id to pass to updateProjectLabel
         * @param input - required input to pass to updateProjectLabel
         * @returns parsed response from UpdateProjectLabelMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateProjectLabelDocument, {
                    id,
                    input,
                });
                const data = response.projectLabelUpdate;
                return new ProjectLabelPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateProjectMilestone Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateProjectMilestoneMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateProjectMilestone mutation and return a ProjectMilestonePayload
         *
         * @param input - required input to pass to createProjectMilestone
         * @returns parsed response from CreateProjectMilestoneMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateProjectMilestoneDocument, {
                    input,
                });
                const data = response.projectMilestoneCreate;
                return new ProjectMilestonePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteProjectMilestone Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteProjectMilestoneMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteProjectMilestone mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteProjectMilestone
         * @returns parsed response from DeleteProjectMilestoneMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteProjectMilestoneDocument, {
                    id,
                });
                const data = response.projectMilestoneDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateProjectMilestone Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateProjectMilestoneMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateProjectMilestone mutation and return a ProjectMilestonePayload
         *
         * @param id - required id to pass to updateProjectMilestone
         * @param input - required input to pass to updateProjectMilestone
         * @returns parsed response from UpdateProjectMilestoneMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateProjectMilestoneDocument, {
                    id,
                    input,
                });
                const data = response.projectMilestoneUpdate;
                return new ProjectMilestonePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateProjectRelation Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateProjectRelationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateProjectRelation mutation and return a ProjectRelationPayload
         *
         * @param input - required input to pass to createProjectRelation
         * @returns parsed response from CreateProjectRelationMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateProjectRelationDocument, {
                    input,
                });
                const data = response.projectRelationCreate;
                return new ProjectRelationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteProjectRelation Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteProjectRelationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteProjectRelation mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteProjectRelation
         * @returns parsed response from DeleteProjectRelationMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteProjectRelationDocument, {
                    id,
                });
                const data = response.projectRelationDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateProjectRelation Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateProjectRelationMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateProjectRelation mutation and return a ProjectRelationPayload
         *
         * @param id - required id to pass to updateProjectRelation
         * @param input - required input to pass to updateProjectRelation
         * @returns parsed response from UpdateProjectRelationMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateProjectRelationDocument, {
                    id,
                    input,
                });
                const data = response.projectRelationUpdate;
                return new ProjectRelationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ProjectRemoveLabel Mutation
     *
     * @param request - function to call the graphql client
     */
    class ProjectRemoveLabelMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ProjectRemoveLabel mutation and return a ProjectPayload
         *
         * @param id - required id to pass to projectRemoveLabel
         * @param labelId - required labelId to pass to projectRemoveLabel
         * @returns parsed response from ProjectRemoveLabelMutation
         */
        fetch(id, labelId) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectRemoveLabelDocument, {
                    id,
                    labelId,
                });
                const data = response.projectRemoveLabel;
                return new ProjectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveProjectStatus Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveProjectStatusMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveProjectStatus mutation and return a ProjectStatusArchivePayload
         *
         * @param id - required id to pass to archiveProjectStatus
         * @returns parsed response from ArchiveProjectStatusMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveProjectStatusDocument, {
                    id,
                });
                const data = response.projectStatusArchive;
                return new ProjectStatusArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateProjectStatus Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateProjectStatusMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateProjectStatus mutation and return a ProjectStatusPayload
         *
         * @param input - required input to pass to createProjectStatus
         * @returns parsed response from CreateProjectStatusMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateProjectStatusDocument, {
                    input,
                });
                const data = response.projectStatusCreate;
                return new ProjectStatusPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnarchiveProjectStatus Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnarchiveProjectStatusMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnarchiveProjectStatus mutation and return a ProjectStatusArchivePayload
         *
         * @param id - required id to pass to unarchiveProjectStatus
         * @returns parsed response from UnarchiveProjectStatusMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnarchiveProjectStatusDocument, {
                    id,
                });
                const data = response.projectStatusUnarchive;
                return new ProjectStatusArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateProjectStatus Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateProjectStatusMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateProjectStatus mutation and return a ProjectStatusPayload
         *
         * @param id - required id to pass to updateProjectStatus
         * @param input - required input to pass to updateProjectStatus
         * @returns parsed response from UpdateProjectStatusMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateProjectStatusDocument, {
                    id,
                    input,
                });
                const data = response.projectStatusUpdate;
                return new ProjectStatusPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnarchiveProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnarchiveProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnarchiveProject mutation and return a ProjectArchivePayload
         *
         * @param id - required id to pass to unarchiveProject
         * @returns parsed response from UnarchiveProjectMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnarchiveProjectDocument, {
                    id,
                });
                const data = response.projectUnarchive;
                return new ProjectArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateProject mutation and return a ProjectPayload
         *
         * @param id - required id to pass to updateProject
         * @param input - required input to pass to updateProject
         * @returns parsed response from UpdateProjectMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateProjectDocument, {
                    id,
                    input,
                });
                const data = response.projectUpdate;
                return new ProjectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveProjectUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveProjectUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveProjectUpdate mutation and return a ProjectUpdateArchivePayload
         *
         * @param id - required id to pass to archiveProjectUpdate
         * @returns parsed response from ArchiveProjectUpdateMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveProjectUpdateDocument, {
                    id,
                });
                const data = response.projectUpdateArchive;
                return new ProjectUpdateArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateProjectUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateProjectUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateProjectUpdate mutation and return a ProjectUpdatePayload
         *
         * @param input - required input to pass to createProjectUpdate
         * @returns parsed response from CreateProjectUpdateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateProjectUpdateDocument, {
                    input,
                });
                const data = response.projectUpdateCreate;
                return new ProjectUpdatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteProjectUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteProjectUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteProjectUpdate mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteProjectUpdate
         * @returns parsed response from DeleteProjectUpdateMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteProjectUpdateDocument, {
                    id,
                });
                const data = response.projectUpdateDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnarchiveProjectUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnarchiveProjectUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnarchiveProjectUpdate mutation and return a ProjectUpdateArchivePayload
         *
         * @param id - required id to pass to unarchiveProjectUpdate
         * @returns parsed response from UnarchiveProjectUpdateMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnarchiveProjectUpdateDocument, {
                    id,
                });
                const data = response.projectUpdateUnarchive;
                return new ProjectUpdateArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateProjectUpdate Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateProjectUpdateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateProjectUpdate mutation and return a ProjectUpdatePayload
         *
         * @param id - required id to pass to updateProjectUpdate
         * @param input - required input to pass to updateProjectUpdate
         * @returns parsed response from UpdateProjectUpdateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateProjectUpdateDocument, {
                    id,
                    input,
                });
                const data = response.projectUpdateUpdate;
                return new ProjectUpdatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreatePushSubscription Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreatePushSubscriptionMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreatePushSubscription mutation and return a PushSubscriptionPayload
         *
         * @param input - required input to pass to createPushSubscription
         * @returns parsed response from CreatePushSubscriptionMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreatePushSubscriptionDocument, {
                    input,
                });
                const data = response.pushSubscriptionCreate;
                return new PushSubscriptionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeletePushSubscription Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeletePushSubscriptionMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeletePushSubscription mutation and return a PushSubscriptionPayload
         *
         * @param id - required id to pass to deletePushSubscription
         * @returns parsed response from DeletePushSubscriptionMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeletePushSubscriptionDocument, {
                    id,
                });
                const data = response.pushSubscriptionDelete;
                return new PushSubscriptionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateReaction Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateReactionMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateReaction mutation and return a ReactionPayload
         *
         * @param input - required input to pass to createReaction
         * @returns parsed response from CreateReactionMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateReactionDocument, {
                    input,
                });
                const data = response.reactionCreate;
                return new ReactionPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteReaction Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteReactionMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteReaction mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteReaction
         * @returns parsed response from DeleteReactionMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteReactionDocument, {
                    id,
                });
                const data = response.reactionDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable RefreshGoogleSheetsData Mutation
     *
     * @param request - function to call the graphql client
     */
    class RefreshGoogleSheetsDataMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the RefreshGoogleSheetsData mutation and return a IntegrationPayload
         *
         * @param id - required id to pass to refreshGoogleSheetsData
         * @param variables - variables without 'id' to pass into the RefreshGoogleSheetsDataMutation
         * @returns parsed response from RefreshGoogleSheetsDataMutation
         */
        fetch(id, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(RefreshGoogleSheetsDataDocument, Object.assign({ id }, variables));
                const data = response.refreshGoogleSheetsData;
                return new IntegrationPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ResendOrganizationInvite Mutation
     *
     * @param request - function to call the graphql client
     */
    class ResendOrganizationInviteMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ResendOrganizationInvite mutation and return a DeletePayload
         *
         * @param id - required id to pass to resendOrganizationInvite
         * @returns parsed response from ResendOrganizationInviteMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ResendOrganizationInviteDocument, {
                    id,
                });
                const data = response.resendOrganizationInvite;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ResendOrganizationInviteByEmail Mutation
     *
     * @param request - function to call the graphql client
     */
    class ResendOrganizationInviteByEmailMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ResendOrganizationInviteByEmail mutation and return a DeletePayload
         *
         * @param email - required email to pass to resendOrganizationInviteByEmail
         * @returns parsed response from ResendOrganizationInviteByEmailMutation
         */
        fetch(email) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ResendOrganizationInviteByEmailDocument, {
                    email,
                });
                const data = response.resendOrganizationInviteByEmail;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveRoadmap Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveRoadmapMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveRoadmap mutation and return a RoadmapArchivePayload
         *
         * @param id - required id to pass to archiveRoadmap
         * @returns parsed response from ArchiveRoadmapMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveRoadmapDocument, {
                    id,
                });
                const data = response.roadmapArchive;
                return new RoadmapArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateRoadmap Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateRoadmapMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateRoadmap mutation and return a RoadmapPayload
         *
         * @param input - required input to pass to createRoadmap
         * @returns parsed response from CreateRoadmapMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateRoadmapDocument, {
                    input,
                });
                const data = response.roadmapCreate;
                return new RoadmapPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteRoadmap Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteRoadmapMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteRoadmap mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteRoadmap
         * @returns parsed response from DeleteRoadmapMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteRoadmapDocument, {
                    id,
                });
                const data = response.roadmapDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateRoadmapToProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateRoadmapToProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateRoadmapToProject mutation and return a RoadmapToProjectPayload
         *
         * @param input - required input to pass to createRoadmapToProject
         * @returns parsed response from CreateRoadmapToProjectMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateRoadmapToProjectDocument, {
                    input,
                });
                const data = response.roadmapToProjectCreate;
                return new RoadmapToProjectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteRoadmapToProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteRoadmapToProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteRoadmapToProject mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteRoadmapToProject
         * @returns parsed response from DeleteRoadmapToProjectMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteRoadmapToProjectDocument, {
                    id,
                });
                const data = response.roadmapToProjectDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateRoadmapToProject Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateRoadmapToProjectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateRoadmapToProject mutation and return a RoadmapToProjectPayload
         *
         * @param id - required id to pass to updateRoadmapToProject
         * @param input - required input to pass to updateRoadmapToProject
         * @returns parsed response from UpdateRoadmapToProjectMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateRoadmapToProjectDocument, {
                    id,
                    input,
                });
                const data = response.roadmapToProjectUpdate;
                return new RoadmapToProjectPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnarchiveRoadmap Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnarchiveRoadmapMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnarchiveRoadmap mutation and return a RoadmapArchivePayload
         *
         * @param id - required id to pass to unarchiveRoadmap
         * @returns parsed response from UnarchiveRoadmapMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnarchiveRoadmapDocument, {
                    id,
                });
                const data = response.roadmapUnarchive;
                return new RoadmapArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateRoadmap Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateRoadmapMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateRoadmap mutation and return a RoadmapPayload
         *
         * @param id - required id to pass to updateRoadmap
         * @param input - required input to pass to updateRoadmap
         * @returns parsed response from UpdateRoadmapMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateRoadmapDocument, {
                    id,
                    input,
                });
                const data = response.roadmapUpdate;
                return new RoadmapPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable SamlTokenUserAccountAuth Mutation
     *
     * @param request - function to call the graphql client
     */
    class SamlTokenUserAccountAuthMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SamlTokenUserAccountAuth mutation and return a AuthResolverResponse
         *
         * @param input - required input to pass to samlTokenUserAccountAuth
         * @returns parsed response from SamlTokenUserAccountAuthMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(SamlTokenUserAccountAuthDocument, {
                    input,
                });
                const data = response.samlTokenUserAccountAuth;
                return new AuthResolverResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateTeam Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateTeamMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateTeam mutation and return a TeamPayload
         *
         * @param input - required input to pass to createTeam
         * @param variables - variables without 'input' to pass into the CreateTeamMutation
         * @returns parsed response from CreateTeamMutation
         */
        fetch(input, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateTeamDocument, Object.assign({ input }, variables));
                const data = response.teamCreate;
                return new TeamPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteTeamCycles Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteTeamCyclesMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteTeamCycles mutation and return a TeamPayload
         *
         * @param id - required id to pass to deleteTeamCycles
         * @returns parsed response from DeleteTeamCyclesMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteTeamCyclesDocument, {
                    id,
                });
                const data = response.teamCyclesDelete;
                return new TeamPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteTeam Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteTeamMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteTeam mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteTeam
         * @returns parsed response from DeleteTeamMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteTeamDocument, {
                    id,
                });
                const data = response.teamDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteTeamKey Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteTeamKeyMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteTeamKey mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteTeamKey
         * @returns parsed response from DeleteTeamKeyMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteTeamKeyDocument, {
                    id,
                });
                const data = response.teamKeyDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateTeamMembership Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateTeamMembershipMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateTeamMembership mutation and return a TeamMembershipPayload
         *
         * @param input - required input to pass to createTeamMembership
         * @returns parsed response from CreateTeamMembershipMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateTeamMembershipDocument, {
                    input,
                });
                const data = response.teamMembershipCreate;
                return new TeamMembershipPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteTeamMembership Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteTeamMembershipMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteTeamMembership mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteTeamMembership
         * @param variables - variables without 'id' to pass into the DeleteTeamMembershipMutation
         * @returns parsed response from DeleteTeamMembershipMutation
         */
        fetch(id, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteTeamMembershipDocument, Object.assign({ id }, variables));
                const data = response.teamMembershipDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateTeamMembership Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateTeamMembershipMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateTeamMembership mutation and return a TeamMembershipPayload
         *
         * @param id - required id to pass to updateTeamMembership
         * @param input - required input to pass to updateTeamMembership
         * @returns parsed response from UpdateTeamMembershipMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateTeamMembershipDocument, {
                    id,
                    input,
                });
                const data = response.teamMembershipUpdate;
                return new TeamMembershipPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnarchiveTeam Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnarchiveTeamMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnarchiveTeam mutation and return a TeamArchivePayload
         *
         * @param id - required id to pass to unarchiveTeam
         * @returns parsed response from UnarchiveTeamMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnarchiveTeamDocument, {
                    id,
                });
                const data = response.teamUnarchive;
                return new TeamArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateTeam Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateTeamMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateTeam mutation and return a TeamPayload
         *
         * @param id - required id to pass to updateTeam
         * @param input - required input to pass to updateTeam
         * @param variables - variables without 'id', 'input' to pass into the UpdateTeamMutation
         * @returns parsed response from UpdateTeamMutation
         */
        fetch(id, input, variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateTeamDocument, Object.assign({ id,
                    input }, variables));
                const data = response.teamUpdate;
                return new TeamPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateTemplate Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateTemplateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateTemplate mutation and return a TemplatePayload
         *
         * @param input - required input to pass to createTemplate
         * @returns parsed response from CreateTemplateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateTemplateDocument, {
                    input,
                });
                const data = response.templateCreate;
                return new TemplatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteTemplate Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteTemplateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteTemplate mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteTemplate
         * @returns parsed response from DeleteTemplateMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteTemplateDocument, {
                    id,
                });
                const data = response.templateDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateTemplate Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateTemplateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateTemplate mutation and return a TemplatePayload
         *
         * @param id - required id to pass to updateTemplate
         * @param input - required input to pass to updateTemplate
         * @returns parsed response from UpdateTemplateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateTemplateDocument, {
                    id,
                    input,
                });
                const data = response.templateUpdate;
                return new TemplatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateTimeSchedule Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateTimeScheduleMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateTimeSchedule mutation and return a TimeSchedulePayload
         *
         * @param input - required input to pass to createTimeSchedule
         * @returns parsed response from CreateTimeScheduleMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateTimeScheduleDocument, {
                    input,
                });
                const data = response.timeScheduleCreate;
                return new TimeSchedulePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteTimeSchedule Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteTimeScheduleMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteTimeSchedule mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteTimeSchedule
         * @returns parsed response from DeleteTimeScheduleMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteTimeScheduleDocument, {
                    id,
                });
                const data = response.timeScheduleDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable TimeScheduleRefreshIntegrationSchedule Mutation
     *
     * @param request - function to call the graphql client
     */
    class TimeScheduleRefreshIntegrationScheduleMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TimeScheduleRefreshIntegrationSchedule mutation and return a TimeSchedulePayload
         *
         * @param id - required id to pass to timeScheduleRefreshIntegrationSchedule
         * @returns parsed response from TimeScheduleRefreshIntegrationScheduleMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TimeScheduleRefreshIntegrationScheduleDocument, {
                    id,
                });
                const data = response.timeScheduleRefreshIntegrationSchedule;
                return new TimeSchedulePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateTimeSchedule Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateTimeScheduleMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateTimeSchedule mutation and return a TimeSchedulePayload
         *
         * @param id - required id to pass to updateTimeSchedule
         * @param input - required input to pass to updateTimeSchedule
         * @returns parsed response from UpdateTimeScheduleMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateTimeScheduleDocument, {
                    id,
                    input,
                });
                const data = response.timeScheduleUpdate;
                return new TimeSchedulePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable TimeScheduleUpsertExternal Mutation
     *
     * @param request - function to call the graphql client
     */
    class TimeScheduleUpsertExternalMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the TimeScheduleUpsertExternal mutation and return a TimeSchedulePayload
         *
         * @param externalId - required externalId to pass to timeScheduleUpsertExternal
         * @param input - required input to pass to timeScheduleUpsertExternal
         * @returns parsed response from TimeScheduleUpsertExternalMutation
         */
        fetch(externalId, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TimeScheduleUpsertExternalDocument, {
                    externalId,
                    input,
                });
                const data = response.timeScheduleUpsertExternal;
                return new TimeSchedulePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateTriageResponsibility Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateTriageResponsibilityMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateTriageResponsibility mutation and return a TriageResponsibilityPayload
         *
         * @param input - required input to pass to createTriageResponsibility
         * @returns parsed response from CreateTriageResponsibilityMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateTriageResponsibilityDocument, {
                    input,
                });
                const data = response.triageResponsibilityCreate;
                return new TriageResponsibilityPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteTriageResponsibility Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteTriageResponsibilityMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteTriageResponsibility mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteTriageResponsibility
         * @returns parsed response from DeleteTriageResponsibilityMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteTriageResponsibilityDocument, {
                    id,
                });
                const data = response.triageResponsibilityDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateTriageResponsibility Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateTriageResponsibilityMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateTriageResponsibility mutation and return a TriageResponsibilityPayload
         *
         * @param id - required id to pass to updateTriageResponsibility
         * @param input - required input to pass to updateTriageResponsibility
         * @returns parsed response from UpdateTriageResponsibilityMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateTriageResponsibilityDocument, {
                    id,
                    input,
                });
                const data = response.triageResponsibilityUpdate;
                return new TriageResponsibilityPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserDemoteAdmin Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserDemoteAdminMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserDemoteAdmin mutation and return a UserAdminPayload
         *
         * @param id - required id to pass to userDemoteAdmin
         * @returns parsed response from UserDemoteAdminMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserDemoteAdminDocument, {
                    id,
                });
                const data = response.userDemoteAdmin;
                return new UserAdminPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserDemoteMember Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserDemoteMemberMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserDemoteMember mutation and return a UserAdminPayload
         *
         * @param id - required id to pass to userDemoteMember
         * @returns parsed response from UserDemoteMemberMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserDemoteMemberDocument, {
                    id,
                });
                const data = response.userDemoteMember;
                return new UserAdminPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserDiscordConnect Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserDiscordConnectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserDiscordConnect mutation and return a UserPayload
         *
         * @param code - required code to pass to userDiscordConnect
         * @param redirectUri - required redirectUri to pass to userDiscordConnect
         * @returns parsed response from UserDiscordConnectMutation
         */
        fetch(code, redirectUri) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserDiscordConnectDocument, {
                    code,
                    redirectUri,
                });
                const data = response.userDiscordConnect;
                return new UserPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserExternalUserDisconnect Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserExternalUserDisconnectMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserExternalUserDisconnect mutation and return a UserPayload
         *
         * @param service - required service to pass to userExternalUserDisconnect
         * @returns parsed response from UserExternalUserDisconnectMutation
         */
        fetch(service) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserExternalUserDisconnectDocument, {
                    service,
                });
                const data = response.userExternalUserDisconnect;
                return new UserPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateUserFlag Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateUserFlagMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateUserFlag mutation and return a UserSettingsFlagPayload
         *
         * @param flag - required flag to pass to updateUserFlag
         * @param operation - required operation to pass to updateUserFlag
         * @returns parsed response from UpdateUserFlagMutation
         */
        fetch(flag, operation) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateUserFlagDocument, {
                    flag,
                    operation,
                });
                const data = response.userFlagUpdate;
                return new UserSettingsFlagPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserPromoteAdmin Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserPromoteAdminMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserPromoteAdmin mutation and return a UserAdminPayload
         *
         * @param id - required id to pass to userPromoteAdmin
         * @returns parsed response from UserPromoteAdminMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserPromoteAdminDocument, {
                    id,
                });
                const data = response.userPromoteAdmin;
                return new UserAdminPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserPromoteMember Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserPromoteMemberMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserPromoteMember mutation and return a UserAdminPayload
         *
         * @param id - required id to pass to userPromoteMember
         * @returns parsed response from UserPromoteMemberMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserPromoteMemberDocument, {
                    id,
                });
                const data = response.userPromoteMember;
                return new UserAdminPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettingsFlagsReset Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserSettingsFlagsResetMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettingsFlagsReset mutation and return a UserSettingsFlagsResetPayload
         *
         * @param variables - variables to pass into the UserSettingsFlagsResetMutation
         * @returns parsed response from UserSettingsFlagsResetMutation
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettingsFlagsResetDocument, variables);
                const data = response.userSettingsFlagsReset;
                return new UserSettingsFlagsResetPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateUserSettings Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateUserSettingsMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateUserSettings mutation and return a UserSettingsPayload
         *
         * @param id - required id to pass to updateUserSettings
         * @param input - required input to pass to updateUserSettings
         * @returns parsed response from UpdateUserSettingsMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateUserSettingsDocument, {
                    id,
                    input,
                });
                const data = response.userSettingsUpdate;
                return new UserSettingsPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable SuspendUser Mutation
     *
     * @param request - function to call the graphql client
     */
    class SuspendUserMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the SuspendUser mutation and return a UserAdminPayload
         *
         * @param id - required id to pass to suspendUser
         * @returns parsed response from SuspendUserMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(SuspendUserDocument, {
                    id,
                });
                const data = response.userSuspend;
                return new UserAdminPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserUnlinkFromIdentityProvider Mutation
     *
     * @param request - function to call the graphql client
     */
    class UserUnlinkFromIdentityProviderMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserUnlinkFromIdentityProvider mutation and return a UserAdminPayload
         *
         * @param id - required id to pass to userUnlinkFromIdentityProvider
         * @returns parsed response from UserUnlinkFromIdentityProviderMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserUnlinkFromIdentityProviderDocument, {
                    id,
                });
                const data = response.userUnlinkFromIdentityProvider;
                return new UserAdminPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UnsuspendUser Mutation
     *
     * @param request - function to call the graphql client
     */
    class UnsuspendUserMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UnsuspendUser mutation and return a UserAdminPayload
         *
         * @param id - required id to pass to unsuspendUser
         * @returns parsed response from UnsuspendUserMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UnsuspendUserDocument, {
                    id,
                });
                const data = response.userUnsuspend;
                return new UserAdminPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateUser Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateUserMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateUser mutation and return a UserPayload
         *
         * @param id - required id to pass to updateUser
         * @param input - required input to pass to updateUser
         * @returns parsed response from UpdateUserMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateUserDocument, {
                    id,
                    input,
                });
                const data = response.userUpdate;
                return new UserPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateViewPreferences Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateViewPreferencesMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateViewPreferences mutation and return a ViewPreferencesPayload
         *
         * @param input - required input to pass to createViewPreferences
         * @returns parsed response from CreateViewPreferencesMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateViewPreferencesDocument, {
                    input,
                });
                const data = response.viewPreferencesCreate;
                return new ViewPreferencesPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteViewPreferences Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteViewPreferencesMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteViewPreferences mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteViewPreferences
         * @returns parsed response from DeleteViewPreferencesMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteViewPreferencesDocument, {
                    id,
                });
                const data = response.viewPreferencesDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateViewPreferences Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateViewPreferencesMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateViewPreferences mutation and return a ViewPreferencesPayload
         *
         * @param id - required id to pass to updateViewPreferences
         * @param input - required input to pass to updateViewPreferences
         * @returns parsed response from UpdateViewPreferencesMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateViewPreferencesDocument, {
                    id,
                    input,
                });
                const data = response.viewPreferencesUpdate;
                return new ViewPreferencesPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateWebhook Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateWebhookMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateWebhook mutation and return a WebhookPayload
         *
         * @param input - required input to pass to createWebhook
         * @returns parsed response from CreateWebhookMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateWebhookDocument, {
                    input,
                });
                const data = response.webhookCreate;
                return new WebhookPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable DeleteWebhook Mutation
     *
     * @param request - function to call the graphql client
     */
    class DeleteWebhookMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the DeleteWebhook mutation and return a DeletePayload
         *
         * @param id - required id to pass to deleteWebhook
         * @returns parsed response from DeleteWebhookMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(DeleteWebhookDocument, {
                    id,
                });
                const data = response.webhookDelete;
                return new DeletePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateWebhook Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateWebhookMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateWebhook mutation and return a WebhookPayload
         *
         * @param id - required id to pass to updateWebhook
         * @param input - required input to pass to updateWebhook
         * @returns parsed response from UpdateWebhookMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateWebhookDocument, {
                    id,
                    input,
                });
                const data = response.webhookUpdate;
                return new WebhookPayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable ArchiveWorkflowState Mutation
     *
     * @param request - function to call the graphql client
     */
    class ArchiveWorkflowStateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the ArchiveWorkflowState mutation and return a WorkflowStateArchivePayload
         *
         * @param id - required id to pass to archiveWorkflowState
         * @returns parsed response from ArchiveWorkflowStateMutation
         */
        fetch(id) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ArchiveWorkflowStateDocument, {
                    id,
                });
                const data = response.workflowStateArchive;
                return new WorkflowStateArchivePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable CreateWorkflowState Mutation
     *
     * @param request - function to call the graphql client
     */
    class CreateWorkflowStateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the CreateWorkflowState mutation and return a WorkflowStatePayload
         *
         * @param input - required input to pass to createWorkflowState
         * @returns parsed response from CreateWorkflowStateMutation
         */
        fetch(input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CreateWorkflowStateDocument, {
                    input,
                });
                const data = response.workflowStateCreate;
                return new WorkflowStatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable UpdateWorkflowState Mutation
     *
     * @param request - function to call the graphql client
     */
    class UpdateWorkflowStateMutation extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UpdateWorkflowState mutation and return a WorkflowStatePayload
         *
         * @param id - required id to pass to updateWorkflowState
         * @param input - required input to pass to updateWorkflowState
         * @returns parsed response from UpdateWorkflowStateMutation
         */
        fetch(id, input) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UpdateWorkflowStateDocument, {
                    id,
                    input,
                });
                const data = response.workflowStateUpdate;
                return new WorkflowStatePayload(this._request, data);
            });
        }
    }
    /**
     * A fetchable AgentSession_Activities Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to agentSession
     * @param variables - variables without 'id' to pass into the AgentSession_ActivitiesQuery
     */
    class AgentSession_ActivitiesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AgentSession_Activities query and return a AgentActivityConnection
         *
         * @param variables - variables without 'id' to pass into the AgentSession_ActivitiesQuery
         * @returns parsed response from AgentSession_ActivitiesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AgentSession_ActivitiesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.agentSession.activities;
                return new AgentActivityConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_Attachments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_AttachmentsQuery
     */
    class AttachmentIssue_AttachmentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_Attachments query and return a AttachmentConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_AttachmentsQuery
         * @returns parsed response from AttachmentIssue_AttachmentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_AttachmentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.attachmentIssue.attachments;
                return new AttachmentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_BotActor Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     */
    class AttachmentIssue_BotActorQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the AttachmentIssue_BotActor query and return a ActorBot
         *
         * @returns parsed response from AttachmentIssue_BotActorQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_BotActorDocument, {
                    id: this._id,
                });
                const data = response.attachmentIssue.botActor;
                return data ? new ActorBot(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_Children Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_ChildrenQuery
     */
    class AttachmentIssue_ChildrenQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_Children query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_ChildrenQuery
         * @returns parsed response from AttachmentIssue_ChildrenQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_ChildrenDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.attachmentIssue.children;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_Comments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_CommentsQuery
     */
    class AttachmentIssue_CommentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_Comments query and return a CommentConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_CommentsQuery
         * @returns parsed response from AttachmentIssue_CommentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_CommentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.attachmentIssue.comments;
                return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_FormerAttachments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_FormerAttachmentsQuery
     */
    class AttachmentIssue_FormerAttachmentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_FormerAttachments query and return a AttachmentConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_FormerAttachmentsQuery
         * @returns parsed response from AttachmentIssue_FormerAttachmentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_FormerAttachmentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.attachmentIssue.formerAttachments;
                return new AttachmentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_FormerNeeds Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_FormerNeedsQuery
     */
    class AttachmentIssue_FormerNeedsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_FormerNeeds query and return a CustomerNeedConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_FormerNeedsQuery
         * @returns parsed response from AttachmentIssue_FormerNeedsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_FormerNeedsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.attachmentIssue.formerNeeds;
                return new CustomerNeedConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_History Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_HistoryQuery
     */
    class AttachmentIssue_HistoryQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_History query and return a IssueHistoryConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_HistoryQuery
         * @returns parsed response from AttachmentIssue_HistoryQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_HistoryDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.attachmentIssue.history;
                return new IssueHistoryConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_InverseRelations Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_InverseRelationsQuery
     */
    class AttachmentIssue_InverseRelationsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_InverseRelations query and return a IssueRelationConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_InverseRelationsQuery
         * @returns parsed response from AttachmentIssue_InverseRelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_InverseRelationsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.attachmentIssue.inverseRelations;
                return new IssueRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_Labels Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_LabelsQuery
     */
    class AttachmentIssue_LabelsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_Labels query and return a IssueLabelConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_LabelsQuery
         * @returns parsed response from AttachmentIssue_LabelsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_LabelsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.attachmentIssue.labels;
                return new IssueLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_Needs Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_NeedsQuery
     */
    class AttachmentIssue_NeedsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_Needs query and return a CustomerNeedConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_NeedsQuery
         * @returns parsed response from AttachmentIssue_NeedsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_NeedsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.attachmentIssue.needs;
                return new CustomerNeedConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_Relations Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_RelationsQuery
     */
    class AttachmentIssue_RelationsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_Relations query and return a IssueRelationConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_RelationsQuery
         * @returns parsed response from AttachmentIssue_RelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_RelationsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.attachmentIssue.relations;
                return new IssueRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable AttachmentIssue_Subscribers Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to attachmentIssue
     * @param variables - variables without 'id' to pass into the AttachmentIssue_SubscribersQuery
     */
    class AttachmentIssue_SubscribersQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the AttachmentIssue_Subscribers query and return a UserConnection
         *
         * @param variables - variables without 'id' to pass into the AttachmentIssue_SubscribersQuery
         * @returns parsed response from AttachmentIssue_SubscribersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(AttachmentIssue_SubscribersDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.attachmentIssue.subscribers;
                return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Comment_BotActor Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Comment_BotActorQuery
     */
    class Comment_BotActorQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Comment_BotActor query and return a ActorBot
         *
         * @param variables - variables to pass into the Comment_BotActorQuery
         * @returns parsed response from Comment_BotActorQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Comment_BotActorDocument, variables);
                const data = response.comment.botActor;
                return data ? new ActorBot(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable Comment_Children Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Comment_ChildrenQuery
     */
    class Comment_ChildrenQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Comment_Children query and return a CommentConnection
         *
         * @param variables - variables to pass into the Comment_ChildrenQuery
         * @returns parsed response from Comment_ChildrenQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Comment_ChildrenDocument, variables);
                const data = response.comment.children;
                return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Comment_DocumentContent Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Comment_DocumentContentQuery
     */
    class Comment_DocumentContentQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Comment_DocumentContent query and return a DocumentContent
         *
         * @param variables - variables to pass into the Comment_DocumentContentQuery
         * @returns parsed response from Comment_DocumentContentQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Comment_DocumentContentDocument, variables);
                const data = response.comment.documentContent;
                return data ? new DocumentContent(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable Comment_ExternalThread Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Comment_ExternalThreadQuery
     */
    class Comment_ExternalThreadQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Comment_ExternalThread query and return a SyncedExternalThread
         *
         * @param variables - variables to pass into the Comment_ExternalThreadQuery
         * @returns parsed response from Comment_ExternalThreadQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Comment_ExternalThreadDocument, variables);
                const data = response.comment.externalThread;
                return data ? new SyncedExternalThread(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable CustomView_Initiatives Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to customView
     * @param variables - variables without 'id' to pass into the CustomView_InitiativesQuery
     */
    class CustomView_InitiativesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the CustomView_Initiatives query and return a InitiativeConnection
         *
         * @param variables - variables without 'id' to pass into the CustomView_InitiativesQuery
         * @returns parsed response from CustomView_InitiativesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomView_InitiativesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.customView.initiatives;
                return new InitiativeConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable CustomView_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to customView
     * @param variables - variables without 'id' to pass into the CustomView_IssuesQuery
     */
    class CustomView_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the CustomView_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the CustomView_IssuesQuery
         * @returns parsed response from CustomView_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomView_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.customView.issues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable CustomView_OrganizationViewPreferences Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to customView
     */
    class CustomView_OrganizationViewPreferencesQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the CustomView_OrganizationViewPreferences query and return a ViewPreferences
         *
         * @returns parsed response from CustomView_OrganizationViewPreferencesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomView_OrganizationViewPreferencesDocument, {
                    id: this._id,
                });
                const data = response.customView.organizationViewPreferences;
                return data ? new ViewPreferences(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable CustomView_Projects Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to customView
     * @param variables - variables without 'id' to pass into the CustomView_ProjectsQuery
     */
    class CustomView_ProjectsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the CustomView_Projects query and return a ProjectConnection
         *
         * @param variables - variables without 'id' to pass into the CustomView_ProjectsQuery
         * @returns parsed response from CustomView_ProjectsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomView_ProjectsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.customView.projects;
                return new ProjectConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable CustomView_UserViewPreferences Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to customView
     */
    class CustomView_UserViewPreferencesQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the CustomView_UserViewPreferences query and return a ViewPreferences
         *
         * @returns parsed response from CustomView_UserViewPreferencesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomView_UserViewPreferencesDocument, {
                    id: this._id,
                });
                const data = response.customView.userViewPreferences;
                return data ? new ViewPreferences(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable CustomView_ViewPreferencesValues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to customView
     */
    class CustomView_ViewPreferencesValuesQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the CustomView_ViewPreferencesValues query and return a ViewPreferencesValues
         *
         * @returns parsed response from CustomView_ViewPreferencesValuesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomView_ViewPreferencesValuesDocument, {
                    id: this._id,
                });
                const data = response.customView.viewPreferencesValues;
                return data ? new ViewPreferencesValues(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable CustomView_OrganizationViewPreferences_Preferences Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to customView_organizationViewPreferences
     */
    class CustomView_OrganizationViewPreferences_PreferencesQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the CustomView_OrganizationViewPreferences_Preferences query and return a ViewPreferencesValues
         *
         * @returns parsed response from CustomView_OrganizationViewPreferences_PreferencesQuery
         */
        fetch() {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomView_OrganizationViewPreferences_PreferencesDocument, {
                    id: this._id,
                });
                const data = (_a = response.customView.organizationViewPreferences) === null || _a === void 0 ? void 0 : _a.preferences;
                return data ? new ViewPreferencesValues(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable CustomView_UserViewPreferences_Preferences Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to customView_userViewPreferences
     */
    class CustomView_UserViewPreferences_PreferencesQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the CustomView_UserViewPreferences_Preferences query and return a ViewPreferencesValues
         *
         * @returns parsed response from CustomView_UserViewPreferences_PreferencesQuery
         */
        fetch() {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomView_UserViewPreferences_PreferencesDocument, {
                    id: this._id,
                });
                const data = (_a = response.customView.userViewPreferences) === null || _a === void 0 ? void 0 : _a.preferences;
                return data ? new ViewPreferencesValues(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable CustomerNeed_ProjectAttachment Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the CustomerNeed_ProjectAttachmentQuery
     */
    class CustomerNeed_ProjectAttachmentQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the CustomerNeed_ProjectAttachment query and return a ProjectAttachment
         *
         * @param variables - variables to pass into the CustomerNeed_ProjectAttachmentQuery
         * @returns parsed response from CustomerNeed_ProjectAttachmentQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(CustomerNeed_ProjectAttachmentDocument, variables);
                const data = response.customerNeed.projectAttachment;
                return data ? new ProjectAttachment(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable Cycle_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to cycle
     * @param variables - variables without 'id' to pass into the Cycle_IssuesQuery
     */
    class Cycle_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Cycle_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the Cycle_IssuesQuery
         * @returns parsed response from Cycle_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Cycle_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.cycle.issues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Cycle_UncompletedIssuesUponClose Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to cycle
     * @param variables - variables without 'id' to pass into the Cycle_UncompletedIssuesUponCloseQuery
     */
    class Cycle_UncompletedIssuesUponCloseQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Cycle_UncompletedIssuesUponClose query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the Cycle_UncompletedIssuesUponCloseQuery
         * @returns parsed response from Cycle_UncompletedIssuesUponCloseQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Cycle_UncompletedIssuesUponCloseDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.cycle.uncompletedIssuesUponClose;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Document_Comments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to document
     * @param variables - variables without 'id' to pass into the Document_CommentsQuery
     */
    class Document_CommentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Document_Comments query and return a CommentConnection
         *
         * @param variables - variables without 'id' to pass into the Document_CommentsQuery
         * @returns parsed response from Document_CommentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Document_CommentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.document.comments;
                return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable EmailIntakeAddress_SesDomainIdentity Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to emailIntakeAddress
     */
    class EmailIntakeAddress_SesDomainIdentityQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the EmailIntakeAddress_SesDomainIdentity query and return a SesDomainIdentity
         *
         * @returns parsed response from EmailIntakeAddress_SesDomainIdentityQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(EmailIntakeAddress_SesDomainIdentityDocument, {
                    id: this._id,
                });
                const data = response.emailIntakeAddress.sesDomainIdentity;
                return data ? new SesDomainIdentity(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable Favorite_Children Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to favorite
     * @param variables - variables without 'id' to pass into the Favorite_ChildrenQuery
     */
    class Favorite_ChildrenQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Favorite_Children query and return a FavoriteConnection
         *
         * @param variables - variables without 'id' to pass into the Favorite_ChildrenQuery
         * @returns parsed response from Favorite_ChildrenQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Favorite_ChildrenDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.favorite.children;
                return new FavoriteConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Initiative_DocumentContent Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to initiative
     */
    class Initiative_DocumentContentQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the Initiative_DocumentContent query and return a DocumentContent
         *
         * @returns parsed response from Initiative_DocumentContentQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Initiative_DocumentContentDocument, {
                    id: this._id,
                });
                const data = response.initiative.documentContent;
                return data ? new DocumentContent(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable Initiative_Documents Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to initiative
     * @param variables - variables without 'id' to pass into the Initiative_DocumentsQuery
     */
    class Initiative_DocumentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Initiative_Documents query and return a DocumentConnection
         *
         * @param variables - variables without 'id' to pass into the Initiative_DocumentsQuery
         * @returns parsed response from Initiative_DocumentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Initiative_DocumentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.initiative.documents;
                return new DocumentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Initiative_History Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to initiative
     * @param variables - variables without 'id' to pass into the Initiative_HistoryQuery
     */
    class Initiative_HistoryQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Initiative_History query and return a InitiativeHistoryConnection
         *
         * @param variables - variables without 'id' to pass into the Initiative_HistoryQuery
         * @returns parsed response from Initiative_HistoryQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Initiative_HistoryDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.initiative.history;
                return new InitiativeHistoryConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Initiative_Links Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to initiative
     * @param variables - variables without 'id' to pass into the Initiative_LinksQuery
     */
    class Initiative_LinksQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Initiative_Links query and return a EntityExternalLinkConnection
         *
         * @param variables - variables without 'id' to pass into the Initiative_LinksQuery
         * @returns parsed response from Initiative_LinksQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Initiative_LinksDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.initiative.links;
                return new EntityExternalLinkConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Initiative_Projects Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to initiative
     * @param variables - variables without 'id' to pass into the Initiative_ProjectsQuery
     */
    class Initiative_ProjectsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Initiative_Projects query and return a ProjectConnection
         *
         * @param variables - variables without 'id' to pass into the Initiative_ProjectsQuery
         * @returns parsed response from Initiative_ProjectsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Initiative_ProjectsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.initiative.projects;
                return new ProjectConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Initiative_SubInitiatives Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to initiative
     * @param variables - variables without 'id' to pass into the Initiative_SubInitiativesQuery
     */
    class Initiative_SubInitiativesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Initiative_SubInitiatives query and return a InitiativeConnection
         *
         * @param variables - variables without 'id' to pass into the Initiative_SubInitiativesQuery
         * @returns parsed response from Initiative_SubInitiativesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Initiative_SubInitiativesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.initiative.subInitiatives;
                return new InitiativeConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable InitiativeUpdate_Comments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to initiativeUpdate
     * @param variables - variables without 'id' to pass into the InitiativeUpdate_CommentsQuery
     */
    class InitiativeUpdate_CommentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the InitiativeUpdate_Comments query and return a CommentConnection
         *
         * @param variables - variables without 'id' to pass into the InitiativeUpdate_CommentsQuery
         * @returns parsed response from InitiativeUpdate_CommentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(InitiativeUpdate_CommentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.initiativeUpdate.comments;
                return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Issue_Attachments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_AttachmentsQuery
     */
    class Issue_AttachmentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_Attachments query and return a AttachmentConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_AttachmentsQuery
         * @returns parsed response from Issue_AttachmentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_AttachmentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issue.attachments;
                return new AttachmentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Issue_BotActor Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     */
    class Issue_BotActorQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the Issue_BotActor query and return a ActorBot
         *
         * @returns parsed response from Issue_BotActorQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_BotActorDocument, {
                    id: this._id,
                });
                const data = response.issue.botActor;
                return data ? new ActorBot(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable Issue_Children Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_ChildrenQuery
     */
    class Issue_ChildrenQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_Children query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_ChildrenQuery
         * @returns parsed response from Issue_ChildrenQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_ChildrenDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issue.children;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Issue_Comments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_CommentsQuery
     */
    class Issue_CommentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_Comments query and return a CommentConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_CommentsQuery
         * @returns parsed response from Issue_CommentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_CommentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issue.comments;
                return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Issue_FormerAttachments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_FormerAttachmentsQuery
     */
    class Issue_FormerAttachmentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_FormerAttachments query and return a AttachmentConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_FormerAttachmentsQuery
         * @returns parsed response from Issue_FormerAttachmentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_FormerAttachmentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issue.formerAttachments;
                return new AttachmentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Issue_FormerNeeds Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_FormerNeedsQuery
     */
    class Issue_FormerNeedsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_FormerNeeds query and return a CustomerNeedConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_FormerNeedsQuery
         * @returns parsed response from Issue_FormerNeedsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_FormerNeedsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issue.formerNeeds;
                return new CustomerNeedConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Issue_History Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_HistoryQuery
     */
    class Issue_HistoryQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_History query and return a IssueHistoryConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_HistoryQuery
         * @returns parsed response from Issue_HistoryQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_HistoryDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issue.history;
                return new IssueHistoryConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Issue_InverseRelations Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_InverseRelationsQuery
     */
    class Issue_InverseRelationsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_InverseRelations query and return a IssueRelationConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_InverseRelationsQuery
         * @returns parsed response from Issue_InverseRelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_InverseRelationsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issue.inverseRelations;
                return new IssueRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Issue_Labels Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_LabelsQuery
     */
    class Issue_LabelsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_Labels query and return a IssueLabelConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_LabelsQuery
         * @returns parsed response from Issue_LabelsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_LabelsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issue.labels;
                return new IssueLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Issue_Needs Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_NeedsQuery
     */
    class Issue_NeedsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_Needs query and return a CustomerNeedConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_NeedsQuery
         * @returns parsed response from Issue_NeedsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_NeedsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issue.needs;
                return new CustomerNeedConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Issue_Relations Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_RelationsQuery
     */
    class Issue_RelationsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_Relations query and return a IssueRelationConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_RelationsQuery
         * @returns parsed response from Issue_RelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_RelationsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issue.relations;
                return new IssueRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Issue_Subscribers Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issue
     * @param variables - variables without 'id' to pass into the Issue_SubscribersQuery
     */
    class Issue_SubscribersQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Issue_Subscribers query and return a UserConnection
         *
         * @param variables - variables without 'id' to pass into the Issue_SubscribersQuery
         * @returns parsed response from Issue_SubscribersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Issue_SubscribersDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issue.subscribers;
                return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable IssueLabel_Children Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issueLabel
     * @param variables - variables without 'id' to pass into the IssueLabel_ChildrenQuery
     */
    class IssueLabel_ChildrenQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the IssueLabel_Children query and return a IssueLabelConnection
         *
         * @param variables - variables without 'id' to pass into the IssueLabel_ChildrenQuery
         * @returns parsed response from IssueLabel_ChildrenQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueLabel_ChildrenDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issueLabel.children;
                return new IssueLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable IssueLabel_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to issueLabel
     * @param variables - variables without 'id' to pass into the IssueLabel_IssuesQuery
     */
    class IssueLabel_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the IssueLabel_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the IssueLabel_IssuesQuery
         * @returns parsed response from IssueLabel_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueLabel_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.issueLabel.issues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_Attachments Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_AttachmentsQuery
     */
    class IssueVcsBranchSearch_AttachmentsQuery extends Request {
        constructor(request, branchName, variables) {
            super(request);
            this._branchName = branchName;
            this._variables = variables;
        }
        /**
         * Call the IssueVcsBranchSearch_Attachments query and return a AttachmentConnection
         *
         * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_AttachmentsQuery
         * @returns parsed response from IssueVcsBranchSearch_AttachmentsQuery
         */
        fetch(variables) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_AttachmentsDocument, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), variables));
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.attachments;
                if (data) {
                    return new AttachmentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
                }
                else {
                    return undefined;
                }
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_BotActor Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     */
    class IssueVcsBranchSearch_BotActorQuery extends Request {
        constructor(request, branchName) {
            super(request);
            this._branchName = branchName;
        }
        /**
         * Call the IssueVcsBranchSearch_BotActor query and return a ActorBot
         *
         * @returns parsed response from IssueVcsBranchSearch_BotActorQuery
         */
        fetch() {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_BotActorDocument, {
                    branchName: this._branchName,
                });
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.botActor;
                return data ? new ActorBot(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_Children Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_ChildrenQuery
     */
    class IssueVcsBranchSearch_ChildrenQuery extends Request {
        constructor(request, branchName, variables) {
            super(request);
            this._branchName = branchName;
            this._variables = variables;
        }
        /**
         * Call the IssueVcsBranchSearch_Children query and return a IssueConnection
         *
         * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_ChildrenQuery
         * @returns parsed response from IssueVcsBranchSearch_ChildrenQuery
         */
        fetch(variables) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_ChildrenDocument, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), variables));
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.children;
                if (data) {
                    return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
                }
                else {
                    return undefined;
                }
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_Comments Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_CommentsQuery
     */
    class IssueVcsBranchSearch_CommentsQuery extends Request {
        constructor(request, branchName, variables) {
            super(request);
            this._branchName = branchName;
            this._variables = variables;
        }
        /**
         * Call the IssueVcsBranchSearch_Comments query and return a CommentConnection
         *
         * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_CommentsQuery
         * @returns parsed response from IssueVcsBranchSearch_CommentsQuery
         */
        fetch(variables) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_CommentsDocument, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), variables));
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.comments;
                if (data) {
                    return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
                }
                else {
                    return undefined;
                }
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_FormerAttachments Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_FormerAttachmentsQuery
     */
    class IssueVcsBranchSearch_FormerAttachmentsQuery extends Request {
        constructor(request, branchName, variables) {
            super(request);
            this._branchName = branchName;
            this._variables = variables;
        }
        /**
         * Call the IssueVcsBranchSearch_FormerAttachments query and return a AttachmentConnection
         *
         * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_FormerAttachmentsQuery
         * @returns parsed response from IssueVcsBranchSearch_FormerAttachmentsQuery
         */
        fetch(variables) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_FormerAttachmentsDocument, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), variables));
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.formerAttachments;
                if (data) {
                    return new AttachmentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
                }
                else {
                    return undefined;
                }
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_FormerNeeds Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_FormerNeedsQuery
     */
    class IssueVcsBranchSearch_FormerNeedsQuery extends Request {
        constructor(request, branchName, variables) {
            super(request);
            this._branchName = branchName;
            this._variables = variables;
        }
        /**
         * Call the IssueVcsBranchSearch_FormerNeeds query and return a CustomerNeedConnection
         *
         * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_FormerNeedsQuery
         * @returns parsed response from IssueVcsBranchSearch_FormerNeedsQuery
         */
        fetch(variables) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_FormerNeedsDocument, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), variables));
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.formerNeeds;
                if (data) {
                    return new CustomerNeedConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
                }
                else {
                    return undefined;
                }
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_History Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_HistoryQuery
     */
    class IssueVcsBranchSearch_HistoryQuery extends Request {
        constructor(request, branchName, variables) {
            super(request);
            this._branchName = branchName;
            this._variables = variables;
        }
        /**
         * Call the IssueVcsBranchSearch_History query and return a IssueHistoryConnection
         *
         * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_HistoryQuery
         * @returns parsed response from IssueVcsBranchSearch_HistoryQuery
         */
        fetch(variables) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_HistoryDocument, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), variables));
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.history;
                if (data) {
                    return new IssueHistoryConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
                }
                else {
                    return undefined;
                }
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_InverseRelations Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_InverseRelationsQuery
     */
    class IssueVcsBranchSearch_InverseRelationsQuery extends Request {
        constructor(request, branchName, variables) {
            super(request);
            this._branchName = branchName;
            this._variables = variables;
        }
        /**
         * Call the IssueVcsBranchSearch_InverseRelations query and return a IssueRelationConnection
         *
         * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_InverseRelationsQuery
         * @returns parsed response from IssueVcsBranchSearch_InverseRelationsQuery
         */
        fetch(variables) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_InverseRelationsDocument, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), variables));
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.inverseRelations;
                if (data) {
                    return new IssueRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
                }
                else {
                    return undefined;
                }
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_Labels Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_LabelsQuery
     */
    class IssueVcsBranchSearch_LabelsQuery extends Request {
        constructor(request, branchName, variables) {
            super(request);
            this._branchName = branchName;
            this._variables = variables;
        }
        /**
         * Call the IssueVcsBranchSearch_Labels query and return a IssueLabelConnection
         *
         * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_LabelsQuery
         * @returns parsed response from IssueVcsBranchSearch_LabelsQuery
         */
        fetch(variables) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_LabelsDocument, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), variables));
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.labels;
                if (data) {
                    return new IssueLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
                }
                else {
                    return undefined;
                }
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_Needs Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_NeedsQuery
     */
    class IssueVcsBranchSearch_NeedsQuery extends Request {
        constructor(request, branchName, variables) {
            super(request);
            this._branchName = branchName;
            this._variables = variables;
        }
        /**
         * Call the IssueVcsBranchSearch_Needs query and return a CustomerNeedConnection
         *
         * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_NeedsQuery
         * @returns parsed response from IssueVcsBranchSearch_NeedsQuery
         */
        fetch(variables) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_NeedsDocument, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), variables));
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.needs;
                if (data) {
                    return new CustomerNeedConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
                }
                else {
                    return undefined;
                }
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_Relations Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_RelationsQuery
     */
    class IssueVcsBranchSearch_RelationsQuery extends Request {
        constructor(request, branchName, variables) {
            super(request);
            this._branchName = branchName;
            this._variables = variables;
        }
        /**
         * Call the IssueVcsBranchSearch_Relations query and return a IssueRelationConnection
         *
         * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_RelationsQuery
         * @returns parsed response from IssueVcsBranchSearch_RelationsQuery
         */
        fetch(variables) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_RelationsDocument, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), variables));
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.relations;
                if (data) {
                    return new IssueRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
                }
                else {
                    return undefined;
                }
            });
        }
    }
    /**
     * A fetchable IssueVcsBranchSearch_Subscribers Query
     *
     * @param request - function to call the graphql client
     * @param branchName - required branchName to pass to issueVcsBranchSearch
     * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_SubscribersQuery
     */
    class IssueVcsBranchSearch_SubscribersQuery extends Request {
        constructor(request, branchName, variables) {
            super(request);
            this._branchName = branchName;
            this._variables = variables;
        }
        /**
         * Call the IssueVcsBranchSearch_Subscribers query and return a UserConnection
         *
         * @param variables - variables without 'branchName' to pass into the IssueVcsBranchSearch_SubscribersQuery
         * @returns parsed response from IssueVcsBranchSearch_SubscribersQuery
         */
        fetch(variables) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(IssueVcsBranchSearch_SubscribersDocument, Object.assign(Object.assign({ branchName: this._branchName }, this._variables), variables));
                const data = (_a = response.issueVcsBranchSearch) === null || _a === void 0 ? void 0 : _a.subscribers;
                if (data) {
                    return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
                }
                else {
                    return undefined;
                }
            });
        }
    }
    /**
     * A fetchable Organization_Integrations Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Organization_IntegrationsQuery
     */
    class Organization_IntegrationsQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Organization_Integrations query and return a IntegrationConnection
         *
         * @param variables - variables to pass into the Organization_IntegrationsQuery
         * @returns parsed response from Organization_IntegrationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Organization_IntegrationsDocument, variables);
                const data = response.organization.integrations;
                return new IntegrationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Organization_Labels Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Organization_LabelsQuery
     */
    class Organization_LabelsQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Organization_Labels query and return a IssueLabelConnection
         *
         * @param variables - variables to pass into the Organization_LabelsQuery
         * @returns parsed response from Organization_LabelsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Organization_LabelsDocument, variables);
                const data = response.organization.labels;
                return new IssueLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Organization_ProjectLabels Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Organization_ProjectLabelsQuery
     */
    class Organization_ProjectLabelsQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Organization_ProjectLabels query and return a ProjectLabelConnection
         *
         * @param variables - variables to pass into the Organization_ProjectLabelsQuery
         * @returns parsed response from Organization_ProjectLabelsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Organization_ProjectLabelsDocument, variables);
                const data = response.organization.projectLabels;
                return new ProjectLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Organization_Subscription Query
     *
     * @param request - function to call the graphql client
     */
    class Organization_SubscriptionQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the Organization_Subscription query and return a PaidSubscription
         *
         * @returns parsed response from Organization_SubscriptionQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Organization_SubscriptionDocument, {});
                const data = response.organization.subscription;
                return data ? new PaidSubscription(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable Organization_Teams Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Organization_TeamsQuery
     */
    class Organization_TeamsQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Organization_Teams query and return a TeamConnection
         *
         * @param variables - variables to pass into the Organization_TeamsQuery
         * @returns parsed response from Organization_TeamsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Organization_TeamsDocument, variables);
                const data = response.organization.teams;
                return new TeamConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Organization_Templates Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Organization_TemplatesQuery
     */
    class Organization_TemplatesQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Organization_Templates query and return a TemplateConnection
         *
         * @param variables - variables to pass into the Organization_TemplatesQuery
         * @returns parsed response from Organization_TemplatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Organization_TemplatesDocument, variables);
                const data = response.organization.templates;
                return new TemplateConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Organization_Users Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Organization_UsersQuery
     */
    class Organization_UsersQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Organization_Users query and return a UserConnection
         *
         * @param variables - variables to pass into the Organization_UsersQuery
         * @returns parsed response from Organization_UsersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Organization_UsersDocument, variables);
                const data = response.organization.users;
                return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_Comments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_CommentsQuery
     */
    class Project_CommentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Comments query and return a CommentConnection
         *
         * @param variables - variables without 'id' to pass into the Project_CommentsQuery
         * @returns parsed response from Project_CommentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_CommentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.comments;
                return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_DocumentContent Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     */
    class Project_DocumentContentQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the Project_DocumentContent query and return a DocumentContent
         *
         * @returns parsed response from Project_DocumentContentQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_DocumentContentDocument, {
                    id: this._id,
                });
                const data = response.project.documentContent;
                return data ? new DocumentContent(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable Project_Documents Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_DocumentsQuery
     */
    class Project_DocumentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Documents query and return a DocumentConnection
         *
         * @param variables - variables without 'id' to pass into the Project_DocumentsQuery
         * @returns parsed response from Project_DocumentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_DocumentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.documents;
                return new DocumentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_ExternalLinks Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_ExternalLinksQuery
     */
    class Project_ExternalLinksQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_ExternalLinks query and return a EntityExternalLinkConnection
         *
         * @param variables - variables without 'id' to pass into the Project_ExternalLinksQuery
         * @returns parsed response from Project_ExternalLinksQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_ExternalLinksDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.externalLinks;
                return new EntityExternalLinkConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_History Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_HistoryQuery
     */
    class Project_HistoryQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_History query and return a ProjectHistoryConnection
         *
         * @param variables - variables without 'id' to pass into the Project_HistoryQuery
         * @returns parsed response from Project_HistoryQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_HistoryDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.history;
                return new ProjectHistoryConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_Initiatives Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_InitiativesQuery
     */
    class Project_InitiativesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Initiatives query and return a InitiativeConnection
         *
         * @param variables - variables without 'id' to pass into the Project_InitiativesQuery
         * @returns parsed response from Project_InitiativesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_InitiativesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.initiatives;
                return new InitiativeConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_InverseRelations Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_InverseRelationsQuery
     */
    class Project_InverseRelationsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_InverseRelations query and return a ProjectRelationConnection
         *
         * @param variables - variables without 'id' to pass into the Project_InverseRelationsQuery
         * @returns parsed response from Project_InverseRelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_InverseRelationsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.inverseRelations;
                return new ProjectRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_IssuesQuery
     */
    class Project_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the Project_IssuesQuery
         * @returns parsed response from Project_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.issues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_Labels Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_LabelsQuery
     */
    class Project_LabelsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Labels query and return a ProjectLabelConnection
         *
         * @param variables - variables without 'id' to pass into the Project_LabelsQuery
         * @returns parsed response from Project_LabelsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_LabelsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.labels;
                return new ProjectLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_Members Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_MembersQuery
     */
    class Project_MembersQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Members query and return a UserConnection
         *
         * @param variables - variables without 'id' to pass into the Project_MembersQuery
         * @returns parsed response from Project_MembersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_MembersDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.members;
                return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_Needs Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_NeedsQuery
     */
    class Project_NeedsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Needs query and return a CustomerNeedConnection
         *
         * @param variables - variables without 'id' to pass into the Project_NeedsQuery
         * @returns parsed response from Project_NeedsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_NeedsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.needs;
                return new CustomerNeedConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_ProjectMilestones Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_ProjectMilestonesQuery
     */
    class Project_ProjectMilestonesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_ProjectMilestones query and return a ProjectMilestoneConnection
         *
         * @param variables - variables without 'id' to pass into the Project_ProjectMilestonesQuery
         * @returns parsed response from Project_ProjectMilestonesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_ProjectMilestonesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.projectMilestones;
                return new ProjectMilestoneConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_ProjectUpdates Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_ProjectUpdatesQuery
     */
    class Project_ProjectUpdatesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_ProjectUpdates query and return a ProjectUpdateConnection
         *
         * @param variables - variables without 'id' to pass into the Project_ProjectUpdatesQuery
         * @returns parsed response from Project_ProjectUpdatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_ProjectUpdatesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.projectUpdates;
                return new ProjectUpdateConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_Relations Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_RelationsQuery
     */
    class Project_RelationsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Relations query and return a ProjectRelationConnection
         *
         * @param variables - variables without 'id' to pass into the Project_RelationsQuery
         * @returns parsed response from Project_RelationsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_RelationsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.relations;
                return new ProjectRelationConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Project_Teams Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to project
     * @param variables - variables without 'id' to pass into the Project_TeamsQuery
     */
    class Project_TeamsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Project_Teams query and return a TeamConnection
         *
         * @param variables - variables without 'id' to pass into the Project_TeamsQuery
         * @returns parsed response from Project_TeamsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Project_TeamsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.project.teams;
                return new TeamConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable ProjectLabel_Children Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to projectLabel
     * @param variables - variables without 'id' to pass into the ProjectLabel_ChildrenQuery
     */
    class ProjectLabel_ChildrenQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the ProjectLabel_Children query and return a ProjectLabelConnection
         *
         * @param variables - variables without 'id' to pass into the ProjectLabel_ChildrenQuery
         * @returns parsed response from ProjectLabel_ChildrenQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectLabel_ChildrenDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.projectLabel.children;
                return new ProjectLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable ProjectLabel_Projects Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to projectLabel
     * @param variables - variables without 'id' to pass into the ProjectLabel_ProjectsQuery
     */
    class ProjectLabel_ProjectsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the ProjectLabel_Projects query and return a ProjectConnection
         *
         * @param variables - variables without 'id' to pass into the ProjectLabel_ProjectsQuery
         * @returns parsed response from ProjectLabel_ProjectsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectLabel_ProjectsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.projectLabel.projects;
                return new ProjectConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable ProjectMilestone_DocumentContent Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to projectMilestone
     */
    class ProjectMilestone_DocumentContentQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the ProjectMilestone_DocumentContent query and return a DocumentContent
         *
         * @returns parsed response from ProjectMilestone_DocumentContentQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectMilestone_DocumentContentDocument, {
                    id: this._id,
                });
                const data = response.projectMilestone.documentContent;
                return data ? new DocumentContent(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable ProjectMilestone_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to projectMilestone
     * @param variables - variables without 'id' to pass into the ProjectMilestone_IssuesQuery
     */
    class ProjectMilestone_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the ProjectMilestone_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the ProjectMilestone_IssuesQuery
         * @returns parsed response from ProjectMilestone_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectMilestone_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.projectMilestone.issues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable ProjectUpdate_Comments Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to projectUpdate
     * @param variables - variables without 'id' to pass into the ProjectUpdate_CommentsQuery
     */
    class ProjectUpdate_CommentsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the ProjectUpdate_Comments query and return a CommentConnection
         *
         * @param variables - variables without 'id' to pass into the ProjectUpdate_CommentsQuery
         * @returns parsed response from ProjectUpdate_CommentsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(ProjectUpdate_CommentsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.projectUpdate.comments;
                return new CommentConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Roadmap_Projects Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to roadmap
     * @param variables - variables without 'id' to pass into the Roadmap_ProjectsQuery
     */
    class Roadmap_ProjectsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Roadmap_Projects query and return a ProjectConnection
         *
         * @param variables - variables without 'id' to pass into the Roadmap_ProjectsQuery
         * @returns parsed response from Roadmap_ProjectsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Roadmap_ProjectsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.roadmap.projects;
                return new ProjectConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable SearchDocuments_ArchivePayload Query
     *
     * @param request - function to call the graphql client
     * @param term - required term to pass to searchDocuments
     * @param variables - variables without 'term' to pass into the SearchDocuments_ArchivePayloadQuery
     */
    class SearchDocuments_ArchivePayloadQuery extends Request {
        constructor(request, term, variables) {
            super(request);
            this._term = term;
            this._variables = variables;
        }
        /**
         * Call the SearchDocuments_ArchivePayload query and return a ArchiveResponse
         *
         * @param variables - variables without 'term' to pass into the SearchDocuments_ArchivePayloadQuery
         * @returns parsed response from SearchDocuments_ArchivePayloadQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(SearchDocuments_ArchivePayloadDocument, Object.assign(Object.assign({ term: this._term }, this._variables), variables));
                const data = response.searchDocuments.archivePayload;
                return new ArchiveResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable SearchIssues_ArchivePayload Query
     *
     * @param request - function to call the graphql client
     * @param term - required term to pass to searchIssues
     * @param variables - variables without 'term' to pass into the SearchIssues_ArchivePayloadQuery
     */
    class SearchIssues_ArchivePayloadQuery extends Request {
        constructor(request, term, variables) {
            super(request);
            this._term = term;
            this._variables = variables;
        }
        /**
         * Call the SearchIssues_ArchivePayload query and return a ArchiveResponse
         *
         * @param variables - variables without 'term' to pass into the SearchIssues_ArchivePayloadQuery
         * @returns parsed response from SearchIssues_ArchivePayloadQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(SearchIssues_ArchivePayloadDocument, Object.assign(Object.assign({ term: this._term }, this._variables), variables));
                const data = response.searchIssues.archivePayload;
                return new ArchiveResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable SearchProjects_ArchivePayload Query
     *
     * @param request - function to call the graphql client
     * @param term - required term to pass to searchProjects
     * @param variables - variables without 'term' to pass into the SearchProjects_ArchivePayloadQuery
     */
    class SearchProjects_ArchivePayloadQuery extends Request {
        constructor(request, term, variables) {
            super(request);
            this._term = term;
            this._variables = variables;
        }
        /**
         * Call the SearchProjects_ArchivePayload query and return a ArchiveResponse
         *
         * @param variables - variables without 'term' to pass into the SearchProjects_ArchivePayloadQuery
         * @returns parsed response from SearchProjects_ArchivePayloadQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(SearchProjects_ArchivePayloadDocument, Object.assign(Object.assign({ term: this._term }, this._variables), variables));
                const data = response.searchProjects.archivePayload;
                return new ArchiveResponse(this._request, data);
            });
        }
    }
    /**
     * A fetchable Team_Cycles Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_CyclesQuery
     */
    class Team_CyclesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Cycles query and return a CycleConnection
         *
         * @param variables - variables without 'id' to pass into the Team_CyclesQuery
         * @returns parsed response from Team_CyclesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_CyclesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.cycles;
                return new CycleConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Team_GitAutomationStates Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_GitAutomationStatesQuery
     */
    class Team_GitAutomationStatesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_GitAutomationStates query and return a GitAutomationStateConnection
         *
         * @param variables - variables without 'id' to pass into the Team_GitAutomationStatesQuery
         * @returns parsed response from Team_GitAutomationStatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_GitAutomationStatesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.gitAutomationStates;
                return new GitAutomationStateConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Team_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_IssuesQuery
     */
    class Team_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the Team_IssuesQuery
         * @returns parsed response from Team_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.issues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Team_Labels Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_LabelsQuery
     */
    class Team_LabelsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Labels query and return a IssueLabelConnection
         *
         * @param variables - variables without 'id' to pass into the Team_LabelsQuery
         * @returns parsed response from Team_LabelsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_LabelsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.labels;
                return new IssueLabelConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Team_Members Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_MembersQuery
     */
    class Team_MembersQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Members query and return a UserConnection
         *
         * @param variables - variables without 'id' to pass into the Team_MembersQuery
         * @returns parsed response from Team_MembersQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_MembersDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.members;
                return new UserConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Team_Memberships Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_MembershipsQuery
     */
    class Team_MembershipsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Memberships query and return a TeamMembershipConnection
         *
         * @param variables - variables without 'id' to pass into the Team_MembershipsQuery
         * @returns parsed response from Team_MembershipsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_MembershipsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.memberships;
                return new TeamMembershipConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Team_Projects Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_ProjectsQuery
     */
    class Team_ProjectsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Projects query and return a ProjectConnection
         *
         * @param variables - variables without 'id' to pass into the Team_ProjectsQuery
         * @returns parsed response from Team_ProjectsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_ProjectsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.projects;
                return new ProjectConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Team_States Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_StatesQuery
     */
    class Team_StatesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_States query and return a WorkflowStateConnection
         *
         * @param variables - variables without 'id' to pass into the Team_StatesQuery
         * @returns parsed response from Team_StatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_StatesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.states;
                return new WorkflowStateConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Team_Templates Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_TemplatesQuery
     */
    class Team_TemplatesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Templates query and return a TemplateConnection
         *
         * @param variables - variables without 'id' to pass into the Team_TemplatesQuery
         * @returns parsed response from Team_TemplatesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_TemplatesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.templates;
                return new TemplateConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Team_Webhooks Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to team
     * @param variables - variables without 'id' to pass into the Team_WebhooksQuery
     */
    class Team_WebhooksQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the Team_Webhooks query and return a WebhookConnection
         *
         * @param variables - variables without 'id' to pass into the Team_WebhooksQuery
         * @returns parsed response from Team_WebhooksQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Team_WebhooksDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.team.webhooks;
                return new WebhookConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable TriageResponsibility_ManualSelection Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to triageResponsibility
     */
    class TriageResponsibility_ManualSelectionQuery extends Request {
        constructor(request, id) {
            super(request);
            this._id = id;
        }
        /**
         * Call the TriageResponsibility_ManualSelection query and return a TriageResponsibilityManualSelection
         *
         * @returns parsed response from TriageResponsibility_ManualSelectionQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(TriageResponsibility_ManualSelectionDocument, {
                    id: this._id,
                });
                const data = response.triageResponsibility.manualSelection;
                return data ? new TriageResponsibilityManualSelection(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable User_AssignedIssues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to user
     * @param variables - variables without 'id' to pass into the User_AssignedIssuesQuery
     */
    class User_AssignedIssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the User_AssignedIssues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the User_AssignedIssuesQuery
         * @returns parsed response from User_AssignedIssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(User_AssignedIssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.user.assignedIssues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable User_CreatedIssues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to user
     * @param variables - variables without 'id' to pass into the User_CreatedIssuesQuery
     */
    class User_CreatedIssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the User_CreatedIssues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the User_CreatedIssuesQuery
         * @returns parsed response from User_CreatedIssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(User_CreatedIssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.user.createdIssues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable User_DelegatedIssues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to user
     * @param variables - variables without 'id' to pass into the User_DelegatedIssuesQuery
     */
    class User_DelegatedIssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the User_DelegatedIssues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the User_DelegatedIssuesQuery
         * @returns parsed response from User_DelegatedIssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(User_DelegatedIssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.user.delegatedIssues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable User_Drafts Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to user
     * @param variables - variables without 'id' to pass into the User_DraftsQuery
     */
    class User_DraftsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the User_Drafts query and return a DraftConnection
         *
         * @param variables - variables without 'id' to pass into the User_DraftsQuery
         * @returns parsed response from User_DraftsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(User_DraftsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.user.drafts;
                return new DraftConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable User_TeamMemberships Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to user
     * @param variables - variables without 'id' to pass into the User_TeamMembershipsQuery
     */
    class User_TeamMembershipsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the User_TeamMemberships query and return a TeamMembershipConnection
         *
         * @param variables - variables without 'id' to pass into the User_TeamMembershipsQuery
         * @returns parsed response from User_TeamMembershipsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(User_TeamMembershipsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.user.teamMemberships;
                return new TeamMembershipConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable User_Teams Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to user
     * @param variables - variables without 'id' to pass into the User_TeamsQuery
     */
    class User_TeamsQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the User_Teams query and return a TeamConnection
         *
         * @param variables - variables without 'id' to pass into the User_TeamsQuery
         * @returns parsed response from User_TeamsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(User_TeamsDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.user.teams;
                return new TeamConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationCategoryPreferences Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationCategoryPreferencesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationCategoryPreferences query and return a NotificationCategoryPreferences
         *
         * @returns parsed response from UserSettings_NotificationCategoryPreferencesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationCategoryPreferencesDocument, {});
                const data = response.userSettings.notificationCategoryPreferences;
                return new NotificationCategoryPreferences(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationChannelPreferences Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationChannelPreferencesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationChannelPreferences query and return a NotificationChannelPreferences
         *
         * @returns parsed response from UserSettings_NotificationChannelPreferencesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationChannelPreferencesDocument, {});
                const data = response.userSettings.notificationChannelPreferences;
                return new NotificationChannelPreferences(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferencesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences query and return a NotificationDeliveryPreferences
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferencesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferencesDocument, {});
                const data = response.userSettings.notificationDeliveryPreferences;
                return new NotificationDeliveryPreferences(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationCategoryPreferences_AppsAndIntegrations Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationCategoryPreferences_AppsAndIntegrationsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationCategoryPreferences_AppsAndIntegrations query and return a NotificationChannelPreferences
         *
         * @returns parsed response from UserSettings_NotificationCategoryPreferences_AppsAndIntegrationsQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationCategoryPreferences_AppsAndIntegrationsDocument, {});
                const data = response.userSettings.notificationCategoryPreferences.appsAndIntegrations;
                return new NotificationChannelPreferences(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationCategoryPreferences_Assignments Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationCategoryPreferences_AssignmentsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationCategoryPreferences_Assignments query and return a NotificationChannelPreferences
         *
         * @returns parsed response from UserSettings_NotificationCategoryPreferences_AssignmentsQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationCategoryPreferences_AssignmentsDocument, {});
                const data = response.userSettings.notificationCategoryPreferences.assignments;
                return new NotificationChannelPreferences(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationCategoryPreferences_CommentsAndReplies Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationCategoryPreferences_CommentsAndRepliesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationCategoryPreferences_CommentsAndReplies query and return a NotificationChannelPreferences
         *
         * @returns parsed response from UserSettings_NotificationCategoryPreferences_CommentsAndRepliesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationCategoryPreferences_CommentsAndRepliesDocument, {});
                const data = response.userSettings.notificationCategoryPreferences.commentsAndReplies;
                return new NotificationChannelPreferences(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationCategoryPreferences_Customers Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationCategoryPreferences_CustomersQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationCategoryPreferences_Customers query and return a NotificationChannelPreferences
         *
         * @returns parsed response from UserSettings_NotificationCategoryPreferences_CustomersQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationCategoryPreferences_CustomersDocument, {});
                const data = response.userSettings.notificationCategoryPreferences.customers;
                return new NotificationChannelPreferences(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationCategoryPreferences_DocumentChanges Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationCategoryPreferences_DocumentChangesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationCategoryPreferences_DocumentChanges query and return a NotificationChannelPreferences
         *
         * @returns parsed response from UserSettings_NotificationCategoryPreferences_DocumentChangesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationCategoryPreferences_DocumentChangesDocument, {});
                const data = response.userSettings.notificationCategoryPreferences.documentChanges;
                return new NotificationChannelPreferences(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationCategoryPreferences_Feed Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationCategoryPreferences_FeedQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationCategoryPreferences_Feed query and return a NotificationChannelPreferences
         *
         * @returns parsed response from UserSettings_NotificationCategoryPreferences_FeedQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationCategoryPreferences_FeedDocument, {});
                const data = response.userSettings.notificationCategoryPreferences.feed;
                return new NotificationChannelPreferences(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationCategoryPreferences_Mentions Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationCategoryPreferences_MentionsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationCategoryPreferences_Mentions query and return a NotificationChannelPreferences
         *
         * @returns parsed response from UserSettings_NotificationCategoryPreferences_MentionsQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationCategoryPreferences_MentionsDocument, {});
                const data = response.userSettings.notificationCategoryPreferences.mentions;
                return new NotificationChannelPreferences(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationCategoryPreferences_PostsAndUpdates Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationCategoryPreferences_PostsAndUpdatesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationCategoryPreferences_PostsAndUpdates query and return a NotificationChannelPreferences
         *
         * @returns parsed response from UserSettings_NotificationCategoryPreferences_PostsAndUpdatesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationCategoryPreferences_PostsAndUpdatesDocument, {});
                const data = response.userSettings.notificationCategoryPreferences.postsAndUpdates;
                return new NotificationChannelPreferences(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationCategoryPreferences_Reactions Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationCategoryPreferences_ReactionsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationCategoryPreferences_Reactions query and return a NotificationChannelPreferences
         *
         * @returns parsed response from UserSettings_NotificationCategoryPreferences_ReactionsQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationCategoryPreferences_ReactionsDocument, {});
                const data = response.userSettings.notificationCategoryPreferences.reactions;
                return new NotificationChannelPreferences(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationCategoryPreferences_Reminders Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationCategoryPreferences_RemindersQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationCategoryPreferences_Reminders query and return a NotificationChannelPreferences
         *
         * @returns parsed response from UserSettings_NotificationCategoryPreferences_RemindersQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationCategoryPreferences_RemindersDocument, {});
                const data = response.userSettings.notificationCategoryPreferences.reminders;
                return new NotificationChannelPreferences(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationCategoryPreferences_Reviews Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationCategoryPreferences_ReviewsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationCategoryPreferences_Reviews query and return a NotificationChannelPreferences
         *
         * @returns parsed response from UserSettings_NotificationCategoryPreferences_ReviewsQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationCategoryPreferences_ReviewsDocument, {});
                const data = response.userSettings.notificationCategoryPreferences.reviews;
                return new NotificationChannelPreferences(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationCategoryPreferences_StatusChanges Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationCategoryPreferences_StatusChangesQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationCategoryPreferences_StatusChanges query and return a NotificationChannelPreferences
         *
         * @returns parsed response from UserSettings_NotificationCategoryPreferences_StatusChangesQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationCategoryPreferences_StatusChangesDocument, {});
                const data = response.userSettings.notificationCategoryPreferences.statusChanges;
                return new NotificationChannelPreferences(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationCategoryPreferences_Subscriptions Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationCategoryPreferences_SubscriptionsQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationCategoryPreferences_Subscriptions query and return a NotificationChannelPreferences
         *
         * @returns parsed response from UserSettings_NotificationCategoryPreferences_SubscriptionsQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationCategoryPreferences_SubscriptionsDocument, {});
                const data = response.userSettings.notificationCategoryPreferences.subscriptions;
                return new NotificationChannelPreferences(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationCategoryPreferences_System Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationCategoryPreferences_SystemQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationCategoryPreferences_System query and return a NotificationChannelPreferences
         *
         * @returns parsed response from UserSettings_NotificationCategoryPreferences_SystemQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationCategoryPreferences_SystemDocument, {});
                const data = response.userSettings.notificationCategoryPreferences.system;
                return new NotificationChannelPreferences(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationCategoryPreferences_Triage Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationCategoryPreferences_TriageQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationCategoryPreferences_Triage query and return a NotificationChannelPreferences
         *
         * @returns parsed response from UserSettings_NotificationCategoryPreferences_TriageQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationCategoryPreferences_TriageDocument, {});
                const data = response.userSettings.notificationCategoryPreferences.triage;
                return new NotificationChannelPreferences(this._request, data);
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences_Mobile Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferences_MobileQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences_Mobile query and return a NotificationDeliveryPreferencesChannel
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferences_MobileQuery
         */
        fetch() {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferences_MobileDocument, {});
                const data = response.userSettings.notificationDeliveryPreferences.mobile;
                return data ? new NotificationDeliveryPreferencesChannel(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences_Mobile_Schedule Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences_Mobile_Schedule query and return a NotificationDeliveryPreferencesSchedule
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleQuery
         */
        fetch() {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleDocument, {});
                const data = (_a = response.userSettings.notificationDeliveryPreferences.mobile) === null || _a === void 0 ? void 0 : _a.schedule;
                return data ? new NotificationDeliveryPreferencesSchedule(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Friday Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Friday query and return a NotificationDeliveryPreferencesDay
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayQuery
         */
        fetch() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayDocument, {});
                const data = (_b = (_a = response.userSettings.notificationDeliveryPreferences.mobile) === null || _a === void 0 ? void 0 : _a.schedule) === null || _b === void 0 ? void 0 : _b.friday;
                return data ? new NotificationDeliveryPreferencesDay(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Monday Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Monday query and return a NotificationDeliveryPreferencesDay
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayQuery
         */
        fetch() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayDocument, {});
                const data = (_b = (_a = response.userSettings.notificationDeliveryPreferences.mobile) === null || _a === void 0 ? void 0 : _a.schedule) === null || _b === void 0 ? void 0 : _b.monday;
                return data ? new NotificationDeliveryPreferencesDay(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Saturday Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Saturday query and return a NotificationDeliveryPreferencesDay
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayQuery
         */
        fetch() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayDocument, {});
                const data = (_b = (_a = response.userSettings.notificationDeliveryPreferences.mobile) === null || _a === void 0 ? void 0 : _a.schedule) === null || _b === void 0 ? void 0 : _b.saturday;
                return data ? new NotificationDeliveryPreferencesDay(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Sunday Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Sunday query and return a NotificationDeliveryPreferencesDay
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayQuery
         */
        fetch() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayDocument, {});
                const data = (_b = (_a = response.userSettings.notificationDeliveryPreferences.mobile) === null || _a === void 0 ? void 0 : _a.schedule) === null || _b === void 0 ? void 0 : _b.sunday;
                return data ? new NotificationDeliveryPreferencesDay(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Thursday Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Thursday query and return a NotificationDeliveryPreferencesDay
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayQuery
         */
        fetch() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayDocument, {});
                const data = (_b = (_a = response.userSettings.notificationDeliveryPreferences.mobile) === null || _a === void 0 ? void 0 : _a.schedule) === null || _b === void 0 ? void 0 : _b.thursday;
                return data ? new NotificationDeliveryPreferencesDay(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Tuesday Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Tuesday query and return a NotificationDeliveryPreferencesDay
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayQuery
         */
        fetch() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayDocument, {});
                const data = (_b = (_a = response.userSettings.notificationDeliveryPreferences.mobile) === null || _a === void 0 ? void 0 : _a.schedule) === null || _b === void 0 ? void 0 : _b.tuesday;
                return data ? new NotificationDeliveryPreferencesDay(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Wednesday Query
     *
     * @param request - function to call the graphql client
     */
    class UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayQuery extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * Call the UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_Wednesday query and return a NotificationDeliveryPreferencesDay
         *
         * @returns parsed response from UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayQuery
         */
        fetch() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayDocument, {});
                const data = (_b = (_a = response.userSettings.notificationDeliveryPreferences.mobile) === null || _a === void 0 ? void 0 : _a.schedule) === null || _b === void 0 ? void 0 : _b.wednesday;
                return data ? new NotificationDeliveryPreferencesDay(this._request, data) : undefined;
            });
        }
    }
    /**
     * A fetchable Viewer_AssignedIssues Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Viewer_AssignedIssuesQuery
     */
    class Viewer_AssignedIssuesQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Viewer_AssignedIssues query and return a IssueConnection
         *
         * @param variables - variables to pass into the Viewer_AssignedIssuesQuery
         * @returns parsed response from Viewer_AssignedIssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Viewer_AssignedIssuesDocument, variables);
                const data = response.viewer.assignedIssues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Viewer_CreatedIssues Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Viewer_CreatedIssuesQuery
     */
    class Viewer_CreatedIssuesQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Viewer_CreatedIssues query and return a IssueConnection
         *
         * @param variables - variables to pass into the Viewer_CreatedIssuesQuery
         * @returns parsed response from Viewer_CreatedIssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Viewer_CreatedIssuesDocument, variables);
                const data = response.viewer.createdIssues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Viewer_DelegatedIssues Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Viewer_DelegatedIssuesQuery
     */
    class Viewer_DelegatedIssuesQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Viewer_DelegatedIssues query and return a IssueConnection
         *
         * @param variables - variables to pass into the Viewer_DelegatedIssuesQuery
         * @returns parsed response from Viewer_DelegatedIssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Viewer_DelegatedIssuesDocument, variables);
                const data = response.viewer.delegatedIssues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Viewer_Drafts Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Viewer_DraftsQuery
     */
    class Viewer_DraftsQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Viewer_Drafts query and return a DraftConnection
         *
         * @param variables - variables to pass into the Viewer_DraftsQuery
         * @returns parsed response from Viewer_DraftsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Viewer_DraftsDocument, variables);
                const data = response.viewer.drafts;
                return new DraftConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Viewer_TeamMemberships Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Viewer_TeamMembershipsQuery
     */
    class Viewer_TeamMembershipsQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Viewer_TeamMemberships query and return a TeamMembershipConnection
         *
         * @param variables - variables to pass into the Viewer_TeamMembershipsQuery
         * @returns parsed response from Viewer_TeamMembershipsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Viewer_TeamMembershipsDocument, variables);
                const data = response.viewer.teamMemberships;
                return new TeamMembershipConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable Viewer_Teams Query
     *
     * @param request - function to call the graphql client
     * @param variables - variables to pass into the Viewer_TeamsQuery
     */
    class Viewer_TeamsQuery extends Request {
        constructor(request, variables) {
            super(request);
            this._variables = variables;
        }
        /**
         * Call the Viewer_Teams query and return a TeamConnection
         *
         * @param variables - variables to pass into the Viewer_TeamsQuery
         * @returns parsed response from Viewer_TeamsQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(Viewer_TeamsDocument, variables);
                const data = response.viewer.teams;
                return new TeamConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * A fetchable WorkflowState_Issues Query
     *
     * @param request - function to call the graphql client
     * @param id - required id to pass to workflowState
     * @param variables - variables without 'id' to pass into the WorkflowState_IssuesQuery
     */
    class WorkflowState_IssuesQuery extends Request {
        constructor(request, id, variables) {
            super(request);
            this._id = id;
            this._variables = variables;
        }
        /**
         * Call the WorkflowState_Issues query and return a IssueConnection
         *
         * @param variables - variables without 'id' to pass into the WorkflowState_IssuesQuery
         * @returns parsed response from WorkflowState_IssuesQuery
         */
        fetch(variables) {
            return __awaiter(this, void 0, void 0, function* () {
                const response = yield this._request(WorkflowState_IssuesDocument, Object.assign(Object.assign({ id: this._id }, this._variables), variables));
                const data = response.workflowState.issues;
                return new IssueConnection(this._request, connection => this.fetch(defaultConnection(Object.assign(Object.assign(Object.assign({}, this._variables), variables), connection))), data);
            });
        }
    }
    /**
     * The SDK class containing all root operations
     *
     * @param request - function to call the graphql client
     */
    class LinearSdk extends Request {
        constructor(request) {
            super(request);
        }
        /**
         * All teams you the user can administrate. Administrable teams are teams whose settings the user can change, but to whose issues the user doesn't necessarily have access to.
         *
         * @param variables - variables to pass into the AdministrableTeamsQuery
         * @returns TeamConnection
         */
        administrableTeams(variables) {
            return new AdministrableTeamsQuery(this._request).fetch(variables);
        }
        /**
         * All agent activities.
         *
         * @param variables - variables to pass into the AgentActivitiesQuery
         * @returns AgentActivityConnection
         */
        agentActivities(variables) {
            return new AgentActivitiesQuery(this._request).fetch(variables);
        }
        /**
         * A specific agent activity.
         *
         * @param id - required id to pass to agentActivity
         * @returns AgentActivity
         */
        agentActivity(id) {
            return new AgentActivityQuery(this._request).fetch(id);
        }
        /**
         * A specific agent session.
         *
         * @param id - required id to pass to agentSession
         * @returns AgentSession
         */
        agentSession(id) {
            return new AgentSessionQuery(this._request).fetch(id);
        }
        /**
         * All agent sessions.
         *
         * @param variables - variables to pass into the AgentSessionsQuery
         * @returns AgentSessionConnection
         */
        agentSessions(variables) {
            return new AgentSessionsQuery(this._request).fetch(variables);
        }
        /**
         * All API keys for the user.
         *
         * @param variables - variables to pass into the ApiKeysQuery
         * @returns ApiKeyConnection
         */
        apiKeys(variables) {
            return new ApiKeysQuery(this._request).fetch(variables);
        }
        /**
         * Get basic information for an application.
         *
         * @param clientId - required clientId to pass to applicationInfo
         * @returns Application
         */
        applicationInfo(clientId) {
            return new ApplicationInfoQuery(this._request).fetch(clientId);
        }
        /**
         * Get information for an application and whether a user has approved it for the given scopes.
         *
         * @param clientId - required clientId to pass to applicationWithAuthorization
         * @param scope - required scope to pass to applicationWithAuthorization
         * @param variables - variables without 'clientId', 'scope' to pass into the ApplicationWithAuthorizationQuery
         * @returns UserAuthorizedApplication
         */
        applicationWithAuthorization(clientId, scope, variables) {
            return new ApplicationWithAuthorizationQuery(this._request).fetch(clientId, scope, variables);
        }
        /**
         * One specific issue attachment.
         * [Deprecated] 'url' can no longer be used as the 'id' parameter. Use 'attachmentsForUrl' instead
         *
         * @param id - required id to pass to attachment
         * @returns Attachment
         */
        attachment(id) {
            return new AttachmentQuery(this._request).fetch(id);
        }
        /**
         * Query an issue by its associated attachment, and its id.
         *
         * @param id - required id to pass to attachmentIssue
         * @returns Issue
         */
        attachmentIssue(id) {
            return new AttachmentIssueQuery(this._request).fetch(id);
        }
        /**
         * All issue attachments.
         *
         * To get attachments for a given URL, use `attachmentsForURL` query.
         *
         * @param variables - variables to pass into the AttachmentsQuery
         * @returns AttachmentConnection
         */
        attachments(variables) {
            return new AttachmentsQuery(this._request).fetch(variables);
        }
        /**
         * Returns issue attachments for a given `url`.
         *
         * @param url - required url to pass to attachmentsForURL
         * @param variables - variables without 'url' to pass into the AttachmentsForUrlQuery
         * @returns AttachmentConnection
         */
        attachmentsForURL(url, variables) {
            return new AttachmentsForUrlQuery(this._request).fetch(url, variables);
        }
        /**
         * All audit log entries.
         *
         * @param variables - variables to pass into the AuditEntriesQuery
         * @returns AuditEntryConnection
         */
        auditEntries(variables) {
            return new AuditEntriesQuery(this._request).fetch(variables);
        }
        /**
         * List of audit entry types.
         *
         * @returns AuditEntryType[]
         */
        get auditEntryTypes() {
            return new AuditEntryTypesQuery(this._request).fetch();
        }
        /**
         * User's active sessions.
         *
         * @returns AuthenticationSessionResponse[]
         */
        get authenticationSessions() {
            return new AuthenticationSessionsQuery(this._request).fetch();
        }
        /**
         * Fetch users belonging to this user account.
         *
         * @returns AuthResolverResponse
         */
        get availableUsers() {
            return new AvailableUsersQuery(this._request).fetch();
        }
        /**
         * A specific comment.
         *
         * @param variables - variables to pass into the CommentQuery
         * @returns Comment
         */
        comment(variables) {
            return new CommentQuery(this._request).fetch(variables);
        }
        /**
         * All comments.
         *
         * @param variables - variables to pass into the CommentsQuery
         * @returns CommentConnection
         */
        comments(variables) {
            return new CommentsQuery(this._request).fetch(variables);
        }
        /**
         * One specific custom view.
         *
         * @param id - required id to pass to customView
         * @returns CustomView
         */
        customView(id) {
            return new CustomViewQuery(this._request).fetch(id);
        }
        /**
         * Whether a custom view has other subscribers than the current user in the organization.
         *
         * @param id - required id to pass to customViewHasSubscribers
         * @returns CustomViewHasSubscribersPayload
         */
        customViewHasSubscribers(id) {
            return new CustomViewHasSubscribersQuery(this._request).fetch(id);
        }
        /**
         * Custom views for the user.
         *
         * @param variables - variables to pass into the CustomViewsQuery
         * @returns CustomViewConnection
         */
        customViews(variables) {
            return new CustomViewsQuery(this._request).fetch(variables);
        }
        /**
         * One specific customer.
         *
         * @param id - required id to pass to customer
         * @returns Customer
         */
        customer(id) {
            return new CustomerQuery(this._request).fetch(id);
        }
        /**
         * One specific customer need
         *
         * @param variables - variables to pass into the CustomerNeedQuery
         * @returns CustomerNeed
         */
        customerNeed(variables) {
            return new CustomerNeedQuery(this._request).fetch(variables);
        }
        /**
         * All customer needs.
         *
         * @param variables - variables to pass into the CustomerNeedsQuery
         * @returns CustomerNeedConnection
         */
        customerNeeds(variables) {
            return new CustomerNeedsQuery(this._request).fetch(variables);
        }
        /**
         * One specific customer status.
         *
         * @param id - required id to pass to customerStatus
         * @returns CustomerStatus
         */
        customerStatus(id) {
            return new CustomerStatusQuery(this._request).fetch(id);
        }
        /**
         * All customer statuses.
         *
         * @param variables - variables to pass into the CustomerStatusesQuery
         * @returns CustomerStatusConnection
         */
        customerStatuses(variables) {
            return new CustomerStatusesQuery(this._request).fetch(variables);
        }
        /**
         * One specific customer tier.
         *
         * @param id - required id to pass to customerTier
         * @returns CustomerTier
         */
        customerTier(id) {
            return new CustomerTierQuery(this._request).fetch(id);
        }
        /**
         * All customer tiers.
         *
         * @param variables - variables to pass into the CustomerTiersQuery
         * @returns CustomerTierConnection
         */
        customerTiers(variables) {
            return new CustomerTiersQuery(this._request).fetch(variables);
        }
        /**
         * All customers.
         *
         * @param variables - variables to pass into the CustomersQuery
         * @returns CustomerConnection
         */
        customers(variables) {
            return new CustomersQuery(this._request).fetch(variables);
        }
        /**
         * One specific cycle.
         *
         * @param id - required id to pass to cycle
         * @returns Cycle
         */
        cycle(id) {
            return new CycleQuery(this._request).fetch(id);
        }
        /**
         * All cycles.
         *
         * @param variables - variables to pass into the CyclesQuery
         * @returns CycleConnection
         */
        cycles(variables) {
            return new CyclesQuery(this._request).fetch(variables);
        }
        /**
         * One specific document.
         *
         * @param id - required id to pass to document
         * @returns Document
         */
        document(id) {
            return new DocumentQuery(this._request).fetch(id);
        }
        /**
         * A collection of document content history entries.
         *
         * @param id - required id to pass to documentContentHistory
         * @returns DocumentContentHistoryPayload
         */
        documentContentHistory(id) {
            return new DocumentContentHistoryQuery(this._request).fetch(id);
        }
        /**
         * All documents in the workspace.
         *
         * @param variables - variables to pass into the DocumentsQuery
         * @returns DocumentConnection
         */
        documents(variables) {
            return new DocumentsQuery(this._request).fetch(variables);
        }
        /**
         * One specific email intake address.
         *
         * @param id - required id to pass to emailIntakeAddress
         * @returns EmailIntakeAddress
         */
        emailIntakeAddress(id) {
            return new EmailIntakeAddressQuery(this._request).fetch(id);
        }
        /**
         * A specific emoji.
         *
         * @param id - required id to pass to emoji
         * @returns Emoji
         */
        emoji(id) {
            return new EmojiQuery(this._request).fetch(id);
        }
        /**
         * All custom emojis.
         *
         * @param variables - variables to pass into the EmojisQuery
         * @returns EmojiConnection
         */
        emojis(variables) {
            return new EmojisQuery(this._request).fetch(variables);
        }
        /**
         * One specific entity link.
         *
         * @param id - required id to pass to entityExternalLink
         * @returns EntityExternalLink
         */
        entityExternalLink(id) {
            return new EntityExternalLinkQuery(this._request).fetch(id);
        }
        /**
         * One specific external user.
         *
         * @param id - required id to pass to externalUser
         * @returns ExternalUser
         */
        externalUser(id) {
            return new ExternalUserQuery(this._request).fetch(id);
        }
        /**
         * All external users for the organization.
         *
         * @param variables - variables to pass into the ExternalUsersQuery
         * @returns ExternalUserConnection
         */
        externalUsers(variables) {
            return new ExternalUsersQuery(this._request).fetch(variables);
        }
        /**
         * One specific favorite.
         *
         * @param id - required id to pass to favorite
         * @returns Favorite
         */
        favorite(id) {
            return new FavoriteQuery(this._request).fetch(id);
        }
        /**
         * The user's favorites.
         *
         * @param variables - variables to pass into the FavoritesQuery
         * @returns FavoriteConnection
         */
        favorites(variables) {
            return new FavoritesQuery(this._request).fetch(variables);
        }
        /**
         * One specific initiative.
         *
         * @param id - required id to pass to initiative
         * @returns Initiative
         */
        initiative(id) {
            return new InitiativeQuery(this._request).fetch(id);
        }
        /**
         * One specific initiative relation.
         *
         * @param id - required id to pass to initiativeRelation
         * @returns ProjectRelation
         */
        initiativeRelation(id) {
            return new InitiativeRelationQuery(this._request).fetch(id);
        }
        /**
         * All initiative relationships.
         *
         * @param variables - variables to pass into the InitiativeRelationsQuery
         * @returns InitiativeRelationConnection
         */
        initiativeRelations(variables) {
            return new InitiativeRelationsQuery(this._request).fetch(variables);
        }
        /**
         * One specific initiativeToProject.
         *
         * @param id - required id to pass to initiativeToProject
         * @returns InitiativeToProject
         */
        initiativeToProject(id) {
            return new InitiativeToProjectQuery(this._request).fetch(id);
        }
        /**
         * returns a list of initiative to project entities.
         *
         * @param variables - variables to pass into the InitiativeToProjectsQuery
         * @returns InitiativeToProjectConnection
         */
        initiativeToProjects(variables) {
            return new InitiativeToProjectsQuery(this._request).fetch(variables);
        }
        /**
         * A specific  initiative update.
         *
         * @param id - required id to pass to initiativeUpdate
         * @returns InitiativeUpdate
         */
        initiativeUpdate(id) {
            return new InitiativeUpdateQuery(this._request).fetch(id);
        }
        /**
         * All  InitiativeUpdates.
         *
         * @param variables - variables to pass into the InitiativeUpdatesQuery
         * @returns InitiativeUpdateConnection
         */
        initiativeUpdates(variables) {
            return new InitiativeUpdatesQuery(this._request).fetch(variables);
        }
        /**
         * All initiatives in the workspace.
         *
         * @param variables - variables to pass into the InitiativesQuery
         * @returns InitiativeConnection
         */
        initiatives(variables) {
            return new InitiativesQuery(this._request).fetch(variables);
        }
        /**
         * One specific integration.
         *
         * @param id - required id to pass to integration
         * @returns Integration
         */
        integration(id) {
            return new IntegrationQuery(this._request).fetch(id);
        }
        /**
         * Checks if the integration has all required scopes.
         *
         * @param integrationId - required integrationId to pass to integrationHasScopes
         * @param scopes - required scopes to pass to integrationHasScopes
         * @returns IntegrationHasScopesPayload
         */
        integrationHasScopes(integrationId, scopes) {
            return new IntegrationHasScopesQuery(this._request).fetch(integrationId, scopes);
        }
        /**
         * One specific integrationTemplate.
         *
         * @param id - required id to pass to integrationTemplate
         * @returns IntegrationTemplate
         */
        integrationTemplate(id) {
            return new IntegrationTemplateQuery(this._request).fetch(id);
        }
        /**
         * Template and integration connections.
         *
         * @param variables - variables to pass into the IntegrationTemplatesQuery
         * @returns IntegrationTemplateConnection
         */
        integrationTemplates(variables) {
            return new IntegrationTemplatesQuery(this._request).fetch(variables);
        }
        /**
         * All integrations.
         *
         * @param variables - variables to pass into the IntegrationsQuery
         * @returns IntegrationConnection
         */
        integrations(variables) {
            return new IntegrationsQuery(this._request).fetch(variables);
        }
        /**
         * One specific set of settings.
         *
         * @param id - required id to pass to integrationsSettings
         * @returns IntegrationsSettings
         */
        integrationsSettings(id) {
            return new IntegrationsSettingsQuery(this._request).fetch(id);
        }
        /**
         * One specific issue.
         *
         * @param id - required id to pass to issue
         * @returns Issue
         */
        issue(id) {
            return new IssueQuery(this._request).fetch(id);
        }
        /**
         * Find issues that are related to a given Figma file key.
         *
         * @param fileKey - required fileKey to pass to issueFigmaFileKeySearch
         * @param variables - variables without 'fileKey' to pass into the IssueFigmaFileKeySearchQuery
         * @returns IssueConnection
         */
        issueFigmaFileKeySearch(fileKey, variables) {
            return new IssueFigmaFileKeySearchQuery(this._request).fetch(fileKey, variables);
        }
        /**
         * Suggests filters for an issue view based on a text prompt.
         *
         * @param prompt - required prompt to pass to issueFilterSuggestion
         * @param variables - variables without 'prompt' to pass into the IssueFilterSuggestionQuery
         * @returns IssueFilterSuggestionPayload
         */
        issueFilterSuggestion(prompt, variables) {
            return new IssueFilterSuggestionQuery(this._request).fetch(prompt, variables);
        }
        /**
         * Checks a CSV file validity against a specific import service.
         *
         * @param csvUrl - required csvUrl to pass to issueImportCheckCSV
         * @param service - required service to pass to issueImportCheckCSV
         * @returns IssueImportCheckPayload
         */
        issueImportCheckCSV(csvUrl, service) {
            return new IssueImportCheckCsvQuery(this._request).fetch(csvUrl, service);
        }
        /**
         * Checks whether it will be possible to setup sync for this project or repository at the end of import
         *
         * @param issueImportId - required issueImportId to pass to issueImportCheckSync
         * @returns IssueImportSyncCheckPayload
         */
        issueImportCheckSync(issueImportId) {
            return new IssueImportCheckSyncQuery(this._request).fetch(issueImportId);
        }
        /**
         * Checks whether a custom JQL query is valid and can be used to filter issues of a Jira import
         *
         * @param jiraEmail - required jiraEmail to pass to issueImportJqlCheck
         * @param jiraHostname - required jiraHostname to pass to issueImportJqlCheck
         * @param jiraProject - required jiraProject to pass to issueImportJqlCheck
         * @param jiraToken - required jiraToken to pass to issueImportJqlCheck
         * @param jql - required jql to pass to issueImportJqlCheck
         * @returns IssueImportJqlCheckPayload
         */
        issueImportJqlCheck(jiraEmail, jiraHostname, jiraProject, jiraToken, jql) {
            return new IssueImportJqlCheckQuery(this._request).fetch(jiraEmail, jiraHostname, jiraProject, jiraToken, jql);
        }
        /**
         * One specific label.
         *
         * @param id - required id to pass to issueLabel
         * @returns IssueLabel
         */
        issueLabel(id) {
            return new IssueLabelQuery(this._request).fetch(id);
        }
        /**
         * All issue labels.
         *
         * @param variables - variables to pass into the IssueLabelsQuery
         * @returns IssueLabelConnection
         */
        issueLabels(variables) {
            return new IssueLabelsQuery(this._request).fetch(variables);
        }
        /**
         * Issue priority values and corresponding labels.
         *
         * @returns IssuePriorityValue[]
         */
        get issuePriorityValues() {
            return new IssuePriorityValuesQuery(this._request).fetch();
        }
        /**
         * One specific issue relation.
         *
         * @param id - required id to pass to issueRelation
         * @returns IssueRelation
         */
        issueRelation(id) {
            return new IssueRelationQuery(this._request).fetch(id);
        }
        /**
         * All issue relationships.
         *
         * @param variables - variables to pass into the IssueRelationsQuery
         * @returns IssueRelationConnection
         */
        issueRelations(variables) {
            return new IssueRelationsQuery(this._request).fetch(variables);
        }
        /**
         * [DEPRECATED] Search issues. This endpoint is deprecated and will be removed in the future – use `searchIssues` instead.
         *
         * @param variables - variables to pass into the IssueSearchQuery
         * @returns IssueConnection
         */
        issueSearch(variables) {
            return new IssueSearchQuery(this._request).fetch(variables);
        }
        /**
         * Suggests issue title based on a customer request.
         *
         * @param request - required request to pass to issueTitleSuggestionFromCustomerRequest
         * @returns IssueTitleSuggestionFromCustomerRequestPayload
         */
        issueTitleSuggestionFromCustomerRequest(request) {
            return new IssueTitleSuggestionFromCustomerRequestQuery(this._request).fetch(request);
        }
        /**
         * Find issue based on the VCS branch name.
         *
         * @param branchName - required branchName to pass to issueVcsBranchSearch
         * @returns Issue
         */
        issueVcsBranchSearch(branchName) {
            return new IssueVcsBranchSearchQuery(this._request).fetch(branchName);
        }
        /**
         * All issues.
         *
         * @param variables - variables to pass into the IssuesQuery
         * @returns IssueConnection
         */
        issues(variables) {
            return new IssuesQuery(this._request).fetch(variables);
        }
        /**
         * One specific notification.
         *
         * @param id - required id to pass to notification
         * @returns Notification
         */
        notification(id) {
            return new NotificationQuery(this._request).fetch(id);
        }
        /**
         * One specific notification subscription.
         *
         * @param id - required id to pass to notificationSubscription
         * @returns NotificationSubscription
         */
        notificationSubscription(id) {
            return new NotificationSubscriptionQuery(this._request).fetch(id);
        }
        /**
         * The user's notification subscriptions.
         *
         * @param variables - variables to pass into the NotificationSubscriptionsQuery
         * @returns NotificationSubscriptionConnection
         */
        notificationSubscriptions(variables) {
            return new NotificationSubscriptionsQuery(this._request).fetch(variables);
        }
        /**
         * All notifications.
         *
         * @param variables - variables to pass into the NotificationsQuery
         * @returns NotificationConnection
         */
        notifications(variables) {
            return new NotificationsQuery(this._request).fetch(variables);
        }
        /**
         * The user's organization.
         *
         * @returns Organization
         */
        get organization() {
            return new OrganizationQuery(this._request).fetch();
        }
        /**
         * Does the organization exist.
         *
         * @param urlKey - required urlKey to pass to organizationExists
         * @returns OrganizationExistsPayload
         */
        organizationExists(urlKey) {
            return new OrganizationExistsQuery(this._request).fetch(urlKey);
        }
        /**
         * One specific organization invite.
         *
         * @param id - required id to pass to organizationInvite
         * @returns OrganizationInvite
         */
        organizationInvite(id) {
            return new OrganizationInviteQuery(this._request).fetch(id);
        }
        /**
         * All invites for the organization.
         *
         * @param variables - variables to pass into the OrganizationInvitesQuery
         * @returns OrganizationInviteConnection
         */
        organizationInvites(variables) {
            return new OrganizationInvitesQuery(this._request).fetch(variables);
        }
        /**
         * One specific project.
         *
         * @param id - required id to pass to project
         * @returns Project
         */
        project(id) {
            return new ProjectQuery(this._request).fetch(id);
        }
        /**
         * Suggests filters for a project view based on a text prompt.
         *
         * @param prompt - required prompt to pass to projectFilterSuggestion
         * @returns ProjectFilterSuggestionPayload
         */
        projectFilterSuggestion(prompt) {
            return new ProjectFilterSuggestionQuery(this._request).fetch(prompt);
        }
        /**
         * One specific label.
         *
         * @param id - required id to pass to projectLabel
         * @returns ProjectLabel
         */
        projectLabel(id) {
            return new ProjectLabelQuery(this._request).fetch(id);
        }
        /**
         * All project labels.
         *
         * @param variables - variables to pass into the ProjectLabelsQuery
         * @returns ProjectLabelConnection
         */
        projectLabels(variables) {
            return new ProjectLabelsQuery(this._request).fetch(variables);
        }
        /**
         * One specific project milestone.
         *
         * @param id - required id to pass to projectMilestone
         * @returns ProjectMilestone
         */
        projectMilestone(id) {
            return new ProjectMilestoneQuery(this._request).fetch(id);
        }
        /**
         * All milestones for the project.
         *
         * @param variables - variables to pass into the ProjectMilestonesQuery
         * @returns ProjectMilestoneConnection
         */
        projectMilestones(variables) {
            return new ProjectMilestonesQuery(this._request).fetch(variables);
        }
        /**
         * One specific project relation.
         *
         * @param id - required id to pass to projectRelation
         * @returns ProjectRelation
         */
        projectRelation(id) {
            return new ProjectRelationQuery(this._request).fetch(id);
        }
        /**
         * All project relationships.
         *
         * @param variables - variables to pass into the ProjectRelationsQuery
         * @returns ProjectRelationConnection
         */
        projectRelations(variables) {
            return new ProjectRelationsQuery(this._request).fetch(variables);
        }
        /**
         * One specific project status.
         *
         * @param id - required id to pass to projectStatus
         * @returns ProjectStatus
         */
        projectStatus(id) {
            return new ProjectStatusQuery(this._request).fetch(id);
        }
        /**
         * All project statuses.
         *
         * @param variables - variables to pass into the ProjectStatusesQuery
         * @returns ProjectStatusConnection
         */
        projectStatuses(variables) {
            return new ProjectStatusesQuery(this._request).fetch(variables);
        }
        /**
         * A specific project update.
         *
         * @param id - required id to pass to projectUpdate
         * @returns ProjectUpdate
         */
        projectUpdate(id) {
            return new ProjectUpdateQuery(this._request).fetch(id);
        }
        /**
         * All project updates.
         *
         * @param variables - variables to pass into the ProjectUpdatesQuery
         * @returns ProjectUpdateConnection
         */
        projectUpdates(variables) {
            return new ProjectUpdatesQuery(this._request).fetch(variables);
        }
        /**
         * All projects.
         *
         * @param variables - variables to pass into the ProjectsQuery
         * @returns ProjectConnection
         */
        projects(variables) {
            return new ProjectsQuery(this._request).fetch(variables);
        }
        /**
         * Sends a test push message.
         *
         * @param variables - variables to pass into the PushSubscriptionTestQuery
         * @returns PushSubscriptionTestPayload
         */
        pushSubscriptionTest(variables) {
            return new PushSubscriptionTestQuery(this._request).fetch(variables);
        }
        /**
         * The status of the rate limiter.
         *
         * @returns RateLimitPayload
         */
        get rateLimitStatus() {
            return new RateLimitStatusQuery(this._request).fetch();
        }
        /**
         * One specific roadmap.
         *
         * @param id - required id to pass to roadmap
         * @returns Roadmap
         */
        roadmap(id) {
            return new RoadmapQuery(this._request).fetch(id);
        }
        /**
         * One specific roadmapToProject.
         *
         * @param id - required id to pass to roadmapToProject
         * @returns RoadmapToProject
         */
        roadmapToProject(id) {
            return new RoadmapToProjectQuery(this._request).fetch(id);
        }
        /**
         * Query roadmapToProjects for RoadmapToProjectConnection
         *
         * @param variables - variables to pass into the RoadmapToProjectsQuery
         * @returns RoadmapToProjectConnection
         */
        roadmapToProjects(variables) {
            return new RoadmapToProjectsQuery(this._request).fetch(variables);
        }
        /**
         * All roadmaps in the workspace.
         *
         * @param variables - variables to pass into the RoadmapsQuery
         * @returns RoadmapConnection
         */
        roadmaps(variables) {
            return new RoadmapsQuery(this._request).fetch(variables);
        }
        /**
         * Search documents.
         *
         * @param term - required term to pass to searchDocuments
         * @param variables - variables without 'term' to pass into the SearchDocumentsQuery
         * @returns DocumentSearchPayload
         */
        searchDocuments(term, variables) {
            return new SearchDocumentsQuery(this._request).fetch(term, variables);
        }
        /**
         * Search issues.
         *
         * @param term - required term to pass to searchIssues
         * @param variables - variables without 'term' to pass into the SearchIssuesQuery
         * @returns IssueSearchPayload
         */
        searchIssues(term, variables) {
            return new SearchIssuesQuery(this._request).fetch(term, variables);
        }
        /**
         * Search projects.
         *
         * @param term - required term to pass to searchProjects
         * @param variables - variables without 'term' to pass into the SearchProjectsQuery
         * @returns ProjectSearchPayload
         */
        searchProjects(term, variables) {
            return new SearchProjectsQuery(this._request).fetch(term, variables);
        }
        /**
         * Search for various resources using natural language.
         *
         * @param query - required query to pass to semanticSearch
         * @param variables - variables without 'query' to pass into the SemanticSearchQuery
         * @returns SemanticSearchPayload
         */
        semanticSearch(query, variables) {
            return new SemanticSearchQuery(this._request).fetch(query, variables);
        }
        /**
         * Fetch SSO login URL for the email provided.
         *
         * @param email - required email to pass to ssoUrlFromEmail
         * @param variables - variables without 'email' to pass into the SsoUrlFromEmailQuery
         * @returns SsoUrlFromEmailResponse
         */
        ssoUrlFromEmail(email, variables) {
            return new SsoUrlFromEmailQuery(this._request).fetch(email, variables);
        }
        /**
         * One specific team.
         *
         * @param id - required id to pass to team
         * @returns Team
         */
        team(id) {
            return new TeamQuery(this._request).fetch(id);
        }
        /**
         * One specific team membership.
         *
         * @param id - required id to pass to teamMembership
         * @returns TeamMembership
         */
        teamMembership(id) {
            return new TeamMembershipQuery(this._request).fetch(id);
        }
        /**
         * All team memberships.
         *
         * @param variables - variables to pass into the TeamMembershipsQuery
         * @returns TeamMembershipConnection
         */
        teamMemberships(variables) {
            return new TeamMembershipsQuery(this._request).fetch(variables);
        }
        /**
         * All teams whose issues can be accessed by the user. This might be different from `administrableTeams`, which also includes teams whose settings can be changed by the user.
         *
         * @param variables - variables to pass into the TeamsQuery
         * @returns TeamConnection
         */
        teams(variables) {
            return new TeamsQuery(this._request).fetch(variables);
        }
        /**
         * A specific template.
         *
         * @param id - required id to pass to template
         * @returns Template
         */
        template(id) {
            return new TemplateQuery(this._request).fetch(id);
        }
        /**
         * All templates from all users.
         *
         * @returns Template[]
         */
        get templates() {
            return new TemplatesQuery(this._request).fetch();
        }
        /**
         * Returns all templates that are associated with the integration type.
         *
         * @param integrationType - required integrationType to pass to templatesForIntegration
         * @returns Template[]
         */
        templatesForIntegration(integrationType) {
            return new TemplatesForIntegrationQuery(this._request).fetch(integrationType);
        }
        /**
         * A specific time schedule.
         *
         * @param id - required id to pass to timeSchedule
         * @returns TimeSchedule
         */
        timeSchedule(id) {
            return new TimeScheduleQuery(this._request).fetch(id);
        }
        /**
         * All time schedules.
         *
         * @param variables - variables to pass into the TimeSchedulesQuery
         * @returns TimeScheduleConnection
         */
        timeSchedules(variables) {
            return new TimeSchedulesQuery(this._request).fetch(variables);
        }
        /**
         * All triage responsibilities.
         *
         * @param variables - variables to pass into the TriageResponsibilitiesQuery
         * @returns TriageResponsibilityConnection
         */
        triageResponsibilities(variables) {
            return new TriageResponsibilitiesQuery(this._request).fetch(variables);
        }
        /**
         * A specific triage responsibility.
         *
         * @param id - required id to pass to triageResponsibility
         * @returns TriageResponsibility
         */
        triageResponsibility(id) {
            return new TriageResponsibilityQuery(this._request).fetch(id);
        }
        /**
         * One specific user.
         *
         * @param id - required id to pass to user
         * @returns User
         */
        user(id) {
            return new UserQuery(this._request).fetch(id);
        }
        /**
         * The user's settings.
         *
         * @returns UserSettings
         */
        get userSettings() {
            return new UserSettingsQuery(this._request).fetch();
        }
        /**
         * All users for the organization.
         *
         * @param variables - variables to pass into the UsersQuery
         * @returns UserConnection
         */
        users(variables) {
            return new UsersQuery(this._request).fetch(variables);
        }
        /**
         * Verify that we received the correct response from the GitHub Enterprise Server.
         *
         * @param integrationId - required integrationId to pass to verifyGitHubEnterpriseServerInstallation
         * @returns GitHubEnterpriseServerInstallVerificationPayload
         */
        verifyGitHubEnterpriseServerInstallation(integrationId) {
            return new VerifyGitHubEnterpriseServerInstallationQuery(this._request).fetch(integrationId);
        }
        /**
         * The currently authenticated user.
         *
         * @returns User
         */
        get viewer() {
            return new ViewerQuery(this._request).fetch();
        }
        /**
         * A specific webhook.
         *
         * @param id - required id to pass to webhook
         * @returns Webhook
         */
        webhook(id) {
            return new WebhookQuery(this._request).fetch(id);
        }
        /**
         * All webhooks.
         *
         * @param variables - variables to pass into the WebhooksQuery
         * @returns WebhookConnection
         */
        webhooks(variables) {
            return new WebhooksQuery(this._request).fetch(variables);
        }
        /**
         * One specific state.
         *
         * @param id - required id to pass to workflowState
         * @returns WorkflowState
         */
        workflowState(id) {
            return new WorkflowStateQuery(this._request).fetch(id);
        }
        /**
         * All issue workflow states.
         *
         * @param variables - variables to pass into the WorkflowStatesQuery
         * @returns WorkflowStateConnection
         */
        workflowStates(variables) {
            return new WorkflowStatesQuery(this._request).fetch(variables);
        }
        /**
         * Creates an agent activity.
         *
         * @param input - required input to pass to createAgentActivity
         * @returns AgentActivityPayload
         */
        createAgentActivity(input) {
            return new CreateAgentActivityMutation(this._request).fetch(input);
        }
        /**
         * Creates a new agent session on a rootcomment.
         *
         * @param input - required input to pass to agentSessionCreateOnComment
         * @returns AgentSessionPayload
         */
        agentSessionCreateOnComment(input) {
            return new AgentSessionCreateOnCommentMutation(this._request).fetch(input);
        }
        /**
         * Creates a new agent session on an issue.
         *
         * @param input - required input to pass to agentSessionCreateOnIssue
         * @returns AgentSessionPayload
         */
        agentSessionCreateOnIssue(input) {
            return new AgentSessionCreateOnIssueMutation(this._request).fetch(input);
        }
        /**
         * Updates the externalUrl of an agent session, which is an agent-hosted page associated with this session.
         *
         * @param id - required id to pass to agentSessionUpdateExternalUrl
         * @param input - required input to pass to agentSessionUpdateExternalUrl
         * @returns AgentSessionPayload
         */
        agentSessionUpdateExternalUrl(id, input) {
            return new AgentSessionUpdateExternalUrlMutation(this._request).fetch(id, input);
        }
        /**
         * Creates an integration api key for Airbyte to connect with Linear.
         *
         * @param input - required input to pass to airbyteIntegrationConnect
         * @returns IntegrationPayload
         */
        airbyteIntegrationConnect(input) {
            return new AirbyteIntegrationConnectMutation(this._request).fetch(input);
        }
        /**
         * Creates a new attachment, or updates existing if the same `url` and `issueId` is used.
         *
         * @param input - required input to pass to createAttachment
         * @returns AttachmentPayload
         */
        createAttachment(input) {
            return new CreateAttachmentMutation(this._request).fetch(input);
        }
        /**
         * Deletes an issue attachment.
         *
         * @param id - required id to pass to deleteAttachment
         * @returns DeletePayload
         */
        deleteAttachment(id) {
            return new DeleteAttachmentMutation(this._request).fetch(id);
        }
        /**
         * Link an existing Discord message to an issue.
         *
         * @param channelId - required channelId to pass to attachmentLinkDiscord
         * @param issueId - required issueId to pass to attachmentLinkDiscord
         * @param messageId - required messageId to pass to attachmentLinkDiscord
         * @param url - required url to pass to attachmentLinkDiscord
         * @param variables - variables without 'channelId', 'issueId', 'messageId', 'url' to pass into the AttachmentLinkDiscordMutation
         * @returns AttachmentPayload
         */
        attachmentLinkDiscord(channelId, issueId, messageId, url, variables) {
            return new AttachmentLinkDiscordMutation(this._request).fetch(channelId, issueId, messageId, url, variables);
        }
        /**
         * Link an existing Front conversation to an issue.
         *
         * @param conversationId - required conversationId to pass to attachmentLinkFront
         * @param issueId - required issueId to pass to attachmentLinkFront
         * @param variables - variables without 'conversationId', 'issueId' to pass into the AttachmentLinkFrontMutation
         * @returns FrontAttachmentPayload
         */
        attachmentLinkFront(conversationId, issueId, variables) {
            return new AttachmentLinkFrontMutation(this._request).fetch(conversationId, issueId, variables);
        }
        /**
         * Link a GitHub issue to a Linear issue.
         *
         * @param issueId - required issueId to pass to attachmentLinkGitHubIssue
         * @param url - required url to pass to attachmentLinkGitHubIssue
         * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkGitHubIssueMutation
         * @returns AttachmentPayload
         */
        attachmentLinkGitHubIssue(issueId, url, variables) {
            return new AttachmentLinkGitHubIssueMutation(this._request).fetch(issueId, url, variables);
        }
        /**
         * Link a GitHub pull request to an issue.
         *
         * @param issueId - required issueId to pass to attachmentLinkGitHubPR
         * @param url - required url to pass to attachmentLinkGitHubPR
         * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkGitHubPrMutation
         * @returns AttachmentPayload
         */
        attachmentLinkGitHubPR(issueId, url, variables) {
            return new AttachmentLinkGitHubPrMutation(this._request).fetch(issueId, url, variables);
        }
        /**
         * Link an existing GitLab MR to an issue.
         *
         * @param issueId - required issueId to pass to attachmentLinkGitLabMR
         * @param number - required number to pass to attachmentLinkGitLabMR
         * @param projectPathWithNamespace - required projectPathWithNamespace to pass to attachmentLinkGitLabMR
         * @param url - required url to pass to attachmentLinkGitLabMR
         * @param variables - variables without 'issueId', 'number', 'projectPathWithNamespace', 'url' to pass into the AttachmentLinkGitLabMrMutation
         * @returns AttachmentPayload
         */
        attachmentLinkGitLabMR(issueId, number, projectPathWithNamespace, url, variables) {
            return new AttachmentLinkGitLabMrMutation(this._request).fetch(issueId, number, projectPathWithNamespace, url, variables);
        }
        /**
         * Link an existing Intercom conversation to an issue.
         *
         * @param conversationId - required conversationId to pass to attachmentLinkIntercom
         * @param issueId - required issueId to pass to attachmentLinkIntercom
         * @param variables - variables without 'conversationId', 'issueId' to pass into the AttachmentLinkIntercomMutation
         * @returns AttachmentPayload
         */
        attachmentLinkIntercom(conversationId, issueId, variables) {
            return new AttachmentLinkIntercomMutation(this._request).fetch(conversationId, issueId, variables);
        }
        /**
         * Link an existing Jira issue to an issue.
         *
         * @param issueId - required issueId to pass to attachmentLinkJiraIssue
         * @param jiraIssueId - required jiraIssueId to pass to attachmentLinkJiraIssue
         * @param variables - variables without 'issueId', 'jiraIssueId' to pass into the AttachmentLinkJiraIssueMutation
         * @returns AttachmentPayload
         */
        attachmentLinkJiraIssue(issueId, jiraIssueId, variables) {
            return new AttachmentLinkJiraIssueMutation(this._request).fetch(issueId, jiraIssueId, variables);
        }
        /**
         * Link an existing Salesforce case to an issue.
         *
         * @param issueId - required issueId to pass to attachmentLinkSalesforce
         * @param url - required url to pass to attachmentLinkSalesforce
         * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkSalesforceMutation
         * @returns AttachmentPayload
         */
        attachmentLinkSalesforce(issueId, url, variables) {
            return new AttachmentLinkSalesforceMutation(this._request).fetch(issueId, url, variables);
        }
        /**
         * Link an existing Slack message to an issue.
         *
         * @param issueId - required issueId to pass to attachmentLinkSlack
         * @param url - required url to pass to attachmentLinkSlack
         * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkSlackMutation
         * @returns AttachmentPayload
         */
        attachmentLinkSlack(issueId, url, variables) {
            return new AttachmentLinkSlackMutation(this._request).fetch(issueId, url, variables);
        }
        /**
         * Link any url to an issue.
         *
         * @param issueId - required issueId to pass to attachmentLinkURL
         * @param url - required url to pass to attachmentLinkURL
         * @param variables - variables without 'issueId', 'url' to pass into the AttachmentLinkUrlMutation
         * @returns AttachmentPayload
         */
        attachmentLinkURL(issueId, url, variables) {
            return new AttachmentLinkUrlMutation(this._request).fetch(issueId, url, variables);
        }
        /**
         * Link an existing Zendesk ticket to an issue.
         *
         * @param issueId - required issueId to pass to attachmentLinkZendesk
         * @param ticketId - required ticketId to pass to attachmentLinkZendesk
         * @param variables - variables without 'issueId', 'ticketId' to pass into the AttachmentLinkZendeskMutation
         * @returns AttachmentPayload
         */
        attachmentLinkZendesk(issueId, ticketId, variables) {
            return new AttachmentLinkZendeskMutation(this._request).fetch(issueId, ticketId, variables);
        }
        /**
         * Begin syncing the thread for an existing Slack message attachment with a comment thread on its issue.
         *
         * @param id - required id to pass to attachmentSyncToSlack
         * @returns AttachmentPayload
         */
        attachmentSyncToSlack(id) {
            return new AttachmentSyncToSlackMutation(this._request).fetch(id);
        }
        /**
         * Updates an existing issue attachment.
         *
         * @param id - required id to pass to updateAttachment
         * @param input - required input to pass to updateAttachment
         * @returns AttachmentPayload
         */
        updateAttachment(id, input) {
            return new UpdateAttachmentMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new comment.
         *
         * @param input - required input to pass to createComment
         * @returns CommentPayload
         */
        createComment(input) {
            return new CreateCommentMutation(this._request).fetch(input);
        }
        /**
         * Deletes a comment.
         *
         * @param id - required id to pass to deleteComment
         * @returns DeletePayload
         */
        deleteComment(id) {
            return new DeleteCommentMutation(this._request).fetch(id);
        }
        /**
         * Resolves a comment.
         *
         * @param id - required id to pass to commentResolve
         * @param variables - variables without 'id' to pass into the CommentResolveMutation
         * @returns CommentPayload
         */
        commentResolve(id, variables) {
            return new CommentResolveMutation(this._request).fetch(id, variables);
        }
        /**
         * Unresolves a comment.
         *
         * @param id - required id to pass to commentUnresolve
         * @returns CommentPayload
         */
        commentUnresolve(id) {
            return new CommentUnresolveMutation(this._request).fetch(id);
        }
        /**
         * Updates a comment.
         *
         * @param id - required id to pass to updateComment
         * @param input - required input to pass to updateComment
         * @returns CommentPayload
         */
        updateComment(id, input) {
            return new UpdateCommentMutation(this._request).fetch(id, input);
        }
        /**
         * Saves user message.
         *
         * @param input - required input to pass to createContact
         * @returns ContactPayload
         */
        createContact(input) {
            return new CreateContactMutation(this._request).fetch(input);
        }
        /**
         * Create CSV export report for the organization.
         *
         * @param variables - variables to pass into the CreateCsvExportReportMutation
         * @returns CreateCsvExportReportPayload
         */
        createCsvExportReport(variables) {
            return new CreateCsvExportReportMutation(this._request).fetch(variables);
        }
        /**
         * Create a notification to remind a user about an initiative update.
         *
         * @param initiativeId - required initiativeId to pass to createInitiativeUpdateReminder
         * @param variables - variables without 'initiativeId' to pass into the CreateInitiativeUpdateReminderMutation
         * @returns InitiativeUpdateReminderPayload
         */
        createInitiativeUpdateReminder(initiativeId, variables) {
            return new CreateInitiativeUpdateReminderMutation(this._request).fetch(initiativeId, variables);
        }
        /**
         * Creates an organization from onboarding.
         *
         * @param input - required input to pass to createOrganizationFromOnboarding
         * @param variables - variables without 'input' to pass into the CreateOrganizationFromOnboardingMutation
         * @returns CreateOrJoinOrganizationResponse
         */
        createOrganizationFromOnboarding(input, variables) {
            return new CreateOrganizationFromOnboardingMutation(this._request).fetch(input, variables);
        }
        /**
         * Create a notification to remind a user about a project update.
         *
         * @param projectId - required projectId to pass to createProjectUpdateReminder
         * @param variables - variables without 'projectId' to pass into the CreateProjectUpdateReminderMutation
         * @returns ProjectUpdateReminderPayload
         */
        createProjectUpdateReminder(projectId, variables) {
            return new CreateProjectUpdateReminderMutation(this._request).fetch(projectId, variables);
        }
        /**
         * Creates a new custom view.
         *
         * @param input - required input to pass to createCustomView
         * @returns CustomViewPayload
         */
        createCustomView(input) {
            return new CreateCustomViewMutation(this._request).fetch(input);
        }
        /**
         * Deletes a custom view.
         *
         * @param id - required id to pass to deleteCustomView
         * @returns DeletePayload
         */
        deleteCustomView(id) {
            return new DeleteCustomViewMutation(this._request).fetch(id);
        }
        /**
         * Updates a custom view.
         *
         * @param id - required id to pass to updateCustomView
         * @param input - required input to pass to updateCustomView
         * @returns CustomViewPayload
         */
        updateCustomView(id, input) {
            return new UpdateCustomViewMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new customer.
         *
         * @param input - required input to pass to createCustomer
         * @returns CustomerPayload
         */
        createCustomer(input) {
            return new CreateCustomerMutation(this._request).fetch(input);
        }
        /**
         * Deletes a customer.
         *
         * @param id - required id to pass to deleteCustomer
         * @returns DeletePayload
         */
        deleteCustomer(id) {
            return new DeleteCustomerMutation(this._request).fetch(id);
        }
        /**
         * Merges two customers.
         *
         * @param sourceCustomerId - required sourceCustomerId to pass to customerMerge
         * @param targetCustomerId - required targetCustomerId to pass to customerMerge
         * @returns CustomerPayload
         */
        customerMerge(sourceCustomerId, targetCustomerId) {
            return new CustomerMergeMutation(this._request).fetch(sourceCustomerId, targetCustomerId);
        }
        /**
         * Archives a customer need.
         *
         * @param id - required id to pass to archiveCustomerNeed
         * @returns CustomerNeedArchivePayload
         */
        archiveCustomerNeed(id) {
            return new ArchiveCustomerNeedMutation(this._request).fetch(id);
        }
        /**
         * Creates a new customer need.
         *
         * @param input - required input to pass to createCustomerNeed
         * @returns CustomerNeedPayload
         */
        createCustomerNeed(input) {
            return new CreateCustomerNeedMutation(this._request).fetch(input);
        }
        /**
         * Creates a new customer need out of an attachment
         *
         * @param input - required input to pass to customerNeedCreateFromAttachment
         * @returns CustomerNeedPayload
         */
        customerNeedCreateFromAttachment(input) {
            return new CustomerNeedCreateFromAttachmentMutation(this._request).fetch(input);
        }
        /**
         * Deletes a customer need.
         *
         * @param id - required id to pass to deleteCustomerNeed
         * @param variables - variables without 'id' to pass into the DeleteCustomerNeedMutation
         * @returns DeletePayload
         */
        deleteCustomerNeed(id, variables) {
            return new DeleteCustomerNeedMutation(this._request).fetch(id, variables);
        }
        /**
         * Unarchives a customer need.
         *
         * @param id - required id to pass to unarchiveCustomerNeed
         * @returns CustomerNeedArchivePayload
         */
        unarchiveCustomerNeed(id) {
            return new UnarchiveCustomerNeedMutation(this._request).fetch(id);
        }
        /**
         * Updates a customer need
         *
         * @param id - required id to pass to updateCustomerNeed
         * @param input - required input to pass to updateCustomerNeed
         * @returns CustomerNeedUpdatePayload
         */
        updateCustomerNeed(id, input) {
            return new UpdateCustomerNeedMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new customer status.
         *
         * @param input - required input to pass to createCustomerStatus
         * @returns CustomerStatusPayload
         */
        createCustomerStatus(input) {
            return new CreateCustomerStatusMutation(this._request).fetch(input);
        }
        /**
         * Deletes a customer status.
         *
         * @param id - required id to pass to deleteCustomerStatus
         * @returns DeletePayload
         */
        deleteCustomerStatus(id) {
            return new DeleteCustomerStatusMutation(this._request).fetch(id);
        }
        /**
         * Updates a customer status.
         *
         * @param id - required id to pass to updateCustomerStatus
         * @param input - required input to pass to updateCustomerStatus
         * @returns CustomerStatusPayload
         */
        updateCustomerStatus(id, input) {
            return new UpdateCustomerStatusMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new customer tier.
         *
         * @param input - required input to pass to createCustomerTier
         * @returns CustomerTierPayload
         */
        createCustomerTier(input) {
            return new CreateCustomerTierMutation(this._request).fetch(input);
        }
        /**
         * Deletes a customer tier.
         *
         * @param id - required id to pass to deleteCustomerTier
         * @returns DeletePayload
         */
        deleteCustomerTier(id) {
            return new DeleteCustomerTierMutation(this._request).fetch(id);
        }
        /**
         * Updates a customer tier.
         *
         * @param id - required id to pass to updateCustomerTier
         * @param input - required input to pass to updateCustomerTier
         * @returns CustomerTierPayload
         */
        updateCustomerTier(id, input) {
            return new UpdateCustomerTierMutation(this._request).fetch(id, input);
        }
        /**
         * Updates a customer
         *
         * @param id - required id to pass to updateCustomer
         * @param input - required input to pass to updateCustomer
         * @returns CustomerPayload
         */
        updateCustomer(id, input) {
            return new UpdateCustomerMutation(this._request).fetch(id, input);
        }
        /**
         * Upserts a customer, creating it if it doesn't exists, updating it otherwise. Matches against an existing customer with `id` or `externalId`
         *
         * @param input - required input to pass to customerUpsert
         * @returns CustomerPayload
         */
        customerUpsert(input) {
            return new CustomerUpsertMutation(this._request).fetch(input);
        }
        /**
         * Archives a cycle.
         *
         * @param id - required id to pass to archiveCycle
         * @returns CycleArchivePayload
         */
        archiveCycle(id) {
            return new ArchiveCycleMutation(this._request).fetch(id);
        }
        /**
         * Creates a new cycle.
         *
         * @param input - required input to pass to createCycle
         * @returns CyclePayload
         */
        createCycle(input) {
            return new CreateCycleMutation(this._request).fetch(input);
        }
        /**
         * Shifts all cycles starts and ends by a certain number of days, starting from the provided cycle onwards.
         *
         * @param input - required input to pass to cycleShiftAll
         * @returns CyclePayload
         */
        cycleShiftAll(input) {
            return new CycleShiftAllMutation(this._request).fetch(input);
        }
        /**
         * Shifts all cycles starts and ends by a certain number of days, starting from the provided cycle onwards.
         *
         * @param id - required id to pass to cycleStartUpcomingCycleToday
         * @returns CyclePayload
         */
        cycleStartUpcomingCycleToday(id) {
            return new CycleStartUpcomingCycleTodayMutation(this._request).fetch(id);
        }
        /**
         * Updates a cycle.
         *
         * @param id - required id to pass to updateCycle
         * @param input - required input to pass to updateCycle
         * @returns CyclePayload
         */
        updateCycle(id, input) {
            return new UpdateCycleMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new document.
         *
         * @param input - required input to pass to createDocument
         * @returns DocumentPayload
         */
        createDocument(input) {
            return new CreateDocumentMutation(this._request).fetch(input);
        }
        /**
         * Deletes (trashes) a document.
         *
         * @param id - required id to pass to deleteDocument
         * @returns DocumentArchivePayload
         */
        deleteDocument(id) {
            return new DeleteDocumentMutation(this._request).fetch(id);
        }
        /**
         * Restores a document.
         *
         * @param id - required id to pass to unarchiveDocument
         * @returns DocumentArchivePayload
         */
        unarchiveDocument(id) {
            return new UnarchiveDocumentMutation(this._request).fetch(id);
        }
        /**
         * Updates a document.
         *
         * @param id - required id to pass to updateDocument
         * @param input - required input to pass to updateDocument
         * @returns DocumentPayload
         */
        updateDocument(id, input) {
            return new UpdateDocumentMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new email intake address.
         *
         * @param input - required input to pass to createEmailIntakeAddress
         * @returns EmailIntakeAddressPayload
         */
        createEmailIntakeAddress(input) {
            return new CreateEmailIntakeAddressMutation(this._request).fetch(input);
        }
        /**
         * Deletes an email intake address object.
         *
         * @param id - required id to pass to deleteEmailIntakeAddress
         * @returns DeletePayload
         */
        deleteEmailIntakeAddress(id) {
            return new DeleteEmailIntakeAddressMutation(this._request).fetch(id);
        }
        /**
         * Rotates an existing email intake address.
         *
         * @param id - required id to pass to emailIntakeAddressRotate
         * @returns EmailIntakeAddressPayload
         */
        emailIntakeAddressRotate(id) {
            return new EmailIntakeAddressRotateMutation(this._request).fetch(id);
        }
        /**
         * Updates an existing email intake address.
         *
         * @param id - required id to pass to updateEmailIntakeAddress
         * @param input - required input to pass to updateEmailIntakeAddress
         * @returns EmailIntakeAddressPayload
         */
        updateEmailIntakeAddress(id, input) {
            return new UpdateEmailIntakeAddressMutation(this._request).fetch(id, input);
        }
        /**
         * Authenticates a user account via email and authentication token.
         *
         * @param input - required input to pass to emailTokenUserAccountAuth
         * @returns AuthResolverResponse
         */
        emailTokenUserAccountAuth(input) {
            return new EmailTokenUserAccountAuthMutation(this._request).fetch(input);
        }
        /**
         * Unsubscribes the user from one type of email.
         *
         * @param input - required input to pass to emailUnsubscribe
         * @returns EmailUnsubscribePayload
         */
        emailUnsubscribe(input) {
            return new EmailUnsubscribeMutation(this._request).fetch(input);
        }
        /**
         * Finds or creates a new user account by email and sends an email with token.
         *
         * @param input - required input to pass to emailUserAccountAuthChallenge
         * @returns EmailUserAccountAuthChallengeResponse
         */
        emailUserAccountAuthChallenge(input) {
            return new EmailUserAccountAuthChallengeMutation(this._request).fetch(input);
        }
        /**
         * Creates a custom emoji.
         *
         * @param input - required input to pass to createEmoji
         * @returns EmojiPayload
         */
        createEmoji(input) {
            return new CreateEmojiMutation(this._request).fetch(input);
        }
        /**
         * Deletes an emoji.
         *
         * @param id - required id to pass to deleteEmoji
         * @returns DeletePayload
         */
        deleteEmoji(id) {
            return new DeleteEmojiMutation(this._request).fetch(id);
        }
        /**
         * Creates a new entity link.
         *
         * @param input - required input to pass to createEntityExternalLink
         * @returns EntityExternalLinkPayload
         */
        createEntityExternalLink(input) {
            return new CreateEntityExternalLinkMutation(this._request).fetch(input);
        }
        /**
         * Deletes an entity link.
         *
         * @param id - required id to pass to deleteEntityExternalLink
         * @returns DeletePayload
         */
        deleteEntityExternalLink(id) {
            return new DeleteEntityExternalLinkMutation(this._request).fetch(id);
        }
        /**
         * Updates an entity link.
         *
         * @param id - required id to pass to updateEntityExternalLink
         * @param input - required input to pass to updateEntityExternalLink
         * @returns EntityExternalLinkPayload
         */
        updateEntityExternalLink(id, input) {
            return new UpdateEntityExternalLinkMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new favorite (project, cycle etc).
         *
         * @param input - required input to pass to createFavorite
         * @returns FavoritePayload
         */
        createFavorite(input) {
            return new CreateFavoriteMutation(this._request).fetch(input);
        }
        /**
         * Deletes a favorite reference.
         *
         * @param id - required id to pass to deleteFavorite
         * @returns DeletePayload
         */
        deleteFavorite(id) {
            return new DeleteFavoriteMutation(this._request).fetch(id);
        }
        /**
         * Updates a favorite.
         *
         * @param id - required id to pass to updateFavorite
         * @param input - required input to pass to updateFavorite
         * @returns FavoritePayload
         */
        updateFavorite(id, input) {
            return new UpdateFavoriteMutation(this._request).fetch(id, input);
        }
        /**
         * XHR request payload to upload an images, video and other attachments directly to Linear's cloud storage.
         *
         * @param contentType - required contentType to pass to fileUpload
         * @param filename - required filename to pass to fileUpload
         * @param size - required size to pass to fileUpload
         * @param variables - variables without 'contentType', 'filename', 'size' to pass into the FileUploadMutation
         * @returns UploadPayload
         */
        fileUpload(contentType, filename, size, variables) {
            return new FileUploadMutation(this._request).fetch(contentType, filename, size, variables);
        }
        /**
         * Creates a new automation state.
         *
         * @param input - required input to pass to createGitAutomationState
         * @returns GitAutomationStatePayload
         */
        createGitAutomationState(input) {
            return new CreateGitAutomationStateMutation(this._request).fetch(input);
        }
        /**
         * Archives an automation state.
         *
         * @param id - required id to pass to deleteGitAutomationState
         * @returns DeletePayload
         */
        deleteGitAutomationState(id) {
            return new DeleteGitAutomationStateMutation(this._request).fetch(id);
        }
        /**
         * Updates an existing state.
         *
         * @param id - required id to pass to updateGitAutomationState
         * @param input - required input to pass to updateGitAutomationState
         * @returns GitAutomationStatePayload
         */
        updateGitAutomationState(id, input) {
            return new UpdateGitAutomationStateMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a Git target branch automation.
         *
         * @param input - required input to pass to createGitAutomationTargetBranch
         * @returns GitAutomationTargetBranchPayload
         */
        createGitAutomationTargetBranch(input) {
            return new CreateGitAutomationTargetBranchMutation(this._request).fetch(input);
        }
        /**
         * Archives a Git target branch automation.
         *
         * @param id - required id to pass to deleteGitAutomationTargetBranch
         * @returns DeletePayload
         */
        deleteGitAutomationTargetBranch(id) {
            return new DeleteGitAutomationTargetBranchMutation(this._request).fetch(id);
        }
        /**
         * Updates an existing Git target branch automation.
         *
         * @param id - required id to pass to updateGitAutomationTargetBranch
         * @param input - required input to pass to updateGitAutomationTargetBranch
         * @returns GitAutomationTargetBranchPayload
         */
        updateGitAutomationTargetBranch(id, input) {
            return new UpdateGitAutomationTargetBranchMutation(this._request).fetch(id, input);
        }
        /**
         * Authenticate user account through Google OAuth. This is the 2nd step of OAuth flow.
         *
         * @param input - required input to pass to googleUserAccountAuth
         * @returns AuthResolverResponse
         */
        googleUserAccountAuth(input) {
            return new GoogleUserAccountAuthMutation(this._request).fetch(input);
        }
        /**
         * Upload an image from an URL to Linear.
         *
         * @param url - required url to pass to imageUploadFromUrl
         * @returns ImageUploadFromUrlPayload
         */
        imageUploadFromUrl(url) {
            return new ImageUploadFromUrlMutation(this._request).fetch(url);
        }
        /**
         * XHR request payload to upload a file for import, directly to Linear's cloud storage.
         *
         * @param contentType - required contentType to pass to importFileUpload
         * @param filename - required filename to pass to importFileUpload
         * @param size - required size to pass to importFileUpload
         * @param variables - variables without 'contentType', 'filename', 'size' to pass into the ImportFileUploadMutation
         * @returns UploadPayload
         */
        importFileUpload(contentType, filename, size, variables) {
            return new ImportFileUploadMutation(this._request).fetch(contentType, filename, size, variables);
        }
        /**
         * Archives a initiative.
         *
         * @param id - required id to pass to archiveInitiative
         * @returns InitiativeArchivePayload
         */
        archiveInitiative(id) {
            return new ArchiveInitiativeMutation(this._request).fetch(id);
        }
        /**
         * Creates a new initiative.
         *
         * @param input - required input to pass to createInitiative
         * @returns InitiativePayload
         */
        createInitiative(input) {
            return new CreateInitiativeMutation(this._request).fetch(input);
        }
        /**
         * Deletes (trashes) an initiative.
         *
         * @param id - required id to pass to deleteInitiative
         * @returns DeletePayload
         */
        deleteInitiative(id) {
            return new DeleteInitiativeMutation(this._request).fetch(id);
        }
        /**
         * Creates a new initiative relation.
         *
         * @param input - required input to pass to createInitiativeRelation
         * @returns InitiativeRelationPayload
         */
        createInitiativeRelation(input) {
            return new CreateInitiativeRelationMutation(this._request).fetch(input);
        }
        /**
         * Deletes an initiative relation.
         *
         * @param id - required id to pass to deleteInitiativeRelation
         * @returns DeletePayload
         */
        deleteInitiativeRelation(id) {
            return new DeleteInitiativeRelationMutation(this._request).fetch(id);
        }
        /**
         * Updates an initiative relation.
         *
         * @param id - required id to pass to updateInitiativeRelation
         * @param input - required input to pass to updateInitiativeRelation
         * @returns DeletePayload
         */
        updateInitiativeRelation(id, input) {
            return new UpdateInitiativeRelationMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new initiativeToProject join.
         *
         * @param input - required input to pass to createInitiativeToProject
         * @returns InitiativeToProjectPayload
         */
        createInitiativeToProject(input) {
            return new CreateInitiativeToProjectMutation(this._request).fetch(input);
        }
        /**
         * Deletes a initiativeToProject.
         *
         * @param id - required id to pass to deleteInitiativeToProject
         * @returns DeletePayload
         */
        deleteInitiativeToProject(id) {
            return new DeleteInitiativeToProjectMutation(this._request).fetch(id);
        }
        /**
         * Updates a initiativeToProject.
         *
         * @param id - required id to pass to updateInitiativeToProject
         * @param input - required input to pass to updateInitiativeToProject
         * @returns InitiativeToProjectPayload
         */
        updateInitiativeToProject(id, input) {
            return new UpdateInitiativeToProjectMutation(this._request).fetch(id, input);
        }
        /**
         * Unarchives a initiative.
         *
         * @param id - required id to pass to unarchiveInitiative
         * @returns InitiativeArchivePayload
         */
        unarchiveInitiative(id) {
            return new UnarchiveInitiativeMutation(this._request).fetch(id);
        }
        /**
         * Updates a initiative.
         *
         * @param id - required id to pass to updateInitiative
         * @param input - required input to pass to updateInitiative
         * @returns InitiativePayload
         */
        updateInitiative(id, input) {
            return new UpdateInitiativeMutation(this._request).fetch(id, input);
        }
        /**
         * Archives an initiative update.
         *
         * @param id - required id to pass to archiveInitiativeUpdate
         * @returns InitiativeUpdateArchivePayload
         */
        archiveInitiativeUpdate(id) {
            return new ArchiveInitiativeUpdateMutation(this._request).fetch(id);
        }
        /**
         * Creates a initiative update.
         *
         * @param input - required input to pass to createInitiativeUpdate
         * @returns InitiativeUpdatePayload
         */
        createInitiativeUpdate(input) {
            return new CreateInitiativeUpdateMutation(this._request).fetch(input);
        }
        /**
         * Unarchives an initiative update.
         *
         * @param id - required id to pass to unarchiveInitiativeUpdate
         * @returns InitiativeUpdateArchivePayload
         */
        unarchiveInitiativeUpdate(id) {
            return new UnarchiveInitiativeUpdateMutation(this._request).fetch(id);
        }
        /**
         * Updates an update.
         *
         * @param id - required id to pass to updateInitiativeUpdate
         * @param input - required input to pass to updateInitiativeUpdate
         * @returns InitiativeUpdatePayload
         */
        updateInitiativeUpdate(id, input) {
            return new UpdateInitiativeUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Archives an integration.
         *
         * @param id - required id to pass to archiveIntegration
         * @returns DeletePayload
         */
        archiveIntegration(id) {
            return new ArchiveIntegrationMutation(this._request).fetch(id);
        }
        /**
         * Connect a Slack channel to Asks.
         *
         * @param code - required code to pass to integrationAsksConnectChannel
         * @param redirectUri - required redirectUri to pass to integrationAsksConnectChannel
         * @returns AsksChannelConnectPayload
         */
        integrationAsksConnectChannel(code, redirectUri) {
            return new IntegrationAsksConnectChannelMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Deletes an integration.
         *
         * @param id - required id to pass to deleteIntegration
         * @param variables - variables without 'id' to pass into the DeleteIntegrationMutation
         * @returns DeletePayload
         */
        deleteIntegration(id, variables) {
            return new DeleteIntegrationMutation(this._request).fetch(id, variables);
        }
        /**
         * Integrates the organization with Discord.
         *
         * @param code - required code to pass to integrationDiscord
         * @param redirectUri - required redirectUri to pass to integrationDiscord
         * @returns IntegrationPayload
         */
        integrationDiscord(code, redirectUri) {
            return new IntegrationDiscordMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Integrates the organization with Figma.
         *
         * @param code - required code to pass to integrationFigma
         * @param redirectUri - required redirectUri to pass to integrationFigma
         * @returns IntegrationPayload
         */
        integrationFigma(code, redirectUri) {
            return new IntegrationFigmaMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Integrates the organization with Front.
         *
         * @param code - required code to pass to integrationFront
         * @param redirectUri - required redirectUri to pass to integrationFront
         * @returns IntegrationPayload
         */
        integrationFront(code, redirectUri) {
            return new IntegrationFrontMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Connects the organization with a GitHub Enterprise Server.
         *
         * @param githubUrl - required githubUrl to pass to integrationGitHubEnterpriseServerConnect
         * @param organizationName - required organizationName to pass to integrationGitHubEnterpriseServerConnect
         * @returns GitHubEnterpriseServerPayload
         */
        integrationGitHubEnterpriseServerConnect(githubUrl, organizationName) {
            return new IntegrationGitHubEnterpriseServerConnectMutation(this._request).fetch(githubUrl, organizationName);
        }
        /**
         * Connect your GitHub account to Linear.
         *
         * @param code - required code to pass to integrationGitHubPersonal
         * @param variables - variables without 'code' to pass into the IntegrationGitHubPersonalMutation
         * @returns IntegrationPayload
         */
        integrationGitHubPersonal(code, variables) {
            return new IntegrationGitHubPersonalMutation(this._request).fetch(code, variables);
        }
        /**
         * Generates a webhook for the GitHub commit integration.
         *
         * @returns GitHubCommitIntegrationPayload
         */
        get createIntegrationGithubCommit() {
            return new CreateIntegrationGithubCommitMutation(this._request).fetch();
        }
        /**
         * Connects the organization with the GitHub App.
         *
         * @param code - required code to pass to integrationGithubConnect
         * @param installationId - required installationId to pass to integrationGithubConnect
         * @param variables - variables without 'code', 'installationId' to pass into the IntegrationGithubConnectMutation
         * @returns IntegrationPayload
         */
        integrationGithubConnect(code, installationId, variables) {
            return new IntegrationGithubConnectMutation(this._request).fetch(code, installationId, variables);
        }
        /**
         * Connects the organization with the GitHub Import App.
         *
         * @param code - required code to pass to integrationGithubImportConnect
         * @param installationId - required installationId to pass to integrationGithubImportConnect
         * @returns IntegrationPayload
         */
        integrationGithubImportConnect(code, installationId) {
            return new IntegrationGithubImportConnectMutation(this._request).fetch(code, installationId);
        }
        /**
         * Refreshes the data for a GitHub import integration.
         *
         * @param id - required id to pass to integrationGithubImportRefresh
         * @returns IntegrationPayload
         */
        integrationGithubImportRefresh(id) {
            return new IntegrationGithubImportRefreshMutation(this._request).fetch(id);
        }
        /**
         * Connects the organization with a GitLab Access Token.
         *
         * @param accessToken - required accessToken to pass to integrationGitlabConnect
         * @param gitlabUrl - required gitlabUrl to pass to integrationGitlabConnect
         * @returns GitLabIntegrationCreatePayload
         */
        integrationGitlabConnect(accessToken, gitlabUrl) {
            return new IntegrationGitlabConnectMutation(this._request).fetch(accessToken, gitlabUrl);
        }
        /**
         * Integrates the organization with Gong.
         *
         * @param code - required code to pass to integrationGong
         * @param redirectUri - required redirectUri to pass to integrationGong
         * @returns IntegrationPayload
         */
        integrationGong(code, redirectUri) {
            return new IntegrationGongMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Integrates the organization with Google Sheets.
         *
         * @param code - required code to pass to integrationGoogleSheets
         * @returns IntegrationPayload
         */
        integrationGoogleSheets(code) {
            return new IntegrationGoogleSheetsMutation(this._request).fetch(code);
        }
        /**
         * Integrates the organization with Intercom.
         *
         * @param code - required code to pass to integrationIntercom
         * @param redirectUri - required redirectUri to pass to integrationIntercom
         * @param variables - variables without 'code', 'redirectUri' to pass into the IntegrationIntercomMutation
         * @returns IntegrationPayload
         */
        integrationIntercom(code, redirectUri, variables) {
            return new IntegrationIntercomMutation(this._request).fetch(code, redirectUri, variables);
        }
        /**
         * Disconnects the organization from Intercom.
         *
         * @returns IntegrationPayload
         */
        get deleteIntegrationIntercom() {
            return new DeleteIntegrationIntercomMutation(this._request).fetch();
        }
        /**
         * [DEPRECATED] Updates settings on the Intercom integration.
         *
         * @param input - required input to pass to updateIntegrationIntercomSettings
         * @returns IntegrationPayload
         */
        updateIntegrationIntercomSettings(input) {
            return new UpdateIntegrationIntercomSettingsMutation(this._request).fetch(input);
        }
        /**
         * Connect your Jira account to Linear.
         *
         * @param variables - variables to pass into the IntegrationJiraPersonalMutation
         * @returns IntegrationPayload
         */
        integrationJiraPersonal(variables) {
            return new IntegrationJiraPersonalMutation(this._request).fetch(variables);
        }
        /**
         * Enables Loom integration for the organization.
         *
         * @returns IntegrationPayload
         */
        get integrationLoom() {
            return new IntegrationLoomMutation(this._request).fetch();
        }
        /**
         * Requests a currently unavailable integration.
         *
         * @param input - required input to pass to integrationRequest
         * @returns IntegrationRequestPayload
         */
        integrationRequest(input) {
            return new IntegrationRequestMutation(this._request).fetch(input);
        }
        /**
         * Integrates the organization with Salesforce.
         *
         * @param code - required code to pass to integrationSalesforce
         * @param redirectUri - required redirectUri to pass to integrationSalesforce
         * @param subdomain - required subdomain to pass to integrationSalesforce
         * @returns IntegrationPayload
         */
        integrationSalesforce(code, redirectUri, subdomain) {
            return new IntegrationSalesforceMutation(this._request).fetch(code, redirectUri, subdomain);
        }
        /**
         * Integrates the organization with Sentry.
         *
         * @param code - required code to pass to integrationSentryConnect
         * @param installationId - required installationId to pass to integrationSentryConnect
         * @param organizationSlug - required organizationSlug to pass to integrationSentryConnect
         * @returns IntegrationPayload
         */
        integrationSentryConnect(code, installationId, organizationSlug) {
            return new IntegrationSentryConnectMutation(this._request).fetch(code, installationId, organizationSlug);
        }
        /**
         * Integrates the organization with Slack.
         *
         * @param code - required code to pass to integrationSlack
         * @param redirectUri - required redirectUri to pass to integrationSlack
         * @param variables - variables without 'code', 'redirectUri' to pass into the IntegrationSlackMutation
         * @returns IntegrationPayload
         */
        integrationSlack(code, redirectUri, variables) {
            return new IntegrationSlackMutation(this._request).fetch(code, redirectUri, variables);
        }
        /**
         * Integrates the organization with the Slack Asks app.
         *
         * @param code - required code to pass to integrationSlackAsks
         * @param redirectUri - required redirectUri to pass to integrationSlackAsks
         * @returns IntegrationPayload
         */
        integrationSlackAsks(code, redirectUri) {
            return new IntegrationSlackAsksMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Slack integration for custom view notifications.
         *
         * @param code - required code to pass to integrationSlackCustomViewNotifications
         * @param customViewId - required customViewId to pass to integrationSlackCustomViewNotifications
         * @param redirectUri - required redirectUri to pass to integrationSlackCustomViewNotifications
         * @returns SlackChannelConnectPayload
         */
        integrationSlackCustomViewNotifications(code, customViewId, redirectUri) {
            return new IntegrationSlackCustomViewNotificationsMutation(this._request).fetch(code, customViewId, redirectUri);
        }
        /**
         * Integrates a Slack Asks channel with a Customer.
         *
         * @param code - required code to pass to integrationSlackCustomerChannelLink
         * @param customerId - required customerId to pass to integrationSlackCustomerChannelLink
         * @param redirectUri - required redirectUri to pass to integrationSlackCustomerChannelLink
         * @returns SuccessPayload
         */
        integrationSlackCustomerChannelLink(code, customerId, redirectUri) {
            return new IntegrationSlackCustomerChannelLinkMutation(this._request).fetch(code, customerId, redirectUri);
        }
        /**
         * Imports custom emojis from your Slack workspace.
         *
         * @param code - required code to pass to integrationSlackImportEmojis
         * @param redirectUri - required redirectUri to pass to integrationSlackImportEmojis
         * @returns IntegrationPayload
         */
        integrationSlackImportEmojis(code, redirectUri) {
            return new IntegrationSlackImportEmojisMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Updates the Slack team's name in Linear for an existing Slack or Asks integration.
         *
         * @param integrationId - required integrationId to pass to integrationSlackOrAsksUpdateSlackTeamName
         * @returns IntegrationSlackWorkspaceNamePayload
         */
        integrationSlackOrAsksUpdateSlackTeamName(integrationId) {
            return new IntegrationSlackOrAsksUpdateSlackTeamNameMutation(this._request).fetch(integrationId);
        }
        /**
         * Slack integration for organization level project update notifications.
         *
         * @param code - required code to pass to integrationSlackOrgProjectUpdatesPost
         * @param redirectUri - required redirectUri to pass to integrationSlackOrgProjectUpdatesPost
         * @returns SlackChannelConnectPayload
         */
        integrationSlackOrgProjectUpdatesPost(code, redirectUri) {
            return new IntegrationSlackOrgProjectUpdatesPostMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Integrates your personal notifications with Slack.
         *
         * @param code - required code to pass to integrationSlackPersonal
         * @param redirectUri - required redirectUri to pass to integrationSlackPersonal
         * @returns IntegrationPayload
         */
        integrationSlackPersonal(code, redirectUri) {
            return new IntegrationSlackPersonalMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Slack integration for team notifications.
         *
         * @param code - required code to pass to integrationSlackPost
         * @param redirectUri - required redirectUri to pass to integrationSlackPost
         * @param teamId - required teamId to pass to integrationSlackPost
         * @param variables - variables without 'code', 'redirectUri', 'teamId' to pass into the IntegrationSlackPostMutation
         * @returns SlackChannelConnectPayload
         */
        integrationSlackPost(code, redirectUri, teamId, variables) {
            return new IntegrationSlackPostMutation(this._request).fetch(code, redirectUri, teamId, variables);
        }
        /**
         * Slack integration for project notifications.
         *
         * @param code - required code to pass to integrationSlackProjectPost
         * @param projectId - required projectId to pass to integrationSlackProjectPost
         * @param redirectUri - required redirectUri to pass to integrationSlackProjectPost
         * @param service - required service to pass to integrationSlackProjectPost
         * @returns SlackChannelConnectPayload
         */
        integrationSlackProjectPost(code, projectId, redirectUri, service) {
            return new IntegrationSlackProjectPostMutation(this._request).fetch(code, projectId, redirectUri, service);
        }
        /**
         * Creates a new integrationTemplate join.
         *
         * @param input - required input to pass to createIntegrationTemplate
         * @returns IntegrationTemplatePayload
         */
        createIntegrationTemplate(input) {
            return new CreateIntegrationTemplateMutation(this._request).fetch(input);
        }
        /**
         * Deletes a integrationTemplate.
         *
         * @param id - required id to pass to deleteIntegrationTemplate
         * @returns DeletePayload
         */
        deleteIntegrationTemplate(id) {
            return new DeleteIntegrationTemplateMutation(this._request).fetch(id);
        }
        /**
         * Integrates the organization with Zendesk.
         *
         * @param code - required code to pass to integrationZendesk
         * @param redirectUri - required redirectUri to pass to integrationZendesk
         * @param scope - required scope to pass to integrationZendesk
         * @param subdomain - required subdomain to pass to integrationZendesk
         * @returns IntegrationPayload
         */
        integrationZendesk(code, redirectUri, scope, subdomain) {
            return new IntegrationZendeskMutation(this._request).fetch(code, redirectUri, scope, subdomain);
        }
        /**
         * Creates new settings for one or more integrations.
         *
         * @param input - required input to pass to createIntegrationsSettings
         * @returns IntegrationsSettingsPayload
         */
        createIntegrationsSettings(input) {
            return new CreateIntegrationsSettingsMutation(this._request).fetch(input);
        }
        /**
         * Updates settings related to integrations for a project or a team.
         *
         * @param id - required id to pass to updateIntegrationsSettings
         * @param input - required input to pass to updateIntegrationsSettings
         * @returns IntegrationsSettingsPayload
         */
        updateIntegrationsSettings(id, input) {
            return new UpdateIntegrationsSettingsMutation(this._request).fetch(id, input);
        }
        /**
         * Adds a label to an issue.
         *
         * @param id - required id to pass to issueAddLabel
         * @param labelId - required labelId to pass to issueAddLabel
         * @returns IssuePayload
         */
        issueAddLabel(id, labelId) {
            return new IssueAddLabelMutation(this._request).fetch(id, labelId);
        }
        /**
         * Archives an issue.
         *
         * @param id - required id to pass to archiveIssue
         * @param variables - variables without 'id' to pass into the ArchiveIssueMutation
         * @returns IssueArchivePayload
         */
        archiveIssue(id, variables) {
            return new ArchiveIssueMutation(this._request).fetch(id, variables);
        }
        /**
         * Creates a list of issues in one transaction.
         *
         * @param input - required input to pass to createIssueBatch
         * @returns IssueBatchPayload
         */
        createIssueBatch(input) {
            return new CreateIssueBatchMutation(this._request).fetch(input);
        }
        /**
         * Updates multiple issues at once.
         *
         * @param ids - required ids to pass to updateIssueBatch
         * @param input - required input to pass to updateIssueBatch
         * @returns IssueBatchPayload
         */
        updateIssueBatch(ids, input) {
            return new UpdateIssueBatchMutation(this._request).fetch(ids, input);
        }
        /**
         * Creates a new issue.
         *
         * @param input - required input to pass to createIssue
         * @returns IssuePayload
         */
        createIssue(input) {
            return new CreateIssueMutation(this._request).fetch(input);
        }
        /**
         * Deletes (trashes) an issue.
         *
         * @param id - required id to pass to deleteIssue
         * @param variables - variables without 'id' to pass into the DeleteIssueMutation
         * @returns IssueArchivePayload
         */
        deleteIssue(id, variables) {
            return new DeleteIssueMutation(this._request).fetch(id, variables);
        }
        /**
         * Disables external sync on an issue.
         *
         * @param attachmentId - required attachmentId to pass to issueExternalSyncDisable
         * @returns IssuePayload
         */
        issueExternalSyncDisable(attachmentId) {
            return new IssueExternalSyncDisableMutation(this._request).fetch(attachmentId);
        }
        /**
         * Kicks off an Asana import job.
         *
         * @param asanaTeamName - required asanaTeamName to pass to issueImportCreateAsana
         * @param asanaToken - required asanaToken to pass to issueImportCreateAsana
         * @param variables - variables without 'asanaTeamName', 'asanaToken' to pass into the IssueImportCreateAsanaMutation
         * @returns IssueImportPayload
         */
        issueImportCreateAsana(asanaTeamName, asanaToken, variables) {
            return new IssueImportCreateAsanaMutation(this._request).fetch(asanaTeamName, asanaToken, variables);
        }
        /**
         * Kicks off a Jira import job from a CSV.
         *
         * @param csvUrl - required csvUrl to pass to issueImportCreateCSVJira
         * @param variables - variables without 'csvUrl' to pass into the IssueImportCreateCsvJiraMutation
         * @returns IssueImportPayload
         */
        issueImportCreateCSVJira(csvUrl, variables) {
            return new IssueImportCreateCsvJiraMutation(this._request).fetch(csvUrl, variables);
        }
        /**
         * Kicks off a Shortcut (formerly Clubhouse) import job.
         *
         * @param clubhouseGroupName - required clubhouseGroupName to pass to issueImportCreateClubhouse
         * @param clubhouseToken - required clubhouseToken to pass to issueImportCreateClubhouse
         * @param variables - variables without 'clubhouseGroupName', 'clubhouseToken' to pass into the IssueImportCreateClubhouseMutation
         * @returns IssueImportPayload
         */
        issueImportCreateClubhouse(clubhouseGroupName, clubhouseToken, variables) {
            return new IssueImportCreateClubhouseMutation(this._request).fetch(clubhouseGroupName, clubhouseToken, variables);
        }
        /**
         * Kicks off a GitHub import job.
         *
         * @param variables - variables to pass into the IssueImportCreateGithubMutation
         * @returns IssueImportPayload
         */
        issueImportCreateGithub(variables) {
            return new IssueImportCreateGithubMutation(this._request).fetch(variables);
        }
        /**
         * Kicks off a Jira import job.
         *
         * @param jiraEmail - required jiraEmail to pass to issueImportCreateJira
         * @param jiraHostname - required jiraHostname to pass to issueImportCreateJira
         * @param jiraProject - required jiraProject to pass to issueImportCreateJira
         * @param jiraToken - required jiraToken to pass to issueImportCreateJira
         * @param variables - variables without 'jiraEmail', 'jiraHostname', 'jiraProject', 'jiraToken' to pass into the IssueImportCreateJiraMutation
         * @returns IssueImportPayload
         */
        issueImportCreateJira(jiraEmail, jiraHostname, jiraProject, jiraToken, variables) {
            return new IssueImportCreateJiraMutation(this._request).fetch(jiraEmail, jiraHostname, jiraProject, jiraToken, variables);
        }
        /**
         * Deletes an import job.
         *
         * @param issueImportId - required issueImportId to pass to deleteIssueImport
         * @returns IssueImportDeletePayload
         */
        deleteIssueImport(issueImportId) {
            return new DeleteIssueImportMutation(this._request).fetch(issueImportId);
        }
        /**
         * Kicks off import processing.
         *
         * @param issueImportId - required issueImportId to pass to issueImportProcess
         * @param mapping - required mapping to pass to issueImportProcess
         * @returns IssueImportPayload
         */
        issueImportProcess(issueImportId, mapping) {
            return new IssueImportProcessMutation(this._request).fetch(issueImportId, mapping);
        }
        /**
         * Updates the mapping for the issue import.
         *
         * @param id - required id to pass to updateIssueImport
         * @param input - required input to pass to updateIssueImport
         * @returns IssueImportPayload
         */
        updateIssueImport(id, input) {
            return new UpdateIssueImportMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new label.
         *
         * @param input - required input to pass to createIssueLabel
         * @param variables - variables without 'input' to pass into the CreateIssueLabelMutation
         * @returns IssueLabelPayload
         */
        createIssueLabel(input, variables) {
            return new CreateIssueLabelMutation(this._request).fetch(input, variables);
        }
        /**
         * Deletes an issue label.
         *
         * @param id - required id to pass to deleteIssueLabel
         * @returns DeletePayload
         */
        deleteIssueLabel(id) {
            return new DeleteIssueLabelMutation(this._request).fetch(id);
        }
        /**
         * Updates an label.
         *
         * @param id - required id to pass to updateIssueLabel
         * @param input - required input to pass to updateIssueLabel
         * @param variables - variables without 'id', 'input' to pass into the UpdateIssueLabelMutation
         * @returns IssueLabelPayload
         */
        updateIssueLabel(id, input, variables) {
            return new UpdateIssueLabelMutation(this._request).fetch(id, input, variables);
        }
        /**
         * Creates a new issue relation.
         *
         * @param input - required input to pass to createIssueRelation
         * @param variables - variables without 'input' to pass into the CreateIssueRelationMutation
         * @returns IssueRelationPayload
         */
        createIssueRelation(input, variables) {
            return new CreateIssueRelationMutation(this._request).fetch(input, variables);
        }
        /**
         * Deletes an issue relation.
         *
         * @param id - required id to pass to deleteIssueRelation
         * @returns DeletePayload
         */
        deleteIssueRelation(id) {
            return new DeleteIssueRelationMutation(this._request).fetch(id);
        }
        /**
         * Updates an issue relation.
         *
         * @param id - required id to pass to updateIssueRelation
         * @param input - required input to pass to updateIssueRelation
         * @returns IssueRelationPayload
         */
        updateIssueRelation(id, input) {
            return new UpdateIssueRelationMutation(this._request).fetch(id, input);
        }
        /**
         * Adds an issue reminder. Will cause a notification to be sent when the issue reminder time is reached.
         *
         * @param id - required id to pass to issueReminder
         * @param reminderAt - required reminderAt to pass to issueReminder
         * @returns IssuePayload
         */
        issueReminder(id, reminderAt) {
            return new IssueReminderMutation(this._request).fetch(id, reminderAt);
        }
        /**
         * Removes a label from an issue.
         *
         * @param id - required id to pass to issueRemoveLabel
         * @param labelId - required labelId to pass to issueRemoveLabel
         * @returns IssuePayload
         */
        issueRemoveLabel(id, labelId) {
            return new IssueRemoveLabelMutation(this._request).fetch(id, labelId);
        }
        /**
         * Subscribes a user to an issue.
         *
         * @param id - required id to pass to issueSubscribe
         * @param variables - variables without 'id' to pass into the IssueSubscribeMutation
         * @returns IssuePayload
         */
        issueSubscribe(id, variables) {
            return new IssueSubscribeMutation(this._request).fetch(id, variables);
        }
        /**
         * Unarchives an issue.
         *
         * @param id - required id to pass to unarchiveIssue
         * @returns IssueArchivePayload
         */
        unarchiveIssue(id) {
            return new UnarchiveIssueMutation(this._request).fetch(id);
        }
        /**
         * Unsubscribes a user from an issue.
         *
         * @param id - required id to pass to issueUnsubscribe
         * @param variables - variables without 'id' to pass into the IssueUnsubscribeMutation
         * @returns IssuePayload
         */
        issueUnsubscribe(id, variables) {
            return new IssueUnsubscribeMutation(this._request).fetch(id, variables);
        }
        /**
         * Updates an issue.
         *
         * @param id - required id to pass to updateIssue
         * @param input - required input to pass to updateIssue
         * @returns IssuePayload
         */
        updateIssue(id, input) {
            return new UpdateIssueMutation(this._request).fetch(id, input);
        }
        /**
         * Join an organization from onboarding.
         *
         * @param input - required input to pass to joinOrganizationFromOnboarding
         * @returns CreateOrJoinOrganizationResponse
         */
        joinOrganizationFromOnboarding(input) {
            return new JoinOrganizationFromOnboardingMutation(this._request).fetch(input);
        }
        /**
         * Leave an organization.
         *
         * @param organizationId - required organizationId to pass to leaveOrganization
         * @returns CreateOrJoinOrganizationResponse
         */
        leaveOrganization(organizationId) {
            return new LeaveOrganizationMutation(this._request).fetch(organizationId);
        }
        /**
         * Logout the client.
         *
         * @param variables - variables to pass into the LogoutMutation
         * @returns LogoutResponse
         */
        logout(variables) {
            return new LogoutMutation(this._request).fetch(variables);
        }
        /**
         * Logout all of user's sessions including the active one.
         *
         * @param variables - variables to pass into the LogoutAllSessionsMutation
         * @returns LogoutResponse
         */
        logoutAllSessions(variables) {
            return new LogoutAllSessionsMutation(this._request).fetch(variables);
        }
        /**
         * Logout all of user's sessions excluding the current one.
         *
         * @param variables - variables to pass into the LogoutOtherSessionsMutation
         * @returns LogoutResponse
         */
        logoutOtherSessions(variables) {
            return new LogoutOtherSessionsMutation(this._request).fetch(variables);
        }
        /**
         * Logout an individual session with its ID.
         *
         * @param sessionId - required sessionId to pass to logoutSession
         * @returns LogoutResponse
         */
        logoutSession(sessionId) {
            return new LogoutSessionMutation(this._request).fetch(sessionId);
        }
        /**
         * Archives a notification.
         *
         * @param id - required id to pass to archiveNotification
         * @returns NotificationArchivePayload
         */
        archiveNotification(id) {
            return new ArchiveNotificationMutation(this._request).fetch(id);
        }
        /**
         * Archives a notification and all related notifications.
         *
         * @param input - required input to pass to notificationArchiveAll
         * @returns NotificationBatchActionPayload
         */
        notificationArchiveAll(input) {
            return new NotificationArchiveAllMutation(this._request).fetch(input);
        }
        /**
         * Subscribes to or unsubscribes from a notification category for a given notification channel for the user
         *
         * @param category - required category to pass to updateNotificationCategoryChannelSubscription
         * @param channel - required channel to pass to updateNotificationCategoryChannelSubscription
         * @param subscribe - required subscribe to pass to updateNotificationCategoryChannelSubscription
         * @returns UserSettingsPayload
         */
        updateNotificationCategoryChannelSubscription(category, channel, subscribe) {
            return new UpdateNotificationCategoryChannelSubscriptionMutation(this._request).fetch(category, channel, subscribe);
        }
        /**
         * Marks notification and all related notifications as read.
         *
         * @param input - required input to pass to notificationMarkReadAll
         * @param readAt - required readAt to pass to notificationMarkReadAll
         * @returns NotificationBatchActionPayload
         */
        notificationMarkReadAll(input, readAt) {
            return new NotificationMarkReadAllMutation(this._request).fetch(input, readAt);
        }
        /**
         * Marks notification and all related notifications as unread.
         *
         * @param input - required input to pass to notificationMarkUnreadAll
         * @returns NotificationBatchActionPayload
         */
        notificationMarkUnreadAll(input) {
            return new NotificationMarkUnreadAllMutation(this._request).fetch(input);
        }
        /**
         * Snoozes a notification and all related notifications.
         *
         * @param input - required input to pass to notificationSnoozeAll
         * @param snoozedUntilAt - required snoozedUntilAt to pass to notificationSnoozeAll
         * @returns NotificationBatchActionPayload
         */
        notificationSnoozeAll(input, snoozedUntilAt) {
            return new NotificationSnoozeAllMutation(this._request).fetch(input, snoozedUntilAt);
        }
        /**
         * Creates a new notification subscription for a cycle, custom view, label, project or team.
         *
         * @param input - required input to pass to createNotificationSubscription
         * @returns NotificationSubscriptionPayload
         */
        createNotificationSubscription(input) {
            return new CreateNotificationSubscriptionMutation(this._request).fetch(input);
        }
        /**
         * Deletes a notification subscription reference.
         *
         * @param id - required id to pass to deleteNotificationSubscription
         * @returns DeletePayload
         */
        deleteNotificationSubscription(id) {
            return new DeleteNotificationSubscriptionMutation(this._request).fetch(id);
        }
        /**
         * Updates a notification subscription.
         *
         * @param id - required id to pass to updateNotificationSubscription
         * @param input - required input to pass to updateNotificationSubscription
         * @returns NotificationSubscriptionPayload
         */
        updateNotificationSubscription(id, input) {
            return new UpdateNotificationSubscriptionMutation(this._request).fetch(id, input);
        }
        /**
         * Unarchives a notification.
         *
         * @param id - required id to pass to unarchiveNotification
         * @returns NotificationArchivePayload
         */
        unarchiveNotification(id) {
            return new UnarchiveNotificationMutation(this._request).fetch(id);
        }
        /**
         * Unsnoozes a notification and all related notifications.
         *
         * @param input - required input to pass to notificationUnsnoozeAll
         * @param unsnoozedAt - required unsnoozedAt to pass to notificationUnsnoozeAll
         * @returns NotificationBatchActionPayload
         */
        notificationUnsnoozeAll(input, unsnoozedAt) {
            return new NotificationUnsnoozeAllMutation(this._request).fetch(input, unsnoozedAt);
        }
        /**
         * Updates a notification.
         *
         * @param id - required id to pass to updateNotification
         * @param input - required input to pass to updateNotification
         * @returns NotificationPayload
         */
        updateNotification(id, input) {
            return new UpdateNotificationMutation(this._request).fetch(id, input);
        }
        /**
         * Cancels the deletion of an organization. Administrator privileges required.
         *
         * @returns OrganizationCancelDeletePayload
         */
        get deleteOrganizationCancel() {
            return new DeleteOrganizationCancelMutation(this._request).fetch();
        }
        /**
         * Delete's an organization. Administrator privileges required.
         *
         * @param input - required input to pass to deleteOrganization
         * @returns OrganizationDeletePayload
         */
        deleteOrganization(input) {
            return new DeleteOrganizationMutation(this._request).fetch(input);
        }
        /**
         * Get an organization's delete confirmation token. Administrator privileges required.
         *
         * @returns OrganizationDeletePayload
         */
        get organizationDeleteChallenge() {
            return new OrganizationDeleteChallengeMutation(this._request).fetch();
        }
        /**
         * Deletes a domain.
         *
         * @param id - required id to pass to deleteOrganizationDomain
         * @returns DeletePayload
         */
        deleteOrganizationDomain(id) {
            return new DeleteOrganizationDomainMutation(this._request).fetch(id);
        }
        /**
         * Creates a new organization invite.
         *
         * @param input - required input to pass to createOrganizationInvite
         * @returns OrganizationInvitePayload
         */
        createOrganizationInvite(input) {
            return new CreateOrganizationInviteMutation(this._request).fetch(input);
        }
        /**
         * Deletes an organization invite.
         *
         * @param id - required id to pass to deleteOrganizationInvite
         * @returns DeletePayload
         */
        deleteOrganizationInvite(id) {
            return new DeleteOrganizationInviteMutation(this._request).fetch(id);
        }
        /**
         * Updates an organization invite.
         *
         * @param id - required id to pass to updateOrganizationInvite
         * @param input - required input to pass to updateOrganizationInvite
         * @returns OrganizationInvitePayload
         */
        updateOrganizationInvite(id, input) {
            return new UpdateOrganizationInviteMutation(this._request).fetch(id, input);
        }
        /**
         * [DEPRECATED] Starts a trial for the organization. Administrator privileges required.
         *
         * @returns OrganizationStartTrialPayload
         */
        get organizationStartTrial() {
            return new OrganizationStartTrialMutation(this._request).fetch();
        }
        /**
         * Starts a trial for the organization on the specified plan type. Administrator privileges required.
         *
         * @param input - required input to pass to organizationStartTrialForPlan
         * @returns OrganizationStartTrialPayload
         */
        organizationStartTrialForPlan(input) {
            return new OrganizationStartTrialForPlanMutation(this._request).fetch(input);
        }
        /**
         * Updates the user's organization.
         *
         * @param input - required input to pass to updateOrganization
         * @returns OrganizationPayload
         */
        updateOrganization(input) {
            return new UpdateOrganizationMutation(this._request).fetch(input);
        }
        /**
         * Adds a label to a project.
         *
         * @param id - required id to pass to projectAddLabel
         * @param labelId - required labelId to pass to projectAddLabel
         * @returns ProjectPayload
         */
        projectAddLabel(id, labelId) {
            return new ProjectAddLabelMutation(this._request).fetch(id, labelId);
        }
        /**
         * Archives a project.
         *
         * @param id - required id to pass to archiveProject
         * @param variables - variables without 'id' to pass into the ArchiveProjectMutation
         * @returns ProjectArchivePayload
         */
        archiveProject(id, variables) {
            return new ArchiveProjectMutation(this._request).fetch(id, variables);
        }
        /**
         * Creates a new project.
         *
         * @param input - required input to pass to createProject
         * @param variables - variables without 'input' to pass into the CreateProjectMutation
         * @returns ProjectPayload
         */
        createProject(input, variables) {
            return new CreateProjectMutation(this._request).fetch(input, variables);
        }
        /**
         * Deletes (trashes) a project.
         *
         * @param id - required id to pass to deleteProject
         * @returns ProjectArchivePayload
         */
        deleteProject(id) {
            return new DeleteProjectMutation(this._request).fetch(id);
        }
        /**
         * Creates a new project label.
         *
         * @param input - required input to pass to createProjectLabel
         * @returns ProjectLabelPayload
         */
        createProjectLabel(input) {
            return new CreateProjectLabelMutation(this._request).fetch(input);
        }
        /**
         * Deletes a project label.
         *
         * @param id - required id to pass to deleteProjectLabel
         * @returns DeletePayload
         */
        deleteProjectLabel(id) {
            return new DeleteProjectLabelMutation(this._request).fetch(id);
        }
        /**
         * Updates a project label.
         *
         * @param id - required id to pass to updateProjectLabel
         * @param input - required input to pass to updateProjectLabel
         * @returns ProjectLabelPayload
         */
        updateProjectLabel(id, input) {
            return new UpdateProjectLabelMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new project milestone.
         *
         * @param input - required input to pass to createProjectMilestone
         * @returns ProjectMilestonePayload
         */
        createProjectMilestone(input) {
            return new CreateProjectMilestoneMutation(this._request).fetch(input);
        }
        /**
         * Deletes a project milestone.
         *
         * @param id - required id to pass to deleteProjectMilestone
         * @returns DeletePayload
         */
        deleteProjectMilestone(id) {
            return new DeleteProjectMilestoneMutation(this._request).fetch(id);
        }
        /**
         * Updates a project milestone.
         *
         * @param id - required id to pass to updateProjectMilestone
         * @param input - required input to pass to updateProjectMilestone
         * @returns ProjectMilestonePayload
         */
        updateProjectMilestone(id, input) {
            return new UpdateProjectMilestoneMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new project relation.
         *
         * @param input - required input to pass to createProjectRelation
         * @returns ProjectRelationPayload
         */
        createProjectRelation(input) {
            return new CreateProjectRelationMutation(this._request).fetch(input);
        }
        /**
         * Deletes a project relation.
         *
         * @param id - required id to pass to deleteProjectRelation
         * @returns DeletePayload
         */
        deleteProjectRelation(id) {
            return new DeleteProjectRelationMutation(this._request).fetch(id);
        }
        /**
         * Updates a project relation.
         *
         * @param id - required id to pass to updateProjectRelation
         * @param input - required input to pass to updateProjectRelation
         * @returns ProjectRelationPayload
         */
        updateProjectRelation(id, input) {
            return new UpdateProjectRelationMutation(this._request).fetch(id, input);
        }
        /**
         * Removes a label from a project.
         *
         * @param id - required id to pass to projectRemoveLabel
         * @param labelId - required labelId to pass to projectRemoveLabel
         * @returns ProjectPayload
         */
        projectRemoveLabel(id, labelId) {
            return new ProjectRemoveLabelMutation(this._request).fetch(id, labelId);
        }
        /**
         * Archives a project status.
         *
         * @param id - required id to pass to archiveProjectStatus
         * @returns ProjectStatusArchivePayload
         */
        archiveProjectStatus(id) {
            return new ArchiveProjectStatusMutation(this._request).fetch(id);
        }
        /**
         * Creates a new project status.
         *
         * @param input - required input to pass to createProjectStatus
         * @returns ProjectStatusPayload
         */
        createProjectStatus(input) {
            return new CreateProjectStatusMutation(this._request).fetch(input);
        }
        /**
         * Unarchives a project status.
         *
         * @param id - required id to pass to unarchiveProjectStatus
         * @returns ProjectStatusArchivePayload
         */
        unarchiveProjectStatus(id) {
            return new UnarchiveProjectStatusMutation(this._request).fetch(id);
        }
        /**
         * Updates a project status.
         *
         * @param id - required id to pass to updateProjectStatus
         * @param input - required input to pass to updateProjectStatus
         * @returns ProjectStatusPayload
         */
        updateProjectStatus(id, input) {
            return new UpdateProjectStatusMutation(this._request).fetch(id, input);
        }
        /**
         * Unarchives a project.
         *
         * @param id - required id to pass to unarchiveProject
         * @returns ProjectArchivePayload
         */
        unarchiveProject(id) {
            return new UnarchiveProjectMutation(this._request).fetch(id);
        }
        /**
         * Updates a project.
         *
         * @param id - required id to pass to updateProject
         * @param input - required input to pass to updateProject
         * @returns ProjectPayload
         */
        updateProject(id, input) {
            return new UpdateProjectMutation(this._request).fetch(id, input);
        }
        /**
         * Archives a project update.
         *
         * @param id - required id to pass to archiveProjectUpdate
         * @returns ProjectUpdateArchivePayload
         */
        archiveProjectUpdate(id) {
            return new ArchiveProjectUpdateMutation(this._request).fetch(id);
        }
        /**
         * Creates a new project update.
         *
         * @param input - required input to pass to createProjectUpdate
         * @returns ProjectUpdatePayload
         */
        createProjectUpdate(input) {
            return new CreateProjectUpdateMutation(this._request).fetch(input);
        }
        /**
         * Deletes a project update.
         *
         * @param id - required id to pass to deleteProjectUpdate
         * @returns DeletePayload
         */
        deleteProjectUpdate(id) {
            return new DeleteProjectUpdateMutation(this._request).fetch(id);
        }
        /**
         * Unarchives a project update.
         *
         * @param id - required id to pass to unarchiveProjectUpdate
         * @returns ProjectUpdateArchivePayload
         */
        unarchiveProjectUpdate(id) {
            return new UnarchiveProjectUpdateMutation(this._request).fetch(id);
        }
        /**
         * Updates a project update.
         *
         * @param id - required id to pass to updateProjectUpdate
         * @param input - required input to pass to updateProjectUpdate
         * @returns ProjectUpdatePayload
         */
        updateProjectUpdate(id, input) {
            return new UpdateProjectUpdateMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a push subscription.
         *
         * @param input - required input to pass to createPushSubscription
         * @returns PushSubscriptionPayload
         */
        createPushSubscription(input) {
            return new CreatePushSubscriptionMutation(this._request).fetch(input);
        }
        /**
         * Deletes a push subscription.
         *
         * @param id - required id to pass to deletePushSubscription
         * @returns PushSubscriptionPayload
         */
        deletePushSubscription(id) {
            return new DeletePushSubscriptionMutation(this._request).fetch(id);
        }
        /**
         * Creates a new reaction.
         *
         * @param input - required input to pass to createReaction
         * @returns ReactionPayload
         */
        createReaction(input) {
            return new CreateReactionMutation(this._request).fetch(input);
        }
        /**
         * Deletes a reaction.
         *
         * @param id - required id to pass to deleteReaction
         * @returns DeletePayload
         */
        deleteReaction(id) {
            return new DeleteReactionMutation(this._request).fetch(id);
        }
        /**
         * Manually update Google Sheets data.
         *
         * @param id - required id to pass to refreshGoogleSheetsData
         * @param variables - variables without 'id' to pass into the RefreshGoogleSheetsDataMutation
         * @returns IntegrationPayload
         */
        refreshGoogleSheetsData(id, variables) {
            return new RefreshGoogleSheetsDataMutation(this._request).fetch(id, variables);
        }
        /**
         * Re-send an organization invite.
         *
         * @param id - required id to pass to resendOrganizationInvite
         * @returns DeletePayload
         */
        resendOrganizationInvite(id) {
            return new ResendOrganizationInviteMutation(this._request).fetch(id);
        }
        /**
         * Re-send an organization invite tied to an email address.
         *
         * @param email - required email to pass to resendOrganizationInviteByEmail
         * @returns DeletePayload
         */
        resendOrganizationInviteByEmail(email) {
            return new ResendOrganizationInviteByEmailMutation(this._request).fetch(email);
        }
        /**
         * Archives a roadmap.
         *
         * @param id - required id to pass to archiveRoadmap
         * @returns RoadmapArchivePayload
         */
        archiveRoadmap(id) {
            return new ArchiveRoadmapMutation(this._request).fetch(id);
        }
        /**
         * Creates a new roadmap.
         *
         * @param input - required input to pass to createRoadmap
         * @returns RoadmapPayload
         */
        createRoadmap(input) {
            return new CreateRoadmapMutation(this._request).fetch(input);
        }
        /**
         * Deletes a roadmap.
         *
         * @param id - required id to pass to deleteRoadmap
         * @returns DeletePayload
         */
        deleteRoadmap(id) {
            return new DeleteRoadmapMutation(this._request).fetch(id);
        }
        /**
         * Creates a new roadmapToProject join.
         *
         * @param input - required input to pass to createRoadmapToProject
         * @returns RoadmapToProjectPayload
         */
        createRoadmapToProject(input) {
            return new CreateRoadmapToProjectMutation(this._request).fetch(input);
        }
        /**
         * Deletes a roadmapToProject.
         *
         * @param id - required id to pass to deleteRoadmapToProject
         * @returns DeletePayload
         */
        deleteRoadmapToProject(id) {
            return new DeleteRoadmapToProjectMutation(this._request).fetch(id);
        }
        /**
         * Updates a roadmapToProject.
         *
         * @param id - required id to pass to updateRoadmapToProject
         * @param input - required input to pass to updateRoadmapToProject
         * @returns RoadmapToProjectPayload
         */
        updateRoadmapToProject(id, input) {
            return new UpdateRoadmapToProjectMutation(this._request).fetch(id, input);
        }
        /**
         * Unarchives a roadmap.
         *
         * @param id - required id to pass to unarchiveRoadmap
         * @returns RoadmapArchivePayload
         */
        unarchiveRoadmap(id) {
            return new UnarchiveRoadmapMutation(this._request).fetch(id);
        }
        /**
         * Updates a roadmap.
         *
         * @param id - required id to pass to updateRoadmap
         * @param input - required input to pass to updateRoadmap
         * @returns RoadmapPayload
         */
        updateRoadmap(id, input) {
            return new UpdateRoadmapMutation(this._request).fetch(id, input);
        }
        /**
         * Authenticates a user account via email and authentication token for SAML.
         *
         * @param input - required input to pass to samlTokenUserAccountAuth
         * @returns AuthResolverResponse
         */
        samlTokenUserAccountAuth(input) {
            return new SamlTokenUserAccountAuthMutation(this._request).fetch(input);
        }
        /**
         * Creates a new team. The user who creates the team will automatically be added as a member to the newly created team.
         *
         * @param input - required input to pass to createTeam
         * @param variables - variables without 'input' to pass into the CreateTeamMutation
         * @returns TeamPayload
         */
        createTeam(input, variables) {
            return new CreateTeamMutation(this._request).fetch(input, variables);
        }
        /**
         * Deletes team's cycles data
         *
         * @param id - required id to pass to deleteTeamCycles
         * @returns TeamPayload
         */
        deleteTeamCycles(id) {
            return new DeleteTeamCyclesMutation(this._request).fetch(id);
        }
        /**
         * Deletes a team.
         *
         * @param id - required id to pass to deleteTeam
         * @returns DeletePayload
         */
        deleteTeam(id) {
            return new DeleteTeamMutation(this._request).fetch(id);
        }
        /**
         * Deletes a previously used team key.
         *
         * @param id - required id to pass to deleteTeamKey
         * @returns DeletePayload
         */
        deleteTeamKey(id) {
            return new DeleteTeamKeyMutation(this._request).fetch(id);
        }
        /**
         * Creates a new team membership.
         *
         * @param input - required input to pass to createTeamMembership
         * @returns TeamMembershipPayload
         */
        createTeamMembership(input) {
            return new CreateTeamMembershipMutation(this._request).fetch(input);
        }
        /**
         * Deletes a team membership.
         *
         * @param id - required id to pass to deleteTeamMembership
         * @param variables - variables without 'id' to pass into the DeleteTeamMembershipMutation
         * @returns DeletePayload
         */
        deleteTeamMembership(id, variables) {
            return new DeleteTeamMembershipMutation(this._request).fetch(id, variables);
        }
        /**
         * Updates a team membership.
         *
         * @param id - required id to pass to updateTeamMembership
         * @param input - required input to pass to updateTeamMembership
         * @returns TeamMembershipPayload
         */
        updateTeamMembership(id, input) {
            return new UpdateTeamMembershipMutation(this._request).fetch(id, input);
        }
        /**
         * Unarchives a team and cancels deletion.
         *
         * @param id - required id to pass to unarchiveTeam
         * @returns TeamArchivePayload
         */
        unarchiveTeam(id) {
            return new UnarchiveTeamMutation(this._request).fetch(id);
        }
        /**
         * Updates a team.
         *
         * @param id - required id to pass to updateTeam
         * @param input - required input to pass to updateTeam
         * @param variables - variables without 'id', 'input' to pass into the UpdateTeamMutation
         * @returns TeamPayload
         */
        updateTeam(id, input, variables) {
            return new UpdateTeamMutation(this._request).fetch(id, input, variables);
        }
        /**
         * Creates a new template.
         *
         * @param input - required input to pass to createTemplate
         * @returns TemplatePayload
         */
        createTemplate(input) {
            return new CreateTemplateMutation(this._request).fetch(input);
        }
        /**
         * Deletes a template.
         *
         * @param id - required id to pass to deleteTemplate
         * @returns DeletePayload
         */
        deleteTemplate(id) {
            return new DeleteTemplateMutation(this._request).fetch(id);
        }
        /**
         * Updates an existing template.
         *
         * @param id - required id to pass to updateTemplate
         * @param input - required input to pass to updateTemplate
         * @returns TemplatePayload
         */
        updateTemplate(id, input) {
            return new UpdateTemplateMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new time schedule.
         *
         * @param input - required input to pass to createTimeSchedule
         * @returns TimeSchedulePayload
         */
        createTimeSchedule(input) {
            return new CreateTimeScheduleMutation(this._request).fetch(input);
        }
        /**
         * Deletes a time schedule.
         *
         * @param id - required id to pass to deleteTimeSchedule
         * @returns DeletePayload
         */
        deleteTimeSchedule(id) {
            return new DeleteTimeScheduleMutation(this._request).fetch(id);
        }
        /**
         * Refresh the integration schedule information.
         *
         * @param id - required id to pass to timeScheduleRefreshIntegrationSchedule
         * @returns TimeSchedulePayload
         */
        timeScheduleRefreshIntegrationSchedule(id) {
            return new TimeScheduleRefreshIntegrationScheduleMutation(this._request).fetch(id);
        }
        /**
         * Updates a time schedule.
         *
         * @param id - required id to pass to updateTimeSchedule
         * @param input - required input to pass to updateTimeSchedule
         * @returns TimeSchedulePayload
         */
        updateTimeSchedule(id, input) {
            return new UpdateTimeScheduleMutation(this._request).fetch(id, input);
        }
        /**
         * Upsert an external time schedule.
         *
         * @param externalId - required externalId to pass to timeScheduleUpsertExternal
         * @param input - required input to pass to timeScheduleUpsertExternal
         * @returns TimeSchedulePayload
         */
        timeScheduleUpsertExternal(externalId, input) {
            return new TimeScheduleUpsertExternalMutation(this._request).fetch(externalId, input);
        }
        /**
         * Creates a new triage responsibility.
         *
         * @param input - required input to pass to createTriageResponsibility
         * @returns TriageResponsibilityPayload
         */
        createTriageResponsibility(input) {
            return new CreateTriageResponsibilityMutation(this._request).fetch(input);
        }
        /**
         * Deletes a triage responsibility.
         *
         * @param id - required id to pass to deleteTriageResponsibility
         * @returns DeletePayload
         */
        deleteTriageResponsibility(id) {
            return new DeleteTriageResponsibilityMutation(this._request).fetch(id);
        }
        /**
         * Updates an existing triage responsibility.
         *
         * @param id - required id to pass to updateTriageResponsibility
         * @param input - required input to pass to updateTriageResponsibility
         * @returns TriageResponsibilityPayload
         */
        updateTriageResponsibility(id, input) {
            return new UpdateTriageResponsibilityMutation(this._request).fetch(id, input);
        }
        /**
         * Makes user a regular user. Can only be called by an admin.
         *
         * @param id - required id to pass to userDemoteAdmin
         * @returns UserAdminPayload
         */
        userDemoteAdmin(id) {
            return new UserDemoteAdminMutation(this._request).fetch(id);
        }
        /**
         * Makes user a guest. Can only be called by an admin.
         *
         * @param id - required id to pass to userDemoteMember
         * @returns UserAdminPayload
         */
        userDemoteMember(id) {
            return new UserDemoteMemberMutation(this._request).fetch(id);
        }
        /**
         * Connects the Discord user to this Linear account via OAuth2.
         *
         * @param code - required code to pass to userDiscordConnect
         * @param redirectUri - required redirectUri to pass to userDiscordConnect
         * @returns UserPayload
         */
        userDiscordConnect(code, redirectUri) {
            return new UserDiscordConnectMutation(this._request).fetch(code, redirectUri);
        }
        /**
         * Disconnects the external user from this Linear account.
         *
         * @param service - required service to pass to userExternalUserDisconnect
         * @returns UserPayload
         */
        userExternalUserDisconnect(service) {
            return new UserExternalUserDisconnectMutation(this._request).fetch(service);
        }
        /**
         * Updates a user's settings flag.
         *
         * @param flag - required flag to pass to updateUserFlag
         * @param operation - required operation to pass to updateUserFlag
         * @returns UserSettingsFlagPayload
         */
        updateUserFlag(flag, operation) {
            return new UpdateUserFlagMutation(this._request).fetch(flag, operation);
        }
        /**
         * Makes user an admin. Can only be called by an admin.
         *
         * @param id - required id to pass to userPromoteAdmin
         * @returns UserAdminPayload
         */
        userPromoteAdmin(id) {
            return new UserPromoteAdminMutation(this._request).fetch(id);
        }
        /**
         * Makes user a regular user. Can only be called by an admin.
         *
         * @param id - required id to pass to userPromoteMember
         * @returns UserAdminPayload
         */
        userPromoteMember(id) {
            return new UserPromoteMemberMutation(this._request).fetch(id);
        }
        /**
         * Resets user's setting flags.
         *
         * @param variables - variables to pass into the UserSettingsFlagsResetMutation
         * @returns UserSettingsFlagsResetPayload
         */
        userSettingsFlagsReset(variables) {
            return new UserSettingsFlagsResetMutation(this._request).fetch(variables);
        }
        /**
         * Updates the user's settings.
         *
         * @param id - required id to pass to updateUserSettings
         * @param input - required input to pass to updateUserSettings
         * @returns UserSettingsPayload
         */
        updateUserSettings(id, input) {
            return new UpdateUserSettingsMutation(this._request).fetch(id, input);
        }
        /**
         * Suspends a user. Can only be called by an admin.
         *
         * @param id - required id to pass to suspendUser
         * @returns UserAdminPayload
         */
        suspendUser(id) {
            return new SuspendUserMutation(this._request).fetch(id);
        }
        /**
         * Unlinks a guest user from their identity provider. Can only be called by an admin when SCIM is enabled.
         *
         * @param id - required id to pass to userUnlinkFromIdentityProvider
         * @returns UserAdminPayload
         */
        userUnlinkFromIdentityProvider(id) {
            return new UserUnlinkFromIdentityProviderMutation(this._request).fetch(id);
        }
        /**
         * Un-suspends a user. Can only be called by an admin.
         *
         * @param id - required id to pass to unsuspendUser
         * @returns UserAdminPayload
         */
        unsuspendUser(id) {
            return new UnsuspendUserMutation(this._request).fetch(id);
        }
        /**
         * Updates a user. Only available to organization admins and the user themselves.
         *
         * @param id - required id to pass to updateUser
         * @param input - required input to pass to updateUser
         * @returns UserPayload
         */
        updateUser(id, input) {
            return new UpdateUserMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new ViewPreferences object.
         *
         * @param input - required input to pass to createViewPreferences
         * @returns ViewPreferencesPayload
         */
        createViewPreferences(input) {
            return new CreateViewPreferencesMutation(this._request).fetch(input);
        }
        /**
         * Deletes a ViewPreferences.
         *
         * @param id - required id to pass to deleteViewPreferences
         * @returns DeletePayload
         */
        deleteViewPreferences(id) {
            return new DeleteViewPreferencesMutation(this._request).fetch(id);
        }
        /**
         * Updates an existing ViewPreferences object.
         *
         * @param id - required id to pass to updateViewPreferences
         * @param input - required input to pass to updateViewPreferences
         * @returns ViewPreferencesPayload
         */
        updateViewPreferences(id, input) {
            return new UpdateViewPreferencesMutation(this._request).fetch(id, input);
        }
        /**
         * Creates a new webhook.
         *
         * @param input - required input to pass to createWebhook
         * @returns WebhookPayload
         */
        createWebhook(input) {
            return new CreateWebhookMutation(this._request).fetch(input);
        }
        /**
         * Deletes a Webhook.
         *
         * @param id - required id to pass to deleteWebhook
         * @returns DeletePayload
         */
        deleteWebhook(id) {
            return new DeleteWebhookMutation(this._request).fetch(id);
        }
        /**
         * Updates an existing Webhook.
         *
         * @param id - required id to pass to updateWebhook
         * @param input - required input to pass to updateWebhook
         * @returns WebhookPayload
         */
        updateWebhook(id, input) {
            return new UpdateWebhookMutation(this._request).fetch(id, input);
        }
        /**
         * Archives a state. Only states with issues that have all been archived can be archived.
         *
         * @param id - required id to pass to archiveWorkflowState
         * @returns WorkflowStateArchivePayload
         */
        archiveWorkflowState(id) {
            return new ArchiveWorkflowStateMutation(this._request).fetch(id);
        }
        /**
         * Creates a new state, adding it to the workflow of a team.
         *
         * @param input - required input to pass to createWorkflowState
         * @returns WorkflowStatePayload
         */
        createWorkflowState(input) {
            return new CreateWorkflowStateMutation(this._request).fetch(input);
        }
        /**
         * Updates a state.
         *
         * @param id - required id to pass to updateWorkflowState
         * @param input - required input to pass to updateWorkflowState
         * @returns WorkflowStatePayload
         */
        updateWorkflowState(id, input) {
            return new UpdateWorkflowStateMutation(this._request).fetch(id, input);
        }
    }

    /**
     * Validate and return default LinearGraphQLClient options
     *
     * @param options initial request options to pass to the graphql client
     * @returns parsed graphql client options
     */
    function parseClientOptions(_a) {
        var _b, _c;
        var { apiKey, accessToken, apiUrl, headers } = _a, opts = __rest(_a, ["apiKey", "accessToken", "apiUrl", "headers"]);
        if (!accessToken && !apiKey) {
            throw new Error("No accessToken or apiKey provided to the LinearClient - create one here: https://linear.app/settings/account/security");
        }
        return Object.assign({ headers: Object.assign(Object.assign({ 
                /** Use bearer if oauth token exists, otherwise use the provided apiKey */
                Authorization: accessToken
                    ? accessToken.startsWith("Bearer ")
                        ? accessToken
                        : `Bearer ${accessToken}`
                    : (apiKey !== null && apiKey !== void 0 ? apiKey : "") }, headers), { 
                /** Override any user agent with the sdk name and version */
                "User-Agent": serializeUserAgent({
                    [(_b = process.env.npm_package_name) !== null && _b !== void 0 ? _b : "@linear/sdk"]: (_c = process.env.npm_package_version) !== null && _c !== void 0 ? _c : "unknown",
                }) }), 
            /** Default to production linear api */
            apiUrl: apiUrl !== null && apiUrl !== void 0 ? apiUrl : "https://api.linear.app/graphql" }, opts);
    }
    /**
     * Create a Linear API client
     *
     * @param options request options to pass to the LinearGraphQLClient
     */
    class LinearClient extends LinearSdk {
        constructor(options) {
            const parsedOptions = parseClientOptions(options);
            const graphQLClient = new LinearGraphQLClient(parsedOptions.apiUrl, parsedOptions);
            super((doc, vars) => 
            /** Call the LinearGraphQLClient */
            this.client.request(doc, vars).catch(error => {
                /** Catch and wrap errors from the LinearGraphQLClient */
                throw parseLinearError(error);
            }));
            this.options = parsedOptions;
            this.client = graphQLClient;
        }
    }

    exports.ActorBot = ActorBot;
    exports.AdministrableTeamsQuery = AdministrableTeamsQuery;
    exports.AgentActivitiesQuery = AgentActivitiesQuery;
    exports.AgentActivity = AgentActivity;
    exports.AgentActivityActionContent = AgentActivityActionContent;
    exports.AgentActivityConnection = AgentActivityConnection;
    exports.AgentActivityElicitationContent = AgentActivityElicitationContent;
    exports.AgentActivityErrorContent = AgentActivityErrorContent;
    exports.AgentActivityPayload = AgentActivityPayload;
    exports.AgentActivityPromptContent = AgentActivityPromptContent;
    exports.AgentActivityQuery = AgentActivityQuery;
    exports.AgentActivityResponseContent = AgentActivityResponseContent;
    exports.AgentActivityThoughtContent = AgentActivityThoughtContent;
    exports.AgentActivityWebhookPayload = AgentActivityWebhookPayload;
    exports.AgentSession = AgentSession;
    exports.AgentSessionConnection = AgentSessionConnection;
    exports.AgentSessionCreateOnCommentMutation = AgentSessionCreateOnCommentMutation;
    exports.AgentSessionCreateOnIssueMutation = AgentSessionCreateOnIssueMutation;
    exports.AgentSessionEventWebhookPayload = AgentSessionEventWebhookPayload;
    exports.AgentSessionPayload = AgentSessionPayload;
    exports.AgentSessionQuery = AgentSessionQuery;
    exports.AgentSessionUpdateExternalUrlMutation = AgentSessionUpdateExternalUrlMutation;
    exports.AgentSessionWebhookPayload = AgentSessionWebhookPayload;
    exports.AgentSession_ActivitiesQuery = AgentSession_ActivitiesQuery;
    exports.AgentSessionsQuery = AgentSessionsQuery;
    exports.AirbyteIntegrationConnectMutation = AirbyteIntegrationConnectMutation;
    exports.ApiKey = ApiKey;
    exports.ApiKeyConnection = ApiKeyConnection;
    exports.ApiKeyPayload = ApiKeyPayload;
    exports.ApiKeysQuery = ApiKeysQuery;
    exports.AppUserNotificationWebhookPayload = AppUserNotificationWebhookPayload;
    exports.AppUserTeamAccessChangedWebhookPayload = AppUserTeamAccessChangedWebhookPayload;
    exports.Application = Application;
    exports.ApplicationInfoQuery = ApplicationInfoQuery;
    exports.ApplicationWithAuthorizationQuery = ApplicationWithAuthorizationQuery;
    exports.ArchiveCustomerNeedMutation = ArchiveCustomerNeedMutation;
    exports.ArchiveCycleMutation = ArchiveCycleMutation;
    exports.ArchiveInitiativeMutation = ArchiveInitiativeMutation;
    exports.ArchiveInitiativeUpdateMutation = ArchiveInitiativeUpdateMutation;
    exports.ArchiveIntegrationMutation = ArchiveIntegrationMutation;
    exports.ArchiveIssueMutation = ArchiveIssueMutation;
    exports.ArchiveNotificationMutation = ArchiveNotificationMutation;
    exports.ArchivePayload = ArchivePayload;
    exports.ArchiveProjectMutation = ArchiveProjectMutation;
    exports.ArchiveProjectStatusMutation = ArchiveProjectStatusMutation;
    exports.ArchiveProjectUpdateMutation = ArchiveProjectUpdateMutation;
    exports.ArchiveResponse = ArchiveResponse;
    exports.ArchiveRoadmapMutation = ArchiveRoadmapMutation;
    exports.ArchiveWorkflowStateMutation = ArchiveWorkflowStateMutation;
    exports.AsksChannelConnectPayload = AsksChannelConnectPayload;
    exports.Attachment = Attachment;
    exports.AttachmentConnection = AttachmentConnection;
    exports.AttachmentIssueQuery = AttachmentIssueQuery;
    exports.AttachmentIssue_AttachmentsQuery = AttachmentIssue_AttachmentsQuery;
    exports.AttachmentIssue_BotActorQuery = AttachmentIssue_BotActorQuery;
    exports.AttachmentIssue_ChildrenQuery = AttachmentIssue_ChildrenQuery;
    exports.AttachmentIssue_CommentsQuery = AttachmentIssue_CommentsQuery;
    exports.AttachmentIssue_FormerAttachmentsQuery = AttachmentIssue_FormerAttachmentsQuery;
    exports.AttachmentIssue_FormerNeedsQuery = AttachmentIssue_FormerNeedsQuery;
    exports.AttachmentIssue_HistoryQuery = AttachmentIssue_HistoryQuery;
    exports.AttachmentIssue_InverseRelationsQuery = AttachmentIssue_InverseRelationsQuery;
    exports.AttachmentIssue_LabelsQuery = AttachmentIssue_LabelsQuery;
    exports.AttachmentIssue_NeedsQuery = AttachmentIssue_NeedsQuery;
    exports.AttachmentIssue_RelationsQuery = AttachmentIssue_RelationsQuery;
    exports.AttachmentIssue_SubscribersQuery = AttachmentIssue_SubscribersQuery;
    exports.AttachmentLinkDiscordMutation = AttachmentLinkDiscordMutation;
    exports.AttachmentLinkFrontMutation = AttachmentLinkFrontMutation;
    exports.AttachmentLinkGitHubIssueMutation = AttachmentLinkGitHubIssueMutation;
    exports.AttachmentLinkGitHubPrMutation = AttachmentLinkGitHubPrMutation;
    exports.AttachmentLinkGitLabMrMutation = AttachmentLinkGitLabMrMutation;
    exports.AttachmentLinkIntercomMutation = AttachmentLinkIntercomMutation;
    exports.AttachmentLinkJiraIssueMutation = AttachmentLinkJiraIssueMutation;
    exports.AttachmentLinkSalesforceMutation = AttachmentLinkSalesforceMutation;
    exports.AttachmentLinkSlackMutation = AttachmentLinkSlackMutation;
    exports.AttachmentLinkUrlMutation = AttachmentLinkUrlMutation;
    exports.AttachmentLinkZendeskMutation = AttachmentLinkZendeskMutation;
    exports.AttachmentPayload = AttachmentPayload;
    exports.AttachmentQuery = AttachmentQuery;
    exports.AttachmentSourcesPayload = AttachmentSourcesPayload;
    exports.AttachmentSyncToSlackMutation = AttachmentSyncToSlackMutation;
    exports.AttachmentWebhookPayload = AttachmentWebhookPayload;
    exports.AttachmentsForUrlQuery = AttachmentsForUrlQuery;
    exports.AttachmentsQuery = AttachmentsQuery;
    exports.AuditEntriesQuery = AuditEntriesQuery;
    exports.AuditEntry = AuditEntry;
    exports.AuditEntryConnection = AuditEntryConnection;
    exports.AuditEntryType = AuditEntryType;
    exports.AuditEntryTypesQuery = AuditEntryTypesQuery;
    exports.AuditEntryWebhookPayload = AuditEntryWebhookPayload;
    exports.AuthIdentityProvider = AuthIdentityProvider;
    exports.AuthOrganization = AuthOrganization;
    exports.AuthResolverResponse = AuthResolverResponse;
    exports.AuthUser = AuthUser;
    exports.AuthenticationLinearError = AuthenticationLinearError;
    exports.AuthenticationSessionResponse = AuthenticationSessionResponse;
    exports.AuthenticationSessionsQuery = AuthenticationSessionsQuery;
    exports.AuthorizingUser = AuthorizingUser;
    exports.AvailableUsersQuery = AvailableUsersQuery;
    exports.BaseWebhookPayload = BaseWebhookPayload;
    exports.BootstrapLinearError = BootstrapLinearError;
    exports.Comment = Comment;
    exports.CommentChildWebhookPayload = CommentChildWebhookPayload;
    exports.CommentConnection = CommentConnection;
    exports.CommentPayload = CommentPayload;
    exports.CommentQuery = CommentQuery;
    exports.CommentResolveMutation = CommentResolveMutation;
    exports.CommentUnresolveMutation = CommentUnresolveMutation;
    exports.CommentWebhookPayload = CommentWebhookPayload;
    exports.Comment_BotActorQuery = Comment_BotActorQuery;
    exports.Comment_ChildrenQuery = Comment_ChildrenQuery;
    exports.Comment_DocumentContentQuery = Comment_DocumentContentQuery;
    exports.Comment_ExternalThreadQuery = Comment_ExternalThreadQuery;
    exports.CommentsQuery = CommentsQuery;
    exports.Connection = Connection;
    exports.ContactPayload = ContactPayload;
    exports.CreateAgentActivityMutation = CreateAgentActivityMutation;
    exports.CreateAttachmentMutation = CreateAttachmentMutation;
    exports.CreateCommentMutation = CreateCommentMutation;
    exports.CreateContactMutation = CreateContactMutation;
    exports.CreateCsvExportReportMutation = CreateCsvExportReportMutation;
    exports.CreateCsvExportReportPayload = CreateCsvExportReportPayload;
    exports.CreateCustomViewMutation = CreateCustomViewMutation;
    exports.CreateCustomerMutation = CreateCustomerMutation;
    exports.CreateCustomerNeedMutation = CreateCustomerNeedMutation;
    exports.CreateCustomerStatusMutation = CreateCustomerStatusMutation;
    exports.CreateCustomerTierMutation = CreateCustomerTierMutation;
    exports.CreateCycleMutation = CreateCycleMutation;
    exports.CreateDocumentMutation = CreateDocumentMutation;
    exports.CreateEmailIntakeAddressMutation = CreateEmailIntakeAddressMutation;
    exports.CreateEmojiMutation = CreateEmojiMutation;
    exports.CreateEntityExternalLinkMutation = CreateEntityExternalLinkMutation;
    exports.CreateFavoriteMutation = CreateFavoriteMutation;
    exports.CreateGitAutomationStateMutation = CreateGitAutomationStateMutation;
    exports.CreateGitAutomationTargetBranchMutation = CreateGitAutomationTargetBranchMutation;
    exports.CreateInitiativeMutation = CreateInitiativeMutation;
    exports.CreateInitiativeRelationMutation = CreateInitiativeRelationMutation;
    exports.CreateInitiativeToProjectMutation = CreateInitiativeToProjectMutation;
    exports.CreateInitiativeUpdateMutation = CreateInitiativeUpdateMutation;
    exports.CreateInitiativeUpdateReminderMutation = CreateInitiativeUpdateReminderMutation;
    exports.CreateIntegrationGithubCommitMutation = CreateIntegrationGithubCommitMutation;
    exports.CreateIntegrationTemplateMutation = CreateIntegrationTemplateMutation;
    exports.CreateIntegrationsSettingsMutation = CreateIntegrationsSettingsMutation;
    exports.CreateIssueBatchMutation = CreateIssueBatchMutation;
    exports.CreateIssueLabelMutation = CreateIssueLabelMutation;
    exports.CreateIssueMutation = CreateIssueMutation;
    exports.CreateIssueRelationMutation = CreateIssueRelationMutation;
    exports.CreateNotificationSubscriptionMutation = CreateNotificationSubscriptionMutation;
    exports.CreateOrJoinOrganizationResponse = CreateOrJoinOrganizationResponse;
    exports.CreateOrganizationFromOnboardingMutation = CreateOrganizationFromOnboardingMutation;
    exports.CreateOrganizationInviteMutation = CreateOrganizationInviteMutation;
    exports.CreateProjectLabelMutation = CreateProjectLabelMutation;
    exports.CreateProjectMilestoneMutation = CreateProjectMilestoneMutation;
    exports.CreateProjectMutation = CreateProjectMutation;
    exports.CreateProjectRelationMutation = CreateProjectRelationMutation;
    exports.CreateProjectStatusMutation = CreateProjectStatusMutation;
    exports.CreateProjectUpdateMutation = CreateProjectUpdateMutation;
    exports.CreateProjectUpdateReminderMutation = CreateProjectUpdateReminderMutation;
    exports.CreatePushSubscriptionMutation = CreatePushSubscriptionMutation;
    exports.CreateReactionMutation = CreateReactionMutation;
    exports.CreateRoadmapMutation = CreateRoadmapMutation;
    exports.CreateRoadmapToProjectMutation = CreateRoadmapToProjectMutation;
    exports.CreateTeamMembershipMutation = CreateTeamMembershipMutation;
    exports.CreateTeamMutation = CreateTeamMutation;
    exports.CreateTemplateMutation = CreateTemplateMutation;
    exports.CreateTimeScheduleMutation = CreateTimeScheduleMutation;
    exports.CreateTriageResponsibilityMutation = CreateTriageResponsibilityMutation;
    exports.CreateViewPreferencesMutation = CreateViewPreferencesMutation;
    exports.CreateWebhookMutation = CreateWebhookMutation;
    exports.CreateWorkflowStateMutation = CreateWorkflowStateMutation;
    exports.CustomResourceWebhookPayload = CustomResourceWebhookPayload;
    exports.CustomView = CustomView;
    exports.CustomViewConnection = CustomViewConnection;
    exports.CustomViewHasSubscribersPayload = CustomViewHasSubscribersPayload;
    exports.CustomViewHasSubscribersQuery = CustomViewHasSubscribersQuery;
    exports.CustomViewNotificationSubscription = CustomViewNotificationSubscription;
    exports.CustomViewPayload = CustomViewPayload;
    exports.CustomViewQuery = CustomViewQuery;
    exports.CustomViewSuggestionPayload = CustomViewSuggestionPayload;
    exports.CustomView_InitiativesQuery = CustomView_InitiativesQuery;
    exports.CustomView_IssuesQuery = CustomView_IssuesQuery;
    exports.CustomView_OrganizationViewPreferencesQuery = CustomView_OrganizationViewPreferencesQuery;
    exports.CustomView_OrganizationViewPreferences_PreferencesQuery = CustomView_OrganizationViewPreferences_PreferencesQuery;
    exports.CustomView_ProjectsQuery = CustomView_ProjectsQuery;
    exports.CustomView_UserViewPreferencesQuery = CustomView_UserViewPreferencesQuery;
    exports.CustomView_UserViewPreferences_PreferencesQuery = CustomView_UserViewPreferences_PreferencesQuery;
    exports.CustomView_ViewPreferencesValuesQuery = CustomView_ViewPreferencesValuesQuery;
    exports.CustomViewsQuery = CustomViewsQuery;
    exports.Customer = Customer;
    exports.CustomerChildWebhookPayload = CustomerChildWebhookPayload;
    exports.CustomerConnection = CustomerConnection;
    exports.CustomerMergeMutation = CustomerMergeMutation;
    exports.CustomerNeed = CustomerNeed;
    exports.CustomerNeedArchivePayload = CustomerNeedArchivePayload;
    exports.CustomerNeedChildWebhookPayload = CustomerNeedChildWebhookPayload;
    exports.CustomerNeedConnection = CustomerNeedConnection;
    exports.CustomerNeedCreateFromAttachmentMutation = CustomerNeedCreateFromAttachmentMutation;
    exports.CustomerNeedNotification = CustomerNeedNotification;
    exports.CustomerNeedPayload = CustomerNeedPayload;
    exports.CustomerNeedQuery = CustomerNeedQuery;
    exports.CustomerNeedUpdatePayload = CustomerNeedUpdatePayload;
    exports.CustomerNeedWebhookPayload = CustomerNeedWebhookPayload;
    exports.CustomerNeed_ProjectAttachmentQuery = CustomerNeed_ProjectAttachmentQuery;
    exports.CustomerNeedsQuery = CustomerNeedsQuery;
    exports.CustomerNotification = CustomerNotification;
    exports.CustomerNotificationSubscription = CustomerNotificationSubscription;
    exports.CustomerPayload = CustomerPayload;
    exports.CustomerQuery = CustomerQuery;
    exports.CustomerStatus = CustomerStatus;
    exports.CustomerStatusChildWebhookPayload = CustomerStatusChildWebhookPayload;
    exports.CustomerStatusConnection = CustomerStatusConnection;
    exports.CustomerStatusPayload = CustomerStatusPayload;
    exports.CustomerStatusQuery = CustomerStatusQuery;
    exports.CustomerStatusesQuery = CustomerStatusesQuery;
    exports.CustomerTier = CustomerTier;
    exports.CustomerTierChildWebhookPayload = CustomerTierChildWebhookPayload;
    exports.CustomerTierConnection = CustomerTierConnection;
    exports.CustomerTierPayload = CustomerTierPayload;
    exports.CustomerTierQuery = CustomerTierQuery;
    exports.CustomerTiersQuery = CustomerTiersQuery;
    exports.CustomerUpsertMutation = CustomerUpsertMutation;
    exports.CustomerWebhookPayload = CustomerWebhookPayload;
    exports.CustomersQuery = CustomersQuery;
    exports.Cycle = Cycle;
    exports.CycleArchivePayload = CycleArchivePayload;
    exports.CycleChildWebhookPayload = CycleChildWebhookPayload;
    exports.CycleConnection = CycleConnection;
    exports.CycleNotificationSubscription = CycleNotificationSubscription;
    exports.CyclePayload = CyclePayload;
    exports.CycleQuery = CycleQuery;
    exports.CycleShiftAllMutation = CycleShiftAllMutation;
    exports.CycleStartUpcomingCycleTodayMutation = CycleStartUpcomingCycleTodayMutation;
    exports.CycleWebhookPayload = CycleWebhookPayload;
    exports.Cycle_IssuesQuery = Cycle_IssuesQuery;
    exports.Cycle_UncompletedIssuesUponCloseQuery = Cycle_UncompletedIssuesUponCloseQuery;
    exports.CyclesQuery = CyclesQuery;
    exports.DeleteAttachmentMutation = DeleteAttachmentMutation;
    exports.DeleteCommentMutation = DeleteCommentMutation;
    exports.DeleteCustomViewMutation = DeleteCustomViewMutation;
    exports.DeleteCustomerMutation = DeleteCustomerMutation;
    exports.DeleteCustomerNeedMutation = DeleteCustomerNeedMutation;
    exports.DeleteCustomerStatusMutation = DeleteCustomerStatusMutation;
    exports.DeleteCustomerTierMutation = DeleteCustomerTierMutation;
    exports.DeleteDocumentMutation = DeleteDocumentMutation;
    exports.DeleteEmailIntakeAddressMutation = DeleteEmailIntakeAddressMutation;
    exports.DeleteEmojiMutation = DeleteEmojiMutation;
    exports.DeleteEntityExternalLinkMutation = DeleteEntityExternalLinkMutation;
    exports.DeleteFavoriteMutation = DeleteFavoriteMutation;
    exports.DeleteGitAutomationStateMutation = DeleteGitAutomationStateMutation;
    exports.DeleteGitAutomationTargetBranchMutation = DeleteGitAutomationTargetBranchMutation;
    exports.DeleteInitiativeMutation = DeleteInitiativeMutation;
    exports.DeleteInitiativeRelationMutation = DeleteInitiativeRelationMutation;
    exports.DeleteInitiativeToProjectMutation = DeleteInitiativeToProjectMutation;
    exports.DeleteIntegrationIntercomMutation = DeleteIntegrationIntercomMutation;
    exports.DeleteIntegrationMutation = DeleteIntegrationMutation;
    exports.DeleteIntegrationTemplateMutation = DeleteIntegrationTemplateMutation;
    exports.DeleteIssueImportMutation = DeleteIssueImportMutation;
    exports.DeleteIssueLabelMutation = DeleteIssueLabelMutation;
    exports.DeleteIssueMutation = DeleteIssueMutation;
    exports.DeleteIssueRelationMutation = DeleteIssueRelationMutation;
    exports.DeleteNotificationSubscriptionMutation = DeleteNotificationSubscriptionMutation;
    exports.DeleteOrganizationCancelMutation = DeleteOrganizationCancelMutation;
    exports.DeleteOrganizationDomainMutation = DeleteOrganizationDomainMutation;
    exports.DeleteOrganizationInviteMutation = DeleteOrganizationInviteMutation;
    exports.DeleteOrganizationMutation = DeleteOrganizationMutation;
    exports.DeletePayload = DeletePayload;
    exports.DeleteProjectLabelMutation = DeleteProjectLabelMutation;
    exports.DeleteProjectMilestoneMutation = DeleteProjectMilestoneMutation;
    exports.DeleteProjectMutation = DeleteProjectMutation;
    exports.DeleteProjectRelationMutation = DeleteProjectRelationMutation;
    exports.DeleteProjectUpdateMutation = DeleteProjectUpdateMutation;
    exports.DeletePushSubscriptionMutation = DeletePushSubscriptionMutation;
    exports.DeleteReactionMutation = DeleteReactionMutation;
    exports.DeleteRoadmapMutation = DeleteRoadmapMutation;
    exports.DeleteRoadmapToProjectMutation = DeleteRoadmapToProjectMutation;
    exports.DeleteTeamCyclesMutation = DeleteTeamCyclesMutation;
    exports.DeleteTeamKeyMutation = DeleteTeamKeyMutation;
    exports.DeleteTeamMembershipMutation = DeleteTeamMembershipMutation;
    exports.DeleteTeamMutation = DeleteTeamMutation;
    exports.DeleteTemplateMutation = DeleteTemplateMutation;
    exports.DeleteTimeScheduleMutation = DeleteTimeScheduleMutation;
    exports.DeleteTriageResponsibilityMutation = DeleteTriageResponsibilityMutation;
    exports.DeleteViewPreferencesMutation = DeleteViewPreferencesMutation;
    exports.DeleteWebhookMutation = DeleteWebhookMutation;
    exports.Document = Document;
    exports.DocumentArchivePayload = DocumentArchivePayload;
    exports.DocumentChildWebhookPayload = DocumentChildWebhookPayload;
    exports.DocumentConnection = DocumentConnection;
    exports.DocumentContent = DocumentContent;
    exports.DocumentContentChildWebhookPayload = DocumentContentChildWebhookPayload;
    exports.DocumentContentHistoryPayload = DocumentContentHistoryPayload;
    exports.DocumentContentHistoryQuery = DocumentContentHistoryQuery;
    exports.DocumentContentHistoryType = DocumentContentHistoryType;
    exports.DocumentNotification = DocumentNotification;
    exports.DocumentPayload = DocumentPayload;
    exports.DocumentQuery = DocumentQuery;
    exports.DocumentSearchPayload = DocumentSearchPayload;
    exports.DocumentSearchResult = DocumentSearchResult;
    exports.DocumentWebhookPayload = DocumentWebhookPayload;
    exports.Document_CommentsQuery = Document_CommentsQuery;
    exports.DocumentsQuery = DocumentsQuery;
    exports.Draft = Draft;
    exports.DraftConnection = DraftConnection;
    exports.EmailIntakeAddress = EmailIntakeAddress;
    exports.EmailIntakeAddressPayload = EmailIntakeAddressPayload;
    exports.EmailIntakeAddressQuery = EmailIntakeAddressQuery;
    exports.EmailIntakeAddressRotateMutation = EmailIntakeAddressRotateMutation;
    exports.EmailIntakeAddress_SesDomainIdentityQuery = EmailIntakeAddress_SesDomainIdentityQuery;
    exports.EmailTokenUserAccountAuthMutation = EmailTokenUserAccountAuthMutation;
    exports.EmailUnsubscribeMutation = EmailUnsubscribeMutation;
    exports.EmailUnsubscribePayload = EmailUnsubscribePayload;
    exports.EmailUserAccountAuthChallengeMutation = EmailUserAccountAuthChallengeMutation;
    exports.EmailUserAccountAuthChallengeResponse = EmailUserAccountAuthChallengeResponse;
    exports.Emoji = Emoji;
    exports.EmojiConnection = EmojiConnection;
    exports.EmojiPayload = EmojiPayload;
    exports.EmojiQuery = EmojiQuery;
    exports.EmojisQuery = EmojisQuery;
    exports.Entity = Entity;
    exports.EntityExternalLink = EntityExternalLink;
    exports.EntityExternalLinkConnection = EntityExternalLinkConnection;
    exports.EntityExternalLinkPayload = EntityExternalLinkPayload;
    exports.EntityExternalLinkQuery = EntityExternalLinkQuery;
    exports.EntityWebhookPayload = EntityWebhookPayload;
    exports.ExternalEntityInfo = ExternalEntityInfo;
    exports.ExternalEntityInfoGithubMetadata = ExternalEntityInfoGithubMetadata;
    exports.ExternalEntityInfoJiraMetadata = ExternalEntityInfoJiraMetadata;
    exports.ExternalEntitySlackMetadata = ExternalEntitySlackMetadata;
    exports.ExternalUser = ExternalUser;
    exports.ExternalUserChildWebhookPayload = ExternalUserChildWebhookPayload;
    exports.ExternalUserConnection = ExternalUserConnection;
    exports.ExternalUserQuery = ExternalUserQuery;
    exports.ExternalUsersQuery = ExternalUsersQuery;
    exports.Facet = Facet;
    exports.Favorite = Favorite;
    exports.FavoriteConnection = FavoriteConnection;
    exports.FavoritePayload = FavoritePayload;
    exports.FavoriteQuery = FavoriteQuery;
    exports.Favorite_ChildrenQuery = Favorite_ChildrenQuery;
    exports.FavoritesQuery = FavoritesQuery;
    exports.FeatureNotAccessibleLinearError = FeatureNotAccessibleLinearError;
    exports.FetchDataPayload = FetchDataPayload;
    exports.FileUploadDeletePayload = FileUploadDeletePayload;
    exports.FileUploadMutation = FileUploadMutation;
    exports.ForbiddenLinearError = ForbiddenLinearError;
    exports.FrontAttachmentPayload = FrontAttachmentPayload;
    exports.GitAutomationState = GitAutomationState;
    exports.GitAutomationStateConnection = GitAutomationStateConnection;
    exports.GitAutomationStatePayload = GitAutomationStatePayload;
    exports.GitAutomationTargetBranch = GitAutomationTargetBranch;
    exports.GitAutomationTargetBranchPayload = GitAutomationTargetBranchPayload;
    exports.GitHubCommitIntegrationPayload = GitHubCommitIntegrationPayload;
    exports.GitHubEnterpriseServerInstallVerificationPayload = GitHubEnterpriseServerInstallVerificationPayload;
    exports.GitHubEnterpriseServerPayload = GitHubEnterpriseServerPayload;
    exports.GitLabIntegrationCreatePayload = GitLabIntegrationCreatePayload;
    exports.GoogleUserAccountAuthMutation = GoogleUserAccountAuthMutation;
    exports.GraphQLClientError = GraphQLClientError;
    exports.GraphqlLinearError = GraphqlLinearError;
    exports.GuidanceRuleWebhookPayload = GuidanceRuleWebhookPayload;
    exports.IdentityProvider = IdentityProvider;
    exports.ImageUploadFromUrlMutation = ImageUploadFromUrlMutation;
    exports.ImageUploadFromUrlPayload = ImageUploadFromUrlPayload;
    exports.ImportFileUploadMutation = ImportFileUploadMutation;
    exports.Initiative = Initiative;
    exports.InitiativeArchivePayload = InitiativeArchivePayload;
    exports.InitiativeChildWebhookPayload = InitiativeChildWebhookPayload;
    exports.InitiativeConnection = InitiativeConnection;
    exports.InitiativeHistory = InitiativeHistory;
    exports.InitiativeHistoryConnection = InitiativeHistoryConnection;
    exports.InitiativeNotification = InitiativeNotification;
    exports.InitiativeNotificationSubscription = InitiativeNotificationSubscription;
    exports.InitiativePayload = InitiativePayload;
    exports.InitiativeQuery = InitiativeQuery;
    exports.InitiativeRelation = InitiativeRelation;
    exports.InitiativeRelationConnection = InitiativeRelationConnection;
    exports.InitiativeRelationPayload = InitiativeRelationPayload;
    exports.InitiativeRelationQuery = InitiativeRelationQuery;
    exports.InitiativeRelationsQuery = InitiativeRelationsQuery;
    exports.InitiativeToProject = InitiativeToProject;
    exports.InitiativeToProjectConnection = InitiativeToProjectConnection;
    exports.InitiativeToProjectPayload = InitiativeToProjectPayload;
    exports.InitiativeToProjectQuery = InitiativeToProjectQuery;
    exports.InitiativeToProjectsQuery = InitiativeToProjectsQuery;
    exports.InitiativeUpdate = InitiativeUpdate;
    exports.InitiativeUpdateArchivePayload = InitiativeUpdateArchivePayload;
    exports.InitiativeUpdateChildWebhookPayload = InitiativeUpdateChildWebhookPayload;
    exports.InitiativeUpdateConnection = InitiativeUpdateConnection;
    exports.InitiativeUpdatePayload = InitiativeUpdatePayload;
    exports.InitiativeUpdateQuery = InitiativeUpdateQuery;
    exports.InitiativeUpdateReminderPayload = InitiativeUpdateReminderPayload;
    exports.InitiativeUpdateWebhookPayload = InitiativeUpdateWebhookPayload;
    exports.InitiativeUpdate_CommentsQuery = InitiativeUpdate_CommentsQuery;
    exports.InitiativeUpdatesQuery = InitiativeUpdatesQuery;
    exports.InitiativeWebhookPayload = InitiativeWebhookPayload;
    exports.Initiative_DocumentContentQuery = Initiative_DocumentContentQuery;
    exports.Initiative_DocumentsQuery = Initiative_DocumentsQuery;
    exports.Initiative_HistoryQuery = Initiative_HistoryQuery;
    exports.Initiative_LinksQuery = Initiative_LinksQuery;
    exports.Initiative_ProjectsQuery = Initiative_ProjectsQuery;
    exports.Initiative_SubInitiativesQuery = Initiative_SubInitiativesQuery;
    exports.InitiativesQuery = InitiativesQuery;
    exports.Integration = Integration;
    exports.IntegrationActorWebhookPayload = IntegrationActorWebhookPayload;
    exports.IntegrationAsksConnectChannelMutation = IntegrationAsksConnectChannelMutation;
    exports.IntegrationChildWebhookPayload = IntegrationChildWebhookPayload;
    exports.IntegrationConnection = IntegrationConnection;
    exports.IntegrationDiscordMutation = IntegrationDiscordMutation;
    exports.IntegrationFigmaMutation = IntegrationFigmaMutation;
    exports.IntegrationFrontMutation = IntegrationFrontMutation;
    exports.IntegrationGitHubEnterpriseServerConnectMutation = IntegrationGitHubEnterpriseServerConnectMutation;
    exports.IntegrationGitHubPersonalMutation = IntegrationGitHubPersonalMutation;
    exports.IntegrationGithubConnectMutation = IntegrationGithubConnectMutation;
    exports.IntegrationGithubImportConnectMutation = IntegrationGithubImportConnectMutation;
    exports.IntegrationGithubImportRefreshMutation = IntegrationGithubImportRefreshMutation;
    exports.IntegrationGitlabConnectMutation = IntegrationGitlabConnectMutation;
    exports.IntegrationGongMutation = IntegrationGongMutation;
    exports.IntegrationGoogleSheetsMutation = IntegrationGoogleSheetsMutation;
    exports.IntegrationHasScopesPayload = IntegrationHasScopesPayload;
    exports.IntegrationHasScopesQuery = IntegrationHasScopesQuery;
    exports.IntegrationIntercomMutation = IntegrationIntercomMutation;
    exports.IntegrationJiraPersonalMutation = IntegrationJiraPersonalMutation;
    exports.IntegrationLoomMutation = IntegrationLoomMutation;
    exports.IntegrationPayload = IntegrationPayload;
    exports.IntegrationQuery = IntegrationQuery;
    exports.IntegrationRequestMutation = IntegrationRequestMutation;
    exports.IntegrationRequestPayload = IntegrationRequestPayload;
    exports.IntegrationSalesforceMutation = IntegrationSalesforceMutation;
    exports.IntegrationSentryConnectMutation = IntegrationSentryConnectMutation;
    exports.IntegrationSlackAsksMutation = IntegrationSlackAsksMutation;
    exports.IntegrationSlackCustomViewNotificationsMutation = IntegrationSlackCustomViewNotificationsMutation;
    exports.IntegrationSlackCustomerChannelLinkMutation = IntegrationSlackCustomerChannelLinkMutation;
    exports.IntegrationSlackImportEmojisMutation = IntegrationSlackImportEmojisMutation;
    exports.IntegrationSlackMutation = IntegrationSlackMutation;
    exports.IntegrationSlackOrAsksUpdateSlackTeamNameMutation = IntegrationSlackOrAsksUpdateSlackTeamNameMutation;
    exports.IntegrationSlackOrgProjectUpdatesPostMutation = IntegrationSlackOrgProjectUpdatesPostMutation;
    exports.IntegrationSlackPersonalMutation = IntegrationSlackPersonalMutation;
    exports.IntegrationSlackPostMutation = IntegrationSlackPostMutation;
    exports.IntegrationSlackProjectPostMutation = IntegrationSlackProjectPostMutation;
    exports.IntegrationSlackWorkspaceNamePayload = IntegrationSlackWorkspaceNamePayload;
    exports.IntegrationTemplate = IntegrationTemplate;
    exports.IntegrationTemplateConnection = IntegrationTemplateConnection;
    exports.IntegrationTemplatePayload = IntegrationTemplatePayload;
    exports.IntegrationTemplateQuery = IntegrationTemplateQuery;
    exports.IntegrationTemplatesQuery = IntegrationTemplatesQuery;
    exports.IntegrationZendeskMutation = IntegrationZendeskMutation;
    exports.IntegrationsQuery = IntegrationsQuery;
    exports.IntegrationsSettings = IntegrationsSettings;
    exports.IntegrationsSettingsPayload = IntegrationsSettingsPayload;
    exports.IntegrationsSettingsQuery = IntegrationsSettingsQuery;
    exports.InternalLinearError = InternalLinearError;
    exports.InvalidInputLinearError = InvalidInputLinearError;
    exports.Issue = Issue;
    exports.IssueAddLabelMutation = IssueAddLabelMutation;
    exports.IssueArchivePayload = IssueArchivePayload;
    exports.IssueAssignedToYouNotificationWebhookPayload = IssueAssignedToYouNotificationWebhookPayload;
    exports.IssueBatchPayload = IssueBatchPayload;
    exports.IssueChildWebhookPayload = IssueChildWebhookPayload;
    exports.IssueCommentMentionNotificationWebhookPayload = IssueCommentMentionNotificationWebhookPayload;
    exports.IssueCommentReactionNotificationWebhookPayload = IssueCommentReactionNotificationWebhookPayload;
    exports.IssueConnection = IssueConnection;
    exports.IssueEmojiReactionNotificationWebhookPayload = IssueEmojiReactionNotificationWebhookPayload;
    exports.IssueExternalSyncDisableMutation = IssueExternalSyncDisableMutation;
    exports.IssueFigmaFileKeySearchQuery = IssueFigmaFileKeySearchQuery;
    exports.IssueFilterSuggestionPayload = IssueFilterSuggestionPayload;
    exports.IssueFilterSuggestionQuery = IssueFilterSuggestionQuery;
    exports.IssueHistory = IssueHistory;
    exports.IssueHistoryConnection = IssueHistoryConnection;
    exports.IssueImport = IssueImport;
    exports.IssueImportCheckCsvQuery = IssueImportCheckCsvQuery;
    exports.IssueImportCheckPayload = IssueImportCheckPayload;
    exports.IssueImportCheckSyncQuery = IssueImportCheckSyncQuery;
    exports.IssueImportCreateAsanaMutation = IssueImportCreateAsanaMutation;
    exports.IssueImportCreateClubhouseMutation = IssueImportCreateClubhouseMutation;
    exports.IssueImportCreateCsvJiraMutation = IssueImportCreateCsvJiraMutation;
    exports.IssueImportCreateGithubMutation = IssueImportCreateGithubMutation;
    exports.IssueImportCreateJiraMutation = IssueImportCreateJiraMutation;
    exports.IssueImportDeletePayload = IssueImportDeletePayload;
    exports.IssueImportJqlCheckPayload = IssueImportJqlCheckPayload;
    exports.IssueImportJqlCheckQuery = IssueImportJqlCheckQuery;
    exports.IssueImportPayload = IssueImportPayload;
    exports.IssueImportProcessMutation = IssueImportProcessMutation;
    exports.IssueImportSyncCheckPayload = IssueImportSyncCheckPayload;
    exports.IssueLabel = IssueLabel;
    exports.IssueLabelChildWebhookPayload = IssueLabelChildWebhookPayload;
    exports.IssueLabelConnection = IssueLabelConnection;
    exports.IssueLabelPayload = IssueLabelPayload;
    exports.IssueLabelQuery = IssueLabelQuery;
    exports.IssueLabelWebhookPayload = IssueLabelWebhookPayload;
    exports.IssueLabel_ChildrenQuery = IssueLabel_ChildrenQuery;
    exports.IssueLabel_IssuesQuery = IssueLabel_IssuesQuery;
    exports.IssueLabelsQuery = IssueLabelsQuery;
    exports.IssueMentionNotificationWebhookPayload = IssueMentionNotificationWebhookPayload;
    exports.IssueNewCommentNotificationWebhookPayload = IssueNewCommentNotificationWebhookPayload;
    exports.IssueNotification = IssueNotification;
    exports.IssuePayload = IssuePayload;
    exports.IssuePriorityValue = IssuePriorityValue;
    exports.IssuePriorityValuesQuery = IssuePriorityValuesQuery;
    exports.IssueQuery = IssueQuery;
    exports.IssueRelation = IssueRelation;
    exports.IssueRelationConnection = IssueRelationConnection;
    exports.IssueRelationHistoryPayload = IssueRelationHistoryPayload;
    exports.IssueRelationPayload = IssueRelationPayload;
    exports.IssueRelationQuery = IssueRelationQuery;
    exports.IssueRelationsQuery = IssueRelationsQuery;
    exports.IssueReminderMutation = IssueReminderMutation;
    exports.IssueRemoveLabelMutation = IssueRemoveLabelMutation;
    exports.IssueSearchPayload = IssueSearchPayload;
    exports.IssueSearchQuery = IssueSearchQuery;
    exports.IssueSearchResult = IssueSearchResult;
    exports.IssueSlaWebhookPayload = IssueSlaWebhookPayload;
    exports.IssueStatusChangedNotificationWebhookPayload = IssueStatusChangedNotificationWebhookPayload;
    exports.IssueSubscribeMutation = IssueSubscribeMutation;
    exports.IssueSuggestion = IssueSuggestion;
    exports.IssueSuggestionConnection = IssueSuggestionConnection;
    exports.IssueSuggestionMetadata = IssueSuggestionMetadata;
    exports.IssueTitleSuggestionFromCustomerRequestPayload = IssueTitleSuggestionFromCustomerRequestPayload;
    exports.IssueTitleSuggestionFromCustomerRequestQuery = IssueTitleSuggestionFromCustomerRequestQuery;
    exports.IssueUnassignedFromYouNotificationWebhookPayload = IssueUnassignedFromYouNotificationWebhookPayload;
    exports.IssueUnsubscribeMutation = IssueUnsubscribeMutation;
    exports.IssueVcsBranchSearchQuery = IssueVcsBranchSearchQuery;
    exports.IssueVcsBranchSearch_AttachmentsQuery = IssueVcsBranchSearch_AttachmentsQuery;
    exports.IssueVcsBranchSearch_BotActorQuery = IssueVcsBranchSearch_BotActorQuery;
    exports.IssueVcsBranchSearch_ChildrenQuery = IssueVcsBranchSearch_ChildrenQuery;
    exports.IssueVcsBranchSearch_CommentsQuery = IssueVcsBranchSearch_CommentsQuery;
    exports.IssueVcsBranchSearch_FormerAttachmentsQuery = IssueVcsBranchSearch_FormerAttachmentsQuery;
    exports.IssueVcsBranchSearch_FormerNeedsQuery = IssueVcsBranchSearch_FormerNeedsQuery;
    exports.IssueVcsBranchSearch_HistoryQuery = IssueVcsBranchSearch_HistoryQuery;
    exports.IssueVcsBranchSearch_InverseRelationsQuery = IssueVcsBranchSearch_InverseRelationsQuery;
    exports.IssueVcsBranchSearch_LabelsQuery = IssueVcsBranchSearch_LabelsQuery;
    exports.IssueVcsBranchSearch_NeedsQuery = IssueVcsBranchSearch_NeedsQuery;
    exports.IssueVcsBranchSearch_RelationsQuery = IssueVcsBranchSearch_RelationsQuery;
    exports.IssueVcsBranchSearch_SubscribersQuery = IssueVcsBranchSearch_SubscribersQuery;
    exports.IssueWebhookPayload = IssueWebhookPayload;
    exports.IssueWithDescriptionChildWebhookPayload = IssueWithDescriptionChildWebhookPayload;
    exports.Issue_AttachmentsQuery = Issue_AttachmentsQuery;
    exports.Issue_BotActorQuery = Issue_BotActorQuery;
    exports.Issue_ChildrenQuery = Issue_ChildrenQuery;
    exports.Issue_CommentsQuery = Issue_CommentsQuery;
    exports.Issue_FormerAttachmentsQuery = Issue_FormerAttachmentsQuery;
    exports.Issue_FormerNeedsQuery = Issue_FormerNeedsQuery;
    exports.Issue_HistoryQuery = Issue_HistoryQuery;
    exports.Issue_InverseRelationsQuery = Issue_InverseRelationsQuery;
    exports.Issue_LabelsQuery = Issue_LabelsQuery;
    exports.Issue_NeedsQuery = Issue_NeedsQuery;
    exports.Issue_RelationsQuery = Issue_RelationsQuery;
    exports.Issue_SubscribersQuery = Issue_SubscribersQuery;
    exports.IssuesQuery = IssuesQuery;
    exports.JoinOrganizationFromOnboardingMutation = JoinOrganizationFromOnboardingMutation;
    exports.LabelNotificationSubscription = LabelNotificationSubscription;
    exports.LeaveOrganizationMutation = LeaveOrganizationMutation;
    exports.LinearClient = LinearClient;
    exports.LinearConnection = LinearConnection;
    exports.LinearDocument = _generated_documents;
    exports.LinearError = LinearError;
    exports.LinearGraphQLClient = LinearGraphQLClient;
    exports.LinearGraphQLError = LinearGraphQLError;
    exports.LinearSdk = LinearSdk;
    exports.LockTimeoutLinearError = LockTimeoutLinearError;
    exports.LogoutAllSessionsMutation = LogoutAllSessionsMutation;
    exports.LogoutMutation = LogoutMutation;
    exports.LogoutOtherSessionsMutation = LogoutOtherSessionsMutation;
    exports.LogoutResponse = LogoutResponse;
    exports.LogoutSessionMutation = LogoutSessionMutation;
    exports.NetworkLinearError = NetworkLinearError;
    exports.Node = Node;
    exports.Notification = Notification;
    exports.NotificationArchiveAllMutation = NotificationArchiveAllMutation;
    exports.NotificationArchivePayload = NotificationArchivePayload;
    exports.NotificationBatchActionPayload = NotificationBatchActionPayload;
    exports.NotificationCategoryPreferences = NotificationCategoryPreferences;
    exports.NotificationChannelPreferences = NotificationChannelPreferences;
    exports.NotificationConnection = NotificationConnection;
    exports.NotificationDeliveryPreferences = NotificationDeliveryPreferences;
    exports.NotificationDeliveryPreferencesChannel = NotificationDeliveryPreferencesChannel;
    exports.NotificationDeliveryPreferencesDay = NotificationDeliveryPreferencesDay;
    exports.NotificationDeliveryPreferencesSchedule = NotificationDeliveryPreferencesSchedule;
    exports.NotificationMarkReadAllMutation = NotificationMarkReadAllMutation;
    exports.NotificationMarkUnreadAllMutation = NotificationMarkUnreadAllMutation;
    exports.NotificationPayload = NotificationPayload;
    exports.NotificationQuery = NotificationQuery;
    exports.NotificationSnoozeAllMutation = NotificationSnoozeAllMutation;
    exports.NotificationSubscription = NotificationSubscription;
    exports.NotificationSubscriptionConnection = NotificationSubscriptionConnection;
    exports.NotificationSubscriptionPayload = NotificationSubscriptionPayload;
    exports.NotificationSubscriptionQuery = NotificationSubscriptionQuery;
    exports.NotificationSubscriptionsQuery = NotificationSubscriptionsQuery;
    exports.NotificationUnsnoozeAllMutation = NotificationUnsnoozeAllMutation;
    exports.NotificationsQuery = NotificationsQuery;
    exports.OAuthAppWebhookPayload = OAuthAppWebhookPayload;
    exports.OauthClientActorWebhookPayload = OauthClientActorWebhookPayload;
    exports.OauthClientApproval = OauthClientApproval;
    exports.OauthClientApprovalNotification = OauthClientApprovalNotification;
    exports.OauthClientChildWebhookPayload = OauthClientChildWebhookPayload;
    exports.Organization = Organization;
    exports.OrganizationAcceptedOrExpiredInviteDetailsPayload = OrganizationAcceptedOrExpiredInviteDetailsPayload;
    exports.OrganizationCancelDeletePayload = OrganizationCancelDeletePayload;
    exports.OrganizationDeleteChallengeMutation = OrganizationDeleteChallengeMutation;
    exports.OrganizationDeletePayload = OrganizationDeletePayload;
    exports.OrganizationDomain = OrganizationDomain;
    exports.OrganizationExistsPayload = OrganizationExistsPayload;
    exports.OrganizationExistsQuery = OrganizationExistsQuery;
    exports.OrganizationInvite = OrganizationInvite;
    exports.OrganizationInviteConnection = OrganizationInviteConnection;
    exports.OrganizationInviteFullDetailsPayload = OrganizationInviteFullDetailsPayload;
    exports.OrganizationInvitePayload = OrganizationInvitePayload;
    exports.OrganizationInviteQuery = OrganizationInviteQuery;
    exports.OrganizationInvitesQuery = OrganizationInvitesQuery;
    exports.OrganizationIpRestriction = OrganizationIpRestriction;
    exports.OrganizationMeta = OrganizationMeta;
    exports.OrganizationOriginWebhookPayload = OrganizationOriginWebhookPayload;
    exports.OrganizationPayload = OrganizationPayload;
    exports.OrganizationQuery = OrganizationQuery;
    exports.OrganizationStartTrialForPlanMutation = OrganizationStartTrialForPlanMutation;
    exports.OrganizationStartTrialMutation = OrganizationStartTrialMutation;
    exports.OrganizationStartTrialPayload = OrganizationStartTrialPayload;
    exports.Organization_IntegrationsQuery = Organization_IntegrationsQuery;
    exports.Organization_LabelsQuery = Organization_LabelsQuery;
    exports.Organization_ProjectLabelsQuery = Organization_ProjectLabelsQuery;
    exports.Organization_SubscriptionQuery = Organization_SubscriptionQuery;
    exports.Organization_TeamsQuery = Organization_TeamsQuery;
    exports.Organization_TemplatesQuery = Organization_TemplatesQuery;
    exports.Organization_UsersQuery = Organization_UsersQuery;
    exports.OtherLinearError = OtherLinearError;
    exports.OtherNotificationWebhookPayload = OtherNotificationWebhookPayload;
    exports.PageInfo = PageInfo;
    exports.PaidSubscription = PaidSubscription;
    exports.PasskeyLoginStartResponse = PasskeyLoginStartResponse;
    exports.PostNotification = PostNotification;
    exports.Project = Project;
    exports.ProjectAddLabelMutation = ProjectAddLabelMutation;
    exports.ProjectArchivePayload = ProjectArchivePayload;
    exports.ProjectAttachment = ProjectAttachment;
    exports.ProjectChildWebhookPayload = ProjectChildWebhookPayload;
    exports.ProjectConnection = ProjectConnection;
    exports.ProjectFilterSuggestionPayload = ProjectFilterSuggestionPayload;
    exports.ProjectFilterSuggestionQuery = ProjectFilterSuggestionQuery;
    exports.ProjectHistory = ProjectHistory;
    exports.ProjectHistoryConnection = ProjectHistoryConnection;
    exports.ProjectLabel = ProjectLabel;
    exports.ProjectLabelConnection = ProjectLabelConnection;
    exports.ProjectLabelPayload = ProjectLabelPayload;
    exports.ProjectLabelQuery = ProjectLabelQuery;
    exports.ProjectLabel_ChildrenQuery = ProjectLabel_ChildrenQuery;
    exports.ProjectLabel_ProjectsQuery = ProjectLabel_ProjectsQuery;
    exports.ProjectLabelsQuery = ProjectLabelsQuery;
    exports.ProjectMilestone = ProjectMilestone;
    exports.ProjectMilestoneChildWebhookPayload = ProjectMilestoneChildWebhookPayload;
    exports.ProjectMilestoneConnection = ProjectMilestoneConnection;
    exports.ProjectMilestoneMoveIssueToTeam = ProjectMilestoneMoveIssueToTeam;
    exports.ProjectMilestoneMovePayload = ProjectMilestoneMovePayload;
    exports.ProjectMilestoneMoveProjectTeams = ProjectMilestoneMoveProjectTeams;
    exports.ProjectMilestonePayload = ProjectMilestonePayload;
    exports.ProjectMilestoneQuery = ProjectMilestoneQuery;
    exports.ProjectMilestone_DocumentContentQuery = ProjectMilestone_DocumentContentQuery;
    exports.ProjectMilestone_IssuesQuery = ProjectMilestone_IssuesQuery;
    exports.ProjectMilestonesQuery = ProjectMilestonesQuery;
    exports.ProjectNotification = ProjectNotification;
    exports.ProjectNotificationSubscription = ProjectNotificationSubscription;
    exports.ProjectPayload = ProjectPayload;
    exports.ProjectQuery = ProjectQuery;
    exports.ProjectRelation = ProjectRelation;
    exports.ProjectRelationConnection = ProjectRelationConnection;
    exports.ProjectRelationPayload = ProjectRelationPayload;
    exports.ProjectRelationQuery = ProjectRelationQuery;
    exports.ProjectRelationsQuery = ProjectRelationsQuery;
    exports.ProjectRemoveLabelMutation = ProjectRemoveLabelMutation;
    exports.ProjectSearchPayload = ProjectSearchPayload;
    exports.ProjectSearchResult = ProjectSearchResult;
    exports.ProjectStatus = ProjectStatus;
    exports.ProjectStatusArchivePayload = ProjectStatusArchivePayload;
    exports.ProjectStatusChildWebhookPayload = ProjectStatusChildWebhookPayload;
    exports.ProjectStatusConnection = ProjectStatusConnection;
    exports.ProjectStatusCountPayload = ProjectStatusCountPayload;
    exports.ProjectStatusPayload = ProjectStatusPayload;
    exports.ProjectStatusQuery = ProjectStatusQuery;
    exports.ProjectStatusesQuery = ProjectStatusesQuery;
    exports.ProjectUpdate = ProjectUpdate;
    exports.ProjectUpdateArchivePayload = ProjectUpdateArchivePayload;
    exports.ProjectUpdateChildWebhookPayload = ProjectUpdateChildWebhookPayload;
    exports.ProjectUpdateConnection = ProjectUpdateConnection;
    exports.ProjectUpdatePayload = ProjectUpdatePayload;
    exports.ProjectUpdateQuery = ProjectUpdateQuery;
    exports.ProjectUpdateReminderPayload = ProjectUpdateReminderPayload;
    exports.ProjectUpdateWebhookPayload = ProjectUpdateWebhookPayload;
    exports.ProjectUpdate_CommentsQuery = ProjectUpdate_CommentsQuery;
    exports.ProjectUpdatesQuery = ProjectUpdatesQuery;
    exports.ProjectWebhookPayload = ProjectWebhookPayload;
    exports.Project_CommentsQuery = Project_CommentsQuery;
    exports.Project_DocumentContentQuery = Project_DocumentContentQuery;
    exports.Project_DocumentsQuery = Project_DocumentsQuery;
    exports.Project_ExternalLinksQuery = Project_ExternalLinksQuery;
    exports.Project_HistoryQuery = Project_HistoryQuery;
    exports.Project_InitiativesQuery = Project_InitiativesQuery;
    exports.Project_InverseRelationsQuery = Project_InverseRelationsQuery;
    exports.Project_IssuesQuery = Project_IssuesQuery;
    exports.Project_LabelsQuery = Project_LabelsQuery;
    exports.Project_MembersQuery = Project_MembersQuery;
    exports.Project_NeedsQuery = Project_NeedsQuery;
    exports.Project_ProjectMilestonesQuery = Project_ProjectMilestonesQuery;
    exports.Project_ProjectUpdatesQuery = Project_ProjectUpdatesQuery;
    exports.Project_RelationsQuery = Project_RelationsQuery;
    exports.Project_TeamsQuery = Project_TeamsQuery;
    exports.ProjectsQuery = ProjectsQuery;
    exports.PullRequestNotification = PullRequestNotification;
    exports.PushSubscription = PushSubscription;
    exports.PushSubscriptionPayload = PushSubscriptionPayload;
    exports.PushSubscriptionTestPayload = PushSubscriptionTestPayload;
    exports.PushSubscriptionTestQuery = PushSubscriptionTestQuery;
    exports.RateLimitPayload = RateLimitPayload;
    exports.RateLimitResultPayload = RateLimitResultPayload;
    exports.RateLimitStatusQuery = RateLimitStatusQuery;
    exports.RatelimitedLinearError = RatelimitedLinearError;
    exports.Reaction = Reaction;
    exports.ReactionPayload = ReactionPayload;
    exports.ReactionWebhookPayload = ReactionWebhookPayload;
    exports.RefreshGoogleSheetsDataMutation = RefreshGoogleSheetsDataMutation;
    exports.Request = Request;
    exports.ResendOrganizationInviteByEmailMutation = ResendOrganizationInviteByEmailMutation;
    exports.ResendOrganizationInviteMutation = ResendOrganizationInviteMutation;
    exports.Roadmap = Roadmap;
    exports.RoadmapArchivePayload = RoadmapArchivePayload;
    exports.RoadmapConnection = RoadmapConnection;
    exports.RoadmapPayload = RoadmapPayload;
    exports.RoadmapQuery = RoadmapQuery;
    exports.RoadmapToProject = RoadmapToProject;
    exports.RoadmapToProjectConnection = RoadmapToProjectConnection;
    exports.RoadmapToProjectPayload = RoadmapToProjectPayload;
    exports.RoadmapToProjectQuery = RoadmapToProjectQuery;
    exports.RoadmapToProjectsQuery = RoadmapToProjectsQuery;
    exports.Roadmap_ProjectsQuery = Roadmap_ProjectsQuery;
    exports.RoadmapsQuery = RoadmapsQuery;
    exports.SamlTokenUserAccountAuthMutation = SamlTokenUserAccountAuthMutation;
    exports.SearchDocumentsQuery = SearchDocumentsQuery;
    exports.SearchDocuments_ArchivePayloadQuery = SearchDocuments_ArchivePayloadQuery;
    exports.SearchIssuesQuery = SearchIssuesQuery;
    exports.SearchIssues_ArchivePayloadQuery = SearchIssues_ArchivePayloadQuery;
    exports.SearchProjectsQuery = SearchProjectsQuery;
    exports.SearchProjects_ArchivePayloadQuery = SearchProjects_ArchivePayloadQuery;
    exports.SemanticSearchPayload = SemanticSearchPayload;
    exports.SemanticSearchQuery = SemanticSearchQuery;
    exports.SemanticSearchResult = SemanticSearchResult;
    exports.SesDomainIdentity = SesDomainIdentity;
    exports.SesDomainIdentityDnsRecord = SesDomainIdentityDnsRecord;
    exports.SlackAsksTeamSettings = SlackAsksTeamSettings;
    exports.SlackChannelConnectPayload = SlackChannelConnectPayload;
    exports.SlackChannelNameMapping = SlackChannelNameMapping;
    exports.SsoUrlFromEmailQuery = SsoUrlFromEmailQuery;
    exports.SsoUrlFromEmailResponse = SsoUrlFromEmailResponse;
    exports.SuccessPayload = SuccessPayload;
    exports.SummaryPayload = SummaryPayload;
    exports.SuspendUserMutation = SuspendUserMutation;
    exports.SyncedExternalThread = SyncedExternalThread;
    exports.Team = Team;
    exports.TeamArchivePayload = TeamArchivePayload;
    exports.TeamChildWebhookPayload = TeamChildWebhookPayload;
    exports.TeamConnection = TeamConnection;
    exports.TeamMembership = TeamMembership;
    exports.TeamMembershipConnection = TeamMembershipConnection;
    exports.TeamMembershipPayload = TeamMembershipPayload;
    exports.TeamMembershipQuery = TeamMembershipQuery;
    exports.TeamMembershipsQuery = TeamMembershipsQuery;
    exports.TeamNotificationSubscription = TeamNotificationSubscription;
    exports.TeamOriginWebhookPayload = TeamOriginWebhookPayload;
    exports.TeamPayload = TeamPayload;
    exports.TeamQuery = TeamQuery;
    exports.TeamWithParentWebhookPayload = TeamWithParentWebhookPayload;
    exports.Team_CyclesQuery = Team_CyclesQuery;
    exports.Team_GitAutomationStatesQuery = Team_GitAutomationStatesQuery;
    exports.Team_IssuesQuery = Team_IssuesQuery;
    exports.Team_LabelsQuery = Team_LabelsQuery;
    exports.Team_MembersQuery = Team_MembersQuery;
    exports.Team_MembershipsQuery = Team_MembershipsQuery;
    exports.Team_ProjectsQuery = Team_ProjectsQuery;
    exports.Team_StatesQuery = Team_StatesQuery;
    exports.Team_TemplatesQuery = Team_TemplatesQuery;
    exports.Team_WebhooksQuery = Team_WebhooksQuery;
    exports.TeamsQuery = TeamsQuery;
    exports.Template = Template;
    exports.TemplateConnection = TemplateConnection;
    exports.TemplatePayload = TemplatePayload;
    exports.TemplateQuery = TemplateQuery;
    exports.TemplatesForIntegrationQuery = TemplatesForIntegrationQuery;
    exports.TemplatesQuery = TemplatesQuery;
    exports.TimeSchedule = TimeSchedule;
    exports.TimeScheduleConnection = TimeScheduleConnection;
    exports.TimeScheduleEntry = TimeScheduleEntry;
    exports.TimeSchedulePayload = TimeSchedulePayload;
    exports.TimeScheduleQuery = TimeScheduleQuery;
    exports.TimeScheduleRefreshIntegrationScheduleMutation = TimeScheduleRefreshIntegrationScheduleMutation;
    exports.TimeScheduleUpsertExternalMutation = TimeScheduleUpsertExternalMutation;
    exports.TimeSchedulesQuery = TimeSchedulesQuery;
    exports.TriageResponsibilitiesQuery = TriageResponsibilitiesQuery;
    exports.TriageResponsibility = TriageResponsibility;
    exports.TriageResponsibilityConnection = TriageResponsibilityConnection;
    exports.TriageResponsibilityManualSelection = TriageResponsibilityManualSelection;
    exports.TriageResponsibilityPayload = TriageResponsibilityPayload;
    exports.TriageResponsibilityQuery = TriageResponsibilityQuery;
    exports.TriageResponsibility_ManualSelectionQuery = TriageResponsibility_ManualSelectionQuery;
    exports.UnarchiveCustomerNeedMutation = UnarchiveCustomerNeedMutation;
    exports.UnarchiveDocumentMutation = UnarchiveDocumentMutation;
    exports.UnarchiveInitiativeMutation = UnarchiveInitiativeMutation;
    exports.UnarchiveInitiativeUpdateMutation = UnarchiveInitiativeUpdateMutation;
    exports.UnarchiveIssueMutation = UnarchiveIssueMutation;
    exports.UnarchiveNotificationMutation = UnarchiveNotificationMutation;
    exports.UnarchiveProjectMutation = UnarchiveProjectMutation;
    exports.UnarchiveProjectStatusMutation = UnarchiveProjectStatusMutation;
    exports.UnarchiveProjectUpdateMutation = UnarchiveProjectUpdateMutation;
    exports.UnarchiveRoadmapMutation = UnarchiveRoadmapMutation;
    exports.UnarchiveTeamMutation = UnarchiveTeamMutation;
    exports.UnknownLinearError = UnknownLinearError;
    exports.UnsuspendUserMutation = UnsuspendUserMutation;
    exports.UpdateAttachmentMutation = UpdateAttachmentMutation;
    exports.UpdateCommentMutation = UpdateCommentMutation;
    exports.UpdateCustomViewMutation = UpdateCustomViewMutation;
    exports.UpdateCustomerMutation = UpdateCustomerMutation;
    exports.UpdateCustomerNeedMutation = UpdateCustomerNeedMutation;
    exports.UpdateCustomerStatusMutation = UpdateCustomerStatusMutation;
    exports.UpdateCustomerTierMutation = UpdateCustomerTierMutation;
    exports.UpdateCycleMutation = UpdateCycleMutation;
    exports.UpdateDocumentMutation = UpdateDocumentMutation;
    exports.UpdateEmailIntakeAddressMutation = UpdateEmailIntakeAddressMutation;
    exports.UpdateEntityExternalLinkMutation = UpdateEntityExternalLinkMutation;
    exports.UpdateFavoriteMutation = UpdateFavoriteMutation;
    exports.UpdateGitAutomationStateMutation = UpdateGitAutomationStateMutation;
    exports.UpdateGitAutomationTargetBranchMutation = UpdateGitAutomationTargetBranchMutation;
    exports.UpdateInitiativeMutation = UpdateInitiativeMutation;
    exports.UpdateInitiativeRelationMutation = UpdateInitiativeRelationMutation;
    exports.UpdateInitiativeToProjectMutation = UpdateInitiativeToProjectMutation;
    exports.UpdateInitiativeUpdateMutation = UpdateInitiativeUpdateMutation;
    exports.UpdateIntegrationIntercomSettingsMutation = UpdateIntegrationIntercomSettingsMutation;
    exports.UpdateIntegrationsSettingsMutation = UpdateIntegrationsSettingsMutation;
    exports.UpdateIssueBatchMutation = UpdateIssueBatchMutation;
    exports.UpdateIssueImportMutation = UpdateIssueImportMutation;
    exports.UpdateIssueLabelMutation = UpdateIssueLabelMutation;
    exports.UpdateIssueMutation = UpdateIssueMutation;
    exports.UpdateIssueRelationMutation = UpdateIssueRelationMutation;
    exports.UpdateNotificationCategoryChannelSubscriptionMutation = UpdateNotificationCategoryChannelSubscriptionMutation;
    exports.UpdateNotificationMutation = UpdateNotificationMutation;
    exports.UpdateNotificationSubscriptionMutation = UpdateNotificationSubscriptionMutation;
    exports.UpdateOrganizationInviteMutation = UpdateOrganizationInviteMutation;
    exports.UpdateOrganizationMutation = UpdateOrganizationMutation;
    exports.UpdateProjectLabelMutation = UpdateProjectLabelMutation;
    exports.UpdateProjectMilestoneMutation = UpdateProjectMilestoneMutation;
    exports.UpdateProjectMutation = UpdateProjectMutation;
    exports.UpdateProjectRelationMutation = UpdateProjectRelationMutation;
    exports.UpdateProjectStatusMutation = UpdateProjectStatusMutation;
    exports.UpdateProjectUpdateMutation = UpdateProjectUpdateMutation;
    exports.UpdateRoadmapMutation = UpdateRoadmapMutation;
    exports.UpdateRoadmapToProjectMutation = UpdateRoadmapToProjectMutation;
    exports.UpdateTeamMembershipMutation = UpdateTeamMembershipMutation;
    exports.UpdateTeamMutation = UpdateTeamMutation;
    exports.UpdateTemplateMutation = UpdateTemplateMutation;
    exports.UpdateTimeScheduleMutation = UpdateTimeScheduleMutation;
    exports.UpdateTriageResponsibilityMutation = UpdateTriageResponsibilityMutation;
    exports.UpdateUserFlagMutation = UpdateUserFlagMutation;
    exports.UpdateUserMutation = UpdateUserMutation;
    exports.UpdateUserSettingsMutation = UpdateUserSettingsMutation;
    exports.UpdateViewPreferencesMutation = UpdateViewPreferencesMutation;
    exports.UpdateWebhookMutation = UpdateWebhookMutation;
    exports.UpdateWorkflowStateMutation = UpdateWorkflowStateMutation;
    exports.UploadFile = UploadFile;
    exports.UploadFileHeader = UploadFileHeader;
    exports.UploadPayload = UploadPayload;
    exports.UsageLimitExceededLinearError = UsageLimitExceededLinearError;
    exports.User = User;
    exports.UserActorWebhookPayload = UserActorWebhookPayload;
    exports.UserAdminPayload = UserAdminPayload;
    exports.UserAuthorizedApplication = UserAuthorizedApplication;
    exports.UserChildWebhookPayload = UserChildWebhookPayload;
    exports.UserConnection = UserConnection;
    exports.UserDemoteAdminMutation = UserDemoteAdminMutation;
    exports.UserDemoteMemberMutation = UserDemoteMemberMutation;
    exports.UserDiscordConnectMutation = UserDiscordConnectMutation;
    exports.UserExternalUserDisconnectMutation = UserExternalUserDisconnectMutation;
    exports.UserLinearError = UserLinearError;
    exports.UserNotificationSubscription = UserNotificationSubscription;
    exports.UserPayload = UserPayload;
    exports.UserPromoteAdminMutation = UserPromoteAdminMutation;
    exports.UserPromoteMemberMutation = UserPromoteMemberMutation;
    exports.UserQuery = UserQuery;
    exports.UserSettings = UserSettings;
    exports.UserSettingsFlagPayload = UserSettingsFlagPayload;
    exports.UserSettingsFlagsResetMutation = UserSettingsFlagsResetMutation;
    exports.UserSettingsFlagsResetPayload = UserSettingsFlagsResetPayload;
    exports.UserSettingsPayload = UserSettingsPayload;
    exports.UserSettingsQuery = UserSettingsQuery;
    exports.UserSettings_NotificationCategoryPreferencesQuery = UserSettings_NotificationCategoryPreferencesQuery;
    exports.UserSettings_NotificationCategoryPreferences_AppsAndIntegrationsQuery = UserSettings_NotificationCategoryPreferences_AppsAndIntegrationsQuery;
    exports.UserSettings_NotificationCategoryPreferences_AssignmentsQuery = UserSettings_NotificationCategoryPreferences_AssignmentsQuery;
    exports.UserSettings_NotificationCategoryPreferences_CommentsAndRepliesQuery = UserSettings_NotificationCategoryPreferences_CommentsAndRepliesQuery;
    exports.UserSettings_NotificationCategoryPreferences_CustomersQuery = UserSettings_NotificationCategoryPreferences_CustomersQuery;
    exports.UserSettings_NotificationCategoryPreferences_DocumentChangesQuery = UserSettings_NotificationCategoryPreferences_DocumentChangesQuery;
    exports.UserSettings_NotificationCategoryPreferences_FeedQuery = UserSettings_NotificationCategoryPreferences_FeedQuery;
    exports.UserSettings_NotificationCategoryPreferences_MentionsQuery = UserSettings_NotificationCategoryPreferences_MentionsQuery;
    exports.UserSettings_NotificationCategoryPreferences_PostsAndUpdatesQuery = UserSettings_NotificationCategoryPreferences_PostsAndUpdatesQuery;
    exports.UserSettings_NotificationCategoryPreferences_ReactionsQuery = UserSettings_NotificationCategoryPreferences_ReactionsQuery;
    exports.UserSettings_NotificationCategoryPreferences_RemindersQuery = UserSettings_NotificationCategoryPreferences_RemindersQuery;
    exports.UserSettings_NotificationCategoryPreferences_ReviewsQuery = UserSettings_NotificationCategoryPreferences_ReviewsQuery;
    exports.UserSettings_NotificationCategoryPreferences_StatusChangesQuery = UserSettings_NotificationCategoryPreferences_StatusChangesQuery;
    exports.UserSettings_NotificationCategoryPreferences_SubscriptionsQuery = UserSettings_NotificationCategoryPreferences_SubscriptionsQuery;
    exports.UserSettings_NotificationCategoryPreferences_SystemQuery = UserSettings_NotificationCategoryPreferences_SystemQuery;
    exports.UserSettings_NotificationCategoryPreferences_TriageQuery = UserSettings_NotificationCategoryPreferences_TriageQuery;
    exports.UserSettings_NotificationChannelPreferencesQuery = UserSettings_NotificationChannelPreferencesQuery;
    exports.UserSettings_NotificationDeliveryPreferencesQuery = UserSettings_NotificationDeliveryPreferencesQuery;
    exports.UserSettings_NotificationDeliveryPreferences_MobileQuery = UserSettings_NotificationDeliveryPreferences_MobileQuery;
    exports.UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleQuery = UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleQuery;
    exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayQuery = UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayQuery;
    exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayQuery = UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayQuery;
    exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayQuery = UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayQuery;
    exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayQuery = UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayQuery;
    exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayQuery = UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayQuery;
    exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayQuery = UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayQuery;
    exports.UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayQuery = UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayQuery;
    exports.UserUnlinkFromIdentityProviderMutation = UserUnlinkFromIdentityProviderMutation;
    exports.UserWebhookPayload = UserWebhookPayload;
    exports.User_AssignedIssuesQuery = User_AssignedIssuesQuery;
    exports.User_CreatedIssuesQuery = User_CreatedIssuesQuery;
    exports.User_DelegatedIssuesQuery = User_DelegatedIssuesQuery;
    exports.User_DraftsQuery = User_DraftsQuery;
    exports.User_TeamMembershipsQuery = User_TeamMembershipsQuery;
    exports.User_TeamsQuery = User_TeamsQuery;
    exports.UsersQuery = UsersQuery;
    exports.VerifyGitHubEnterpriseServerInstallationQuery = VerifyGitHubEnterpriseServerInstallationQuery;
    exports.ViewPreferences = ViewPreferences;
    exports.ViewPreferencesPayload = ViewPreferencesPayload;
    exports.ViewPreferencesValues = ViewPreferencesValues;
    exports.ViewerQuery = ViewerQuery;
    exports.Viewer_AssignedIssuesQuery = Viewer_AssignedIssuesQuery;
    exports.Viewer_CreatedIssuesQuery = Viewer_CreatedIssuesQuery;
    exports.Viewer_DelegatedIssuesQuery = Viewer_DelegatedIssuesQuery;
    exports.Viewer_DraftsQuery = Viewer_DraftsQuery;
    exports.Viewer_TeamMembershipsQuery = Viewer_TeamMembershipsQuery;
    exports.Viewer_TeamsQuery = Viewer_TeamsQuery;
    exports.Webhook = Webhook;
    exports.WebhookConnection = WebhookConnection;
    exports.WebhookFailureEvent = WebhookFailureEvent;
    exports.WebhookPayload = WebhookPayload;
    exports.WebhookQuery = WebhookQuery;
    exports.WebhooksQuery = WebhooksQuery;
    exports.WorkflowState = WorkflowState;
    exports.WorkflowStateArchivePayload = WorkflowStateArchivePayload;
    exports.WorkflowStateChildWebhookPayload = WorkflowStateChildWebhookPayload;
    exports.WorkflowStateConnection = WorkflowStateConnection;
    exports.WorkflowStatePayload = WorkflowStatePayload;
    exports.WorkflowStateQuery = WorkflowStateQuery;
    exports.WorkflowState_IssuesQuery = WorkflowState_IssuesQuery;
    exports.WorkflowStatesQuery = WorkflowStatesQuery;
    exports.parseLinearError = parseLinearError;

}));
//# sourceMappingURL=index-umd.js.map
