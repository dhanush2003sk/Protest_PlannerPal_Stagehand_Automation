/// <reference types="node" />
import { LinearWebhookHandler, LinearWebhookPayload } from "./types";
export declare const LINEAR_WEBHOOK_SIGNATURE_HEADER = "linear-signature";
export declare const LINEAR_WEBHOOK_TS_FIELD = "webhookTimestamp";
/**
 * Client for handling Linear webhook requests with helpers.
 */
export declare class LinearWebhookClient {
    private secret;
    /**
     * Creates a new LinearWebhookClient instance
     * @param secret The webhook signing secret. See https://linear.app/developers/webhooks#securing-webhooks.
     */
    constructor(secret: string);
    /**
     * Creates a webhook handler function that can process Linear webhook requests
     * @returns A webhook handler function with event registration capabilities.
     * Supports both Fetch API `(request: Request) => Promise<Response>` and
     * Node.js `(request: IncomingMessage, response: ServerResponse) => Promise<void>`
     */
    createHandler(): LinearWebhookHandler;
    /**
     * Determines whether the provided value is a Fetch API `Request`.
     * Used as a type guard to select the appropriate runtime path.
     *
     * @param value - Unknown request-like value
     * @returns True if `value` is a Fetch API `Request`
     */
    private isFetchRequest;
    /**
     * Creates an HTTP adapter for Fetch-based runtimes.
     * The body is not read until `readRawBody` is invoked.
     *
     * @param request - Fetch API `Request`
     * @returns Helpers to read input and send responses in a unified way
     */
    private createFetchAdapter;
    /**
     * Creates an HTTP adapter for Node.js HTTP runtimes.
     * The body stream is consumed when `readRawBody` is invoked.
     *
     * @param incomingMessage - Node.js `IncomingMessage`
     * @param res - Node.js `ServerResponse` used to write the response
     * @returns Helpers to read input and send responses in a unified way
     */
    private createNodeAdapter;
    /**
     * Selects and constructs the appropriate HTTP adapter for the
     * provided request type (Fetch or Node.js HTTP).
     *
     * @param requestOrMessage - A Fetch `Request` or Node.js `IncomingMessage`
     * @param response - Node.js `ServerResponse` (required for Node path)
     * @returns An HTTP adapter with unified IO helpers
     */
    private getHttpAdapter;
    /**
     * Parses the JSON body and verifies signature and optional timestamp.
     *
     * Throws if the JSON is invalid, the signature is invalid, or the timestamp check fails.
     *
     * @param rawBody - Raw request body as a Buffer
     * @param signature - The value of the `linear-signature` header
     * @returns The verified and parsed webhook payload
     */
    private parseVerifiedPayload;
    /**
     * Parses the raw body as a webhook payload with typing.
     *
     * @param rawBody - Raw request body as a Buffer
     * @returns Parsed webhook payload object
     */
    private parseBodyAsWebhookPayload;
    /**
     * Returns the list of handlers to invoke for a given event type,
     * including both specific and wildcard handlers.
     *
     * @param eventHandlers - Internal registry of event handlers
     * @param eventType - The webhook `type` field from the payload
     * @returns Ordered list of handlers to be executed
     */
    private collectHandlers;
    /**
     * Verify the webhook signature
     *
     * Throws an error if the signature or timestamp is invalid.
     *
     * @param rawBody The webhook request raw body
     * @param signature The signature to verify
     * @param timestamp The `webhookTimestamp` field from the request parsed body
     * @returns True if the signature is valid
     */
    verify(rawBody: Buffer, signature: string, timestamp?: number): boolean;
    /**
     * Parse and verify webhook data, throwing an error if the signature or given timestamp is invalid.
     *
     * @param rawBody The webhook request raw body
     * @param signature The signature to verify
     * @param timestamp The `webhookTimestamp` field from the request parsed body
     */
    parseData(rawBody: Buffer, signature: string, timestamp?: number): LinearWebhookPayload;
}
//# sourceMappingURL=client.d.ts.map